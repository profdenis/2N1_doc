{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cours de programmation orient\u00e9e objet","text":"<p>Auteur : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":"<ol> <li>Source de ces notes de cours</li> <li>Projet Shapes</li> <li>Projet menu</li> <li>API JDK 23</li> </ol>"},{"location":"#logiciels","title":"Logiciels","text":"<ol> <li>OpenJDK 23</li> <li>Documentation JDK 23</li> <li>IntelliJ IDEA</li> </ol>"},{"location":"#livres","title":"Livres","text":"<ol> <li>Java: The Complete Reference, Eleventh Edition</li> <li>Effective Java</li> <li>Head First Design Patterns</li> <li>Clean Code</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/","title":"\ud83d\udd381\ud83d\udd38Premier programme en Java","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#creation-dun-projet-java","title":"Cr\u00e9ation d\u2019un projet Java","text":"<p>Pour d\u00e9marrer un nouveau projet Java dans IntelliJ IDEA :</p> <ol> <li>Lancez IntelliJ IDEA et cliquez sur \u201cNew Project\u201d</li> <li>S\u00e9lectionnez \u201cJava\u201d dans la liste de gauche</li> <li>Configurez le projet :<ul> <li>Donnez un nom au projet</li> <li>S\u00e9lectionnez \u201cIntelliJ\u201d comme syst\u00e8me de build</li> <li>Choisissez OpenJDK 23[1]</li> </ul> </li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#structure-du-projet","title":"Structure du projet","text":"<p>Une fois le projet cr\u00e9\u00e9, cr\u00e9ez une nouvelle classe :</p> <ol> <li>Clic droit sur le dossier \u201csrc\u201d</li> <li>S\u00e9lectionnez New &gt; Java Class</li> <li>Entrez le nom complet : \u201ccom.example.calculator.Calculator\u201d[7]</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#programme-exemple","title":"Programme exemple","text":"<p>Voici un exemple de calculatrice simple qui illustre les concepts de base :</p> <pre><code>package com.example.calculator;\n\npublic class Calculator {\n    public static void main(String[] args) {\n        int[] numbers = {5, 10, 15, 20, 25};\n        int sum = 0;\n\n        System.out.println(\"Calculatrice simple\");\n\n        // Calcul de la somme\n        for (int num : numbers) {\n            System.out.println(\"Ajout de : \" + num);\n            sum += num;\n            // Pause pour d\u00e9monstration du d\u00e9bogage\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"Somme totale : \" + sum);\n        System.out.println(\"Moyenne : \" + (sum / numbers.length));\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#execution-du-programme","title":"Ex\u00e9cution du programme","text":"<p>Dans l\u2019IDE :</p> <ul> <li>Cliquez sur l\u2019ic\u00f4ne verte (\u25b6\ufe0f) \u00e0 c\u00f4t\u00e9 de la m\u00e9thode main</li> <li>Ou utilisez le raccourci Maj+F10[4]</li> </ul> <p>Dans le terminal de l\u2019IDE :</p> <ol> <li>Ouvrez le terminal int\u00e9gr\u00e9</li> <li>Naviguez vers le dossier de sortie</li> <li>Ex\u00e9cutez avec la commande <code>java com.example.calculator.Calculator</code>[3]</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#debogage","title":"D\u00e9bogage","text":"<p>Pour d\u00e9boguer le programme :</p> <ol> <li>Placez des points d\u2019arr\u00eat en cliquant dans la marge gauche de l\u2019\u00e9diteur</li> <li>Lancez le d\u00e9bogage avec l\u2019ic\u00f4ne de d\u00e9bogage (\ud83d\udc1e) ou Maj+F9[5]</li> </ol> <p>Commandes de d\u00e9bogage essentielles :</p> <ul> <li><code>F8</code> : Passer \u00e0 la ligne suivante</li> <li><code>F7</code> : Entrer dans une m\u00e9thode</li> <li><code>F9</code> : Continuer l\u2019ex\u00e9cution[5]</li> </ul> <p>Le mode d\u00e9bogage permet d\u2019inspecter les variables et de suivre l\u2019ex\u00e9cution du programme pas \u00e0 pas[5].</p>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/01-Premier_programme/#citations","title":"Citations","text":"<ul> <li>[1] https://blog.jetbrains.com/fr/idea/2024/10/java-23-et-intellij-idea/</li> <li>[2] https://devdocs.jabref.org/getting-into-the-code/guidelines-for-setting-up-a-local-workspace/intellij-12-build.html</li> <li>[3] https://fr.linkedin.com/pulse/cr%C3%A9er-votre-premi%C3%A8re-application-java-avec-intellij-philippe-simo</li> <li>[4] https://www.jetbrains.com/help/idea/run-java-applications.html</li> <li>[5] https://codegym.cc/fr/groups/posts/fr.243.debogage-dans-intellij-idea-guide-du-debutant</li> <li>[6] https://www.jetbrains.com/help/idea/debugging-code.html</li> <li>[7] https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html</li> <li>[8] https://www.jetbrains.com/help/idea/tutorial-remote-debug.html</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/02-Variables_et_types/","title":"\ud83d\udd382\ud83d\udd38Variables et types","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/02-Variables_et_types/#declaration-de-variables","title":"D\u00e9claration de variables","text":"<p>En Java, la d\u00e9claration de variables suit une syntaxe stricte :</p> <pre><code>// D\u00e9claration simple\ntype nomVariable;\n\n// D\u00e9claration avec initialisation\ntype nomVariable = valeur;\n\n// Exemples concrets\nint age = 25;\nString nom;\nnom = \"Alice\";\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/02-Variables_et_types/#types-de-variables","title":"Types de variables","text":"<p>Types primitifs :</p> <ul> <li><code>byte</code> : entier sur 8 bits (-128 \u00e0 127)</li> <li><code>short</code> : entier sur 16 bits (-32,768 \u00e0 32,767)</li> <li><code>int</code> : entier sur 32 bits (-2^31 \u00e0 2^31-1)</li> <li><code>long</code> : entier sur 64 bits (-2^63 \u00e0 2^63-1)</li> <li><code>float</code> : d\u00e9cimal sur 32 bits</li> <li><code>double</code> : d\u00e9cimal sur 64 bits</li> <li><code>boolean</code> : true ou false</li> <li><code>char</code> : caract\u00e8re Unicode sur 16 bits</li> </ul> <p>Classes wrapper :</p> Type primitif Classe wrapper Exemple d\u2019utilisation int Integer Integer nombre = 42; double Double Double prix = 19.99; boolean Boolean Boolean estActif = true; char Character Character lettre = \u2018A\u2019; <p>Les classes wrapper offrent des fonctionnalit\u00e9s suppl\u00e9mentaires :</p> <pre><code>// Conversion String vers int\nString nombreTexte = \"123\";\nint nombrePrimitif = Integer.parseInt(nombreTexte);\n\n// Valeurs min/max\nint maximum = Integer.MAX_VALUE;\nint minimum = Integer.MIN_VALUE;\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/02-Variables_et_types/#formatage-des-chaines","title":"Formatage des cha\u00eenes","text":"<p>Concat\u00e9nation simple :</p> <pre><code>String nom = \"Alice\";\nint age = 25;\nSystem.out.println(\"Je m'appelle \"+nom +\" et j'ai \"+age+\" ans\");\n</code></pre> <p>String.format() :</p> <pre><code>String message = String.format(\"Je m'appelle %s et j'ai %d ans\", nom, age);\nSystem.out.println(message);\n</code></pre> <p>printf :</p> <pre><code>System.out.printf(\"Je m'appelle %s et j'ai %d ans%n\", nom, age);\n</code></pre> <p>Text blocks (Java 15+) :</p> <pre><code>String texteMultiLigne = \"\"\"\n        Bonjour,\n        Je m'appelle %s\n        J'ai %d ans\n        \"\"\".formatted(nom, age);\n</code></pre> <p>Sp\u00e9cificateurs de format courants :</p> <ul> <li><code>%s</code> : cha\u00eenes</li> <li><code>%d</code> : entiers</li> <li><code>%f</code> : nombres d\u00e9cimaux</li> <li><code>%n</code> : saut de ligne</li> <li><code>%.2f</code> : d\u00e9cimal avec 2 chiffres apr\u00e8s la virgule</li> </ul> <p>Exemple complet :</p> <pre><code>public class ExempleFormatage {\n    public static void main(String[] args) {\n        String nom = \"Alice\";\n        int age = 25;\n        double taille = 1.68;\n        boolean estEtudiant = true;\n\n        // Formatage avec diff\u00e9rentes m\u00e9thodes\n        System.out.printf(\"Nom: %s, \u00c2ge: %d%n\", nom, age);\n        System.out.printf(\"Taille: %.2f m%n\", taille);\n\n        // Utilisation de text blocks avec formatage\n        String profil = \"\"\"\n                Profil de l'utilisateur:\n                Nom: %s\n                \u00c2ge: %d ans\n                Taille: %.2f m\n                Statut \u00e9tudiant: %b\n                \"\"\".formatted(nom, age, taille, estEtudiant);\n\n        System.out.println(profil);\n\n        // Formatage de nombres\n        double prix = 1234.5678;\n        System.out.printf(\"Prix format\u00e9: %,.2f \u20ac%n\", prix);  // Affiche: 1 234,57 \u20ac\n    }\n}\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/","title":"\ud83d\udd383\ud83d\udd38Conditionnelles","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#instructions-conditionnelles","title":"Instructions conditionnelles","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#structure-de-base-if-else","title":"Structure de base if-else","text":"<pre><code>public class ExemplesConditionnels {\n    public static void main(String[] args) {\n        int age = 17;\n\n        // If simple\n        if (age &gt;= 18) {\n            System.out.println(\"Vous \u00eates majeur\");\n        }\n\n        // If-else\n        if (age &gt;= 18) {\n            System.out.println(\"Vous \u00eates majeur\");\n        } else {\n            System.out.println(\"Vous \u00eates mineur\");\n        }\n\n        // If-else if-else\n        int note = 85;\n        if (note &gt;= 90) {\n            System.out.println(\"Excellent\");\n        } else if (note &gt;= 80) {\n            System.out.println(\"Tr\u00e8s bien\");\n        } else if (note &gt;= 70) {\n            System.out.println(\"Bien\");\n        } else {\n            System.out.println(\"\u00c0 am\u00e9liorer\");\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#switch","title":"Switch","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#switch-classique","title":"Switch classique","text":"<pre><code>public class ExemplesSwitch {\n    public static void main(String[] args) {\n        int jour = 3;\n\n        // Switch traditionnel\n        switch (jour) {\n            case 1:\n                System.out.println(\"Lundi\");\n                break;\n            case 2:\n                System.out.println(\"Mardi\");\n                break;\n            case 3:\n                System.out.println(\"Mercredi\");\n                break;\n            default:\n                System.out.println(\"Autre jour\");\n                break;\n        }\n\n        // Switch avec groupement de cas\n        String typeDejour;\n        switch (jour) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n                typeDejour = \"Jour de semaine\";\n                break;\n            case 6:\n            case 7:\n                typeDejour = \"Fin de semaine\";\n                break;\n            default:\n                typeDejour = \"Jour invalide\";\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#switch-expressions-java-14","title":"Switch expressions (Java 14+)","text":"<pre><code>public class ExemplesSwitchModerne {\n    public static void main(String[] args) {\n        String saison = \"HIVER\";\n\n        // Switch expression avec fl\u00e8ches\n        String activite = switch (saison) {\n            case \"PRINTEMPS\" -&gt; \"Jardinage\";\n            case \"\u00c9T\u00c9\" -&gt; \"Natation\";\n            case \"AUTOMNE\" -&gt; \"Randonn\u00e9e\";\n            case \"HIVER\" -&gt; \"Ski\";\n            default -&gt; \"Repos\";\n        };\n\n        // Switch avec yield\n        String message = switch (saison) {\n            case \"PRINTEMPS\" -&gt; {\n                String temp = \"Il fait doux\";\n                yield temp + \", c'est le temps du \" + activite;\n            }\n            case \"HIVER\" -&gt; {\n                String temp = \"Il fait froid\";\n                yield temp + \", allons faire du \" + activite;\n            }\n            default -&gt; \"Saison non reconnue\";\n        };\n\n        // Switch avec types (Java 21+)\n        Object valeur = \"42\";\n        String resultat = switch (valeur) {\n            case Integer i -&gt; \"Nombre entier: \" + i;\n            case String s -&gt; \"Cha\u00eene: \" + s;\n            case Double d -&gt; \"Nombre d\u00e9cimal: \" + d;\n            default -&gt; \"Type non g\u00e9r\u00e9\";\n        };\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/03-Conditionnelles/#exemple-pratique-combine","title":"Exemple pratique combin\u00e9","text":"<pre><code>public class CalculatriceNotes {\n    public static void main(String[] args) {\n        int note = 85;\n        String mention;\n\n        // Utilisation de if pour validation\n        if (note &lt; 0 || note &gt; 100) {\n            System.out.println(\"Note invalide\");\n            return;\n        }\n\n        // Utilisation de switch pour d\u00e9terminer la mention\n        mention = switch (note / 10) {\n            case 10, 9 -&gt; {\n                if (note == 100) {\n                    yield \"Parfait!\";\n                }\n                yield \"Excellent\";\n            }\n            case 8 -&gt; \"Tr\u00e8s bien\";\n            case 7 -&gt; \"Bien\";\n            case 6 -&gt; \"Passable\";\n            default -&gt; \"\u00c9chec\";\n        };\n\n        // Affichage du r\u00e9sultat format\u00e9\n        System.out.printf(\"Note: %d/100%nMention: %s%n\", note, mention);\n    }\n}\n</code></pre> <p>Ce dernier exemple montre comment combiner les instructions conditionnelles avec le formatage des cha\u00eenes et les nouvelles fonctionnalit\u00e9s de switch. Il illustre \u00e9galement l\u2019importance des validations et la fa\u00e7on dont les diff\u00e9rentes structures de contr\u00f4le peuvent travailler ensemble.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/","title":"\ud83d\udd384\ud83d\udd38Boucles","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/#boucle-while","title":"Boucle while","text":"<p>La boucle <code>while</code> s\u2019ex\u00e9cute tant que sa condition est vraie :</p> <pre><code>public class ExempleWhile {\n    public static void main(String[] args) {\n        int compteur = 0;\n\n        while (compteur &lt; 5) {\n            System.out.println(\"Compteur: \" + compteur);\n            compteur++;\n        }\n\n        // Exemple avec validation\n        int nombre = 100;\n        while (nombre &gt; 1) {\n            if (nombre % 2 == 0) {\n                nombre = nombre / 2;\n            } else {\n                nombre = nombre * 3 + 1;\n            }\n            System.out.println(\"Nombre actuel: \" + nombre);\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/#boucle-do-while","title":"Boucle do-while","text":"<p>La boucle <code>do-while</code> s\u2019ex\u00e9cute au moins une fois :</p> <pre><code>public class ExempleDoWhile {\n    public static void main(String[] args) {\n        int compteur = 0;\n\n        do {\n            System.out.println(\"It\u00e9ration: \" + compteur);\n            compteur++;\n        } while (compteur &lt; 3);\n\n        // Exemple avec accumulation\n        int somme = 0;\n        int nombre = 1;\n        do {\n            somme += nombre;\n            nombre++;\n        } while (nombre &lt;= 5);\n        System.out.println(\"Somme finale: \" + somme);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/#boucle-for","title":"Boucle for","text":"<p>Boucle for classique :</p> <pre><code>public class ExempleFor {\n    public static void main(String[] args) {\n        // Boucle simple\n        for (int i = 0; i &lt; 5; i++) {\n            System.out.println(\"Index: \" + i);\n        }\n\n        // Boucle avec pas diff\u00e9rent\n        for (int i = 0; i &lt;= 10; i += 2) {\n            System.out.println(\"Nombre pair: \" + i);\n        }\n\n        // Boucle d\u00e9croissante\n        for (int i = 5; i &gt; 0; i--) {\n            System.out.println(\"Compte \u00e0 rebours: \" + i);\n        }\n    }\n}\n</code></pre> <p>Boucle for-each :</p> <pre><code>public class ExempleForEach {\n    public static void main(String[] args) {\n        // Avec un tableau\n        int[] nombres = {1, 2, 3, 4, 5};\n        for (int nombre : nombres) {\n            System.out.println(\"Valeur: \" + nombre);\n        }\n\n        // Avec une collection de cha\u00eenes\n        String[] fruits = {\"pomme\", \"banane\", \"orange\"};\n        for (String fruit : fruits) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/#exemple-pratique-combine","title":"Exemple pratique combin\u00e9","text":"<pre><code>public class AnalyseNotes {\n    public static void main(String[] args) {\n        int[] notes = {85, 92, 78, 65, 88, 72};\n        int somme = 0;\n        int noteMax = Integer.MIN_VALUE;\n        int noteMin = Integer.MAX_VALUE;\n\n        // Utilisation de for-each pour le calcul\n        for (int note : notes) {\n            somme += note;\n            noteMax = Math.max(noteMax, note);\n            noteMin = Math.min(noteMin, note);\n        }\n\n        double moyenne = (double) somme / notes.length;\n\n        // Utilisation de while pour l'analyse\n        int i = 0;\n        int notesSupMoyenne = 0;\n        while (i &lt; notes.length) {\n            if (notes[i] &gt; moyenne) {\n                notesSupMoyenne++;\n            }\n            i++;\n        }\n\n        // Affichage des statistiques\n        System.out.printf(\"Moyenne: %.2f%n\", moyenne);\n        System.out.printf(\"Note maximale: %d%n\", noteMax);\n        System.out.printf(\"Note minimale: %d%n\", noteMin);\n        System.out.printf(\"Nombre de notes sup\u00e9rieures \u00e0 la moyenne: %d%n\", notesSupMoyenne);\n\n        // Utilisation de for pour afficher les notes avec leur statut\n        for (int j = 0; j &lt; notes.length; j++) {\n            String statut = notes[j] &gt;= moyenne ? \"\u2265 moyenne\" : \"&lt; moyenne\";\n            System.out.printf(\"Note %d: %d (%s)%n\", j + 1, notes[j], statut);\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/04-Boucles/#instructions-de-controle-de-boucle","title":"Instructions de contr\u00f4le de boucle","text":"<pre><code>public class ControleBoucles {\n    public static void main(String[] args) {\n        // Exemple de break\n        for (int i = 0; i &lt; 10; i++) {\n            if (i == 5) {\n                break; // Sort de la boucle\n            }\n            System.out.println(\"Valeur: \" + i);\n        }\n\n        // Exemple de continue\n        for (int i = 0; i &lt; 5; i++) {\n            if (i == 2) {\n                continue; // Passe \u00e0 l'it\u00e9ration suivante\n            }\n            System.out.println(\"Nombre: \" + i);\n        }\n\n        // Exemple avec \u00e9tiquette (label)\n        exterieur:\n        for (int i = 0; i &lt; 3; i++) {\n            for (int j = 0; j &lt; 3; j++) {\n                if (i == 1 &amp;&amp; j == 1) {\n                    break exterieur; // Sort des deux boucles\n                }\n                System.out.printf(\"i=%d, j=%d%n\", i, j);\n            }\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/05-stdin/","title":"\ud83d\udd385\ud83d\udd38stdin","text":""},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/05-stdin/#lecture-depuis-le-stdin","title":"Lecture depuis le stdin","text":"<p>Utilisation de Scanner</p> <pre><code>import java.util.Scanner;\n\npublic class LectureConsole {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Lecture simple\n        System.out.print(\"Entrez votre nom: \");\n        String nom = scanner.nextLine();\n\n        // Lecture avec validation\n        int age = 0;\n        boolean saisieValide = false;\n        while (!saisieValide) {\n            try {\n                System.out.print(\"Entrez votre \u00e2ge: \");\n                age = Integer.parseInt(scanner.nextLine());\n                saisieValide = true;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Erreur: Veuillez entrer un nombre valide\");\n            }\n        }\n\n        System.out.printf(\"Bonjour %s, vous avez %d ans%n\", nom, age);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/05-stdin/#gestion-des-exceptions-courantes","title":"Gestion des exceptions courantes","text":"<pre><code>import java.util.Scanner;\nimport java.util.InputMismatchException;\n\npublic class GestionExceptions {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Lecture d'un nombre avec gestion compl\u00e8te des erreurs\n        double nombre = 0;\n        boolean lectureOK = false;\n\n        while (!lectureOK) {\n            try {\n                System.out.print(\"Entrez un nombre d\u00e9cimal: \");\n                nombre = scanner.nextDouble();\n                lectureOK = true;\n            } catch (InputMismatchException e) {\n                System.out.println(\"Erreur: Format invalide\");\n                scanner.nextLine(); // Vider le buffer\n            }\n        }\n\n        System.out.printf(\"Nombre saisi: %.2f%n\", nombre);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/05-stdin/#exemple-pratique-complet","title":"Exemple pratique complet","text":"<pre><code>import java.util.Scanner;\n\npublic class CalculatriceInteractive {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            try {\n                // Lecture du premier nombre\n                System.out.print(\"Premier nombre (ou 'q' pour quitter): \");\n                String input = scanner.nextLine();\n\n                if (input.equalsIgnoreCase(\"q\")) {\n                    break;\n                }\n\n                double nombre1 = Double.parseDouble(input);\n\n                // Lecture de l'op\u00e9ration\n                System.out.print(\"Op\u00e9ration (+, -, *, /): \");\n                String operation = scanner.nextLine();\n\n                // Lecture du deuxi\u00e8me nombre\n                System.out.print(\"Deuxi\u00e8me nombre: \");\n                double nombre2 = Double.parseDouble(scanner.nextLine());\n\n                // Calcul et affichage du r\u00e9sultat\n                double resultat = switch (operation) {\n                    case \"+\" -&gt; nombre1 + nombre2;\n                    case \"-\" -&gt; nombre1 - nombre2;\n                    case \"*\" -&gt; nombre1 * nombre2;\n                    case \"/\" -&gt; {\n                        if (nombre2 == 0) {\n                            throw new ArithmeticException(\"Division par z\u00e9ro\");\n                        }\n                        yield nombre1 / nombre2;\n                    }\n                    default -&gt; throw new IllegalArgumentException(\"Op\u00e9ration non valide\");\n                };\n\n                System.out.printf(\"R\u00e9sultat: %.2f%n\", resultat);\n\n            } catch (NumberFormatException e) {\n                System.out.println(\"Erreur: Veuillez entrer un nombre valide\");\n            } catch (ArithmeticException e) {\n                System.out.println(\"Erreur: Division par z\u00e9ro impossible\");\n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Erreur: \" + e.getMessage());\n            }\n\n            System.out.println(); // Ligne vide pour la lisibilit\u00e9\n        }\n\n        System.out.println(\"Au revoir!\");\n        scanner.close();\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/1.%20Les%20bases/05-stdin/#points-importants-a-retenir","title":"Points importants \u00e0 retenir","text":"<p>Types d\u2019exceptions courantes :</p> <ul> <li><code>NumberFormatException</code> : Conversion de cha\u00eene en nombre \u00e9chou\u00e9e</li> <li><code>InputMismatchException</code> : Type de donn\u00e9e incorrect lors de la lecture</li> <li><code>NoSuchElementException</code> : Plus de donn\u00e9es \u00e0 lire</li> <li><code>IllegalArgumentException</code> : Argument invalide</li> </ul> <p>Bonnes pratiques :</p> <ul> <li>Toujours vider le buffer apr\u00e8s une erreur de lecture</li> <li>Fermer le <code>Scanner</code> \u00e0 la fin du programme</li> <li>Utiliser des boucles pour permettre plusieurs tentatives de saisie</li> <li>Pr\u00e9f\u00e9rer <code>scanner.nextLine()</code> suivi de conversion plut\u00f4t que les m\u00e9thodes sp\u00e9cifiques comme <code>nextInt()</code></li> </ul> <p>Structure try-catch recommand\u00e9e :</p> <pre><code>try{\n    // Code pouvant g\u00e9n\u00e9rer une exception\n} catch(Exception1 e) {\n    // Gestion de l'exception 1\n} catch(Exception2 e) {\n    // Gestion de l'exception 2\n} finally {\n    // Code ex\u00e9cut\u00e9 dans tous les cas\n}\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/06-Methodes/","title":"\ud83d\udd386\ud83d\udd38M\u00e9thodes","text":""},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/06-Methodes/#declaration-de-methodes","title":"D\u00e9claration de m\u00e9thodes","text":"<p>La syntaxe de base d\u2019une m\u00e9thode :</p> <pre><code>typeRetour nomMethode(typeParam1 param1, typeParam2 param2) {\n    // Corps de la m\u00e9thode\n    return valeur; // si n\u00e9cessaire\n}\n</code></pre> <p>Exemples simples :</p> <pre><code>public class ExemplesMethodes {\n    // M\u00e9thode sans param\u00e8tre et sans retour\n    void afficherBonjour() {\n        System.out.println(\"Bonjour!\");\n    }\n\n    // M\u00e9thode avec param\u00e8tres et retour\n    int additionner(int a, int b) {\n        return a + b;\n    }\n\n    // M\u00e9thode avec plusieurs param\u00e8tres\n    double calculerMoyenne(double... notes) {\n        double somme = 0;\n        for (double note : notes) {\n            somme += note;\n        }\n        return somme / notes.length;\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/06-Methodes/#passage-de-parametres","title":"Passage de param\u00e8tres","text":"<p>En Java, les param\u00e8tres sont toujours pass\u00e9s par valeur. Cependant, pour les objets, c\u2019est la r\u00e9f\u00e9rence qui est pass\u00e9e par valeur.</p> <p>Exemple avec types primitifs :</p> <pre><code>public class ExempleSwap {\n    // Cette m\u00e9thode ne fonctionne PAS\n    void swapQuiNeMarchePas(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 10;\n\n        ExempleSwap exemple = new ExempleSwap();\n        exemple.swapQuiNeMarchePas(x, y);\n\n        // x est toujours 5, y est toujours 10\n        System.out.printf(\"x=%d, y=%d%n\", x, y);\n    }\n}\n</code></pre> <p>Solution avec une classe wrapper :</p> <pre><code>public class ExempleSwapFonctionnel {\n    // Classe pour contenir une valeur modifiable\n    class Nombre {\n        int valeur;\n\n        Nombre(int valeur) {\n            this.valeur = valeur;\n        }\n    }\n\n    void swap(Nombre a, Nombre b) {\n        int temp = a.valeur;\n        a.valeur = b.valeur;\n        b.valeur = temp;\n    }\n\n    public static void main(String[] args) {\n        ExempleSwapFonctionnel exemple = new ExempleSwapFonctionnel();\n\n        Nombre x = exemple.new Nombre(5);\n        Nombre y = exemple.new Nombre(10);\n\n        System.out.printf(\"Avant: x=%d, y=%d%n\", x.valeur, y.valeur);\n        exemple.swap(x, y);\n        System.out.printf(\"Apr\u00e8s: x=%d, y=%d%n\", x.valeur, y.valeur);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/06-Methodes/#exemple-pratique-complet","title":"Exemple pratique complet","text":"<pre><code>public class ManipulationTableaux {\n    // M\u00e9thode qui modifie un tableau (le tableau est modifi\u00e9 car c'est une r\u00e9f\u00e9rence)\n    void doubleElements(int[] tableau) {\n        for (int i = 0; i &lt; tableau.length; i++) {\n            tableau[i] *= 2;\n        }\n    }\n\n    // M\u00e9thode qui retourne un nouveau tableau\n    int[] creerTableauDouble(int[] original) {\n        int[] resultat = new int[original.length];\n        for (int i = 0; i &lt; original.length; i++) {\n            resultat[i] = original[i] * 2;\n        }\n        return resultat;\n    }\n\n    // M\u00e9thode avec plusieurs param\u00e8tres de types diff\u00e9rents\n    String formaterNote(String nomEtudiant, double note, boolean afficherMention) {\n        String mention = \"\";\n        if (afficherMention) {\n            mention = note &gt;= 60 ? \" (R\u00e9ussite)\" : \" (\u00c9chec)\";\n        }\n        return String.format(\"%s a obtenu %.1f%s\", nomEtudiant, note, mention);\n    }\n\n    public static void main(String[] args) {\n        ManipulationTableaux manip = new ManipulationTableaux();\n\n        // Test avec tableau (passage par r\u00e9f\u00e9rence)\n        int[] nombres = {1, 2, 3, 4, 5};\n        System.out.println(\"Avant modification:\");\n        for (int n : nombres) System.out.print(n + \" \");\n        System.out.println();\n\n        manip.doubleElements(nombres);\n\n        System.out.println(\"Apr\u00e8s modification:\");\n        for (int n : nombres) System.out.print(n + \" \");\n        System.out.println();\n\n        // Test avec cr\u00e9ation d'un nouveau tableau\n        int[] original = {1, 2, 3};\n        int[] double1 = manip.creerTableauDouble(original);\n\n        System.out.println(\"\\nTableau original inchang\u00e9:\");\n        for (int n : original) System.out.print(n + \" \");\n        System.out.println();\n\n        System.out.println(\"Nouveau tableau:\");\n        for (int n : double1) System.out.print(n + \" \");\n        System.out.println();\n\n        // Test du formatage de note\n        String resultat = manip.formaterNote(\"Alice\", 85.5, true);\n        System.out.println(\"\\n\" + resultat);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/06-Methodes/#points-cles-a-retenir","title":"Points cl\u00e9s \u00e0 retenir","text":"<ol> <li>Les types primitifs sont toujours pass\u00e9s par valeur</li> <li>Les objets sont pass\u00e9s par r\u00e9f\u00e9rence (techniquement, la r\u00e9f\u00e9rence est pass\u00e9e par valeur)</li> <li>Pour modifier des valeurs primitives, il faut :<ul> <li>Soit retourner la nouvelle valeur</li> <li>Soit encapsuler la valeur dans un objet</li> <li>Soit utiliser un tableau</li> </ul> </li> <li>Les tableaux et les objets peuvent \u00eatre modifi\u00e9s \u00e0 l\u2019int\u00e9rieur des m\u00e9thodes</li> <li>Une m\u00e9thode peut avoir :<ul> <li>Aucun param\u00e8tre</li> <li>Un ou plusieurs param\u00e8tres</li> <li>Un nombre variable de param\u00e8tres (varargs)</li> <li>Un type de retour ou void</li> </ul> </li> </ol> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/07-Integer/","title":"\ud83d\udd387\ud83d\udd38Peut-on modifier la valeur \u00e0 l\u2019int\u00e9rieur d\u2019un Integer ?","text":"<p>Non, il est impossible de modifier la valeur \u00e0 l\u2019int\u00e9rieur d\u2019un <code>Integer</code> car la classe <code>Integer</code> est immuable  (immutable) en Java[1][5]. Cela signifie que lorsqu\u2019un objet de type <code>Integer</code> est cr\u00e9\u00e9, sa valeur ne peut plus \u00eatre  modifi\u00e9e.</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/07-Integer/#alternatives","title":"Alternatives","text":"<p>Pour g\u00e9rer des entiers modifiables, il existe deux solutions principales :</p> <p>Utiliser AtomicInteger :</p> <pre><code>import java.util.concurrent.atomic.AtomicInteger;\n\npublic class ExempleAtomicInteger {\n    public static void incrementer(AtomicInteger nombre) {\n        nombre.incrementAndGet();\n    }\n\n    public static void main(String[] args) {\n        AtomicInteger nombre = new AtomicInteger(5);\n        incrementer(nombre);\n        System.out.println(nombre.get()); // Affiche 6\n    }\n}\n</code></pre> <p>Cr\u00e9er une classe wrapper personnalis\u00e9e :</p> <pre><code>public class NombreModifiable {\n    private int valeur;\n\n    public NombreModifiable(int valeur) {\n        this.valeur = valeur;\n    }\n\n    public void setValeur(int nouvelleValeur) {\n        this.valeur = nouvelleValeur;\n    }\n\n    public int getValeur() {\n        return valeur;\n    }\n}\n</code></pre> <p>Cette limitation des Integer est intentionnelle et fait partie de la conception de Java[2]. Quand on tente de modifier un Integer, Java cr\u00e9e en fait un nouvel objet plut\u00f4t que de modifier l\u2019existant[4].</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/07-Integer/#citations","title":"Citations","text":"<ul> <li>[1] https://www.geeksforgeeks.org/how-to-pass-integer-by-reference-in-java/</li> <li>[2] https://namekdev.net/2012/07/immutability-of-java-integer/</li> <li>[3] https://www.scaler.com/topics/integer-class-in-java/</li> <li>[4] https://stackoverflow.com/questions/26185527/how-can-i-change-integer-value-when-it-is-an-argument-like-change-arrays-value/26185597</li> <li>[5] https://www.geeksforgeeks.org/primitive-wrapper-classes-are-immutable-in-java/</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/","title":"\ud83d\udd388\ud83d\udd38Puret\u00e9 d\u2019une m\u00e9thode","text":""},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/#methodes-pures-vs-impures","title":"M\u00e9thodes pures vs impures","text":"<p>Une m\u00e9thode pure :</p> <ul> <li>Retourne toujours la m\u00eame sortie pour les m\u00eames entr\u00e9es</li> <li>Ne modifie pas l\u2019\u00e9tat du programme</li> <li>N\u2019a pas d\u2019effets secondaires</li> </ul> <pre><code>public class ExemplePur {\n    // M\u00e9thode pure\n    int additionner(int a, int b) {\n        return a + b;\n    }\n\n    // M\u00e9thode pure\n    double calculerAire(double rayon) {\n        return Math.PI * rayon * rayon;\n    }\n}\n</code></pre> <p>Une m\u00e9thode impure modifie l\u2019\u00e9tat du programme ou d\u00e9pend d\u2019\u00e9tats externes :</p> <pre><code>public class ExempleImpur {\n    private int total = 0;\n\n    // M\u00e9thode impure : modifie l'\u00e9tat\n    void ajouterAuTotal(int valeur) {\n        total += valeur;\n    }\n\n    // M\u00e9thode impure : d\u00e9pend d'un \u00e9tat externe\n    double calculerTaxe(double montant) {\n        return montant * getTauxTaxe(); // d\u00e9pend d'une valeur externe\n    }\n\n    // M\u00e9thode impure : effet secondaire (I/O)\n    void sauvegarderDonnees(String donnees) {\n        System.out.println(donnees); // effet secondaire\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/#avantages-des-methodes-pures","title":"Avantages des m\u00e9thodes pures","text":"<ol> <li>Testabilit\u00e9 : Faciles \u00e0 tester, car le r\u00e9sultat d\u00e9pend uniquement des param\u00e8tres</li> <li>Pr\u00e9visibilit\u00e9 : Comportement constant et pr\u00e9visible</li> <li>R\u00e9utilisabilit\u00e9 : Peuvent \u00eatre utilis\u00e9es n\u2019importe o\u00f9 sans effets ind\u00e9sirables</li> <li>Parall\u00e9lisation : Peuvent s\u2019ex\u00e9cuter en parall\u00e8le sans risque</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/#principe-de-responsabilite-unique","title":"Principe de responsabilit\u00e9 unique","text":"<p>Une m\u00e9thode devrait avoir une seule responsabilit\u00e9. Voici un exemple de refactorisation :</p> <pre><code>// Mauvais exemple : trop de responsabilit\u00e9s\npublic class GestionEtudiants {\n    void traiterResultatsExamen(List&lt;Etudiant&gt; etudiants) {\n        double somme = 0;\n        int nombreEchecs = 0;\n\n        for (Etudiant etudiant : etudiants) {\n            somme += etudiant.getNote();\n            if (etudiant.getNote() &lt; 60) {\n                nombreEchecs++;\n                System.out.println(etudiant.getNom() + \" a \u00e9chou\u00e9\");\n                envoyerCourriel(etudiant);\n            }\n        }\n\n        double moyenne = somme / etudiants.size();\n        System.out.println(\"Moyenne: \" + moyenne);\n        System.out.println(\"Nombre d'\u00e9checs: \" + nombreEchecs);\n    }\n}\n\n// Version am\u00e9lior\u00e9e : responsabilit\u00e9s s\u00e9par\u00e9es\npublic class GestionEtudiants {\n    double calculerMoyenne(List&lt;Etudiant&gt; etudiants) {\n        double somme = 0;\n        for (Etudiant etudiant : etudiants) {\n            somme += etudiant.getNote();\n        }\n        return somme / etudiants.size();\n    }\n\n    List&lt;Etudiant&gt; identifierEchecs(List&lt;Etudiant&gt; etudiants) {\n        return etudiants.stream()\n                .filter(e -&gt; e.getNote() &lt; 60)\n                .collect(Collectors.toList());\n    }\n\n    void notifierEchecs(List&lt;Etudiant&gt; etudiantsEnEchec) {\n        for (Etudiant etudiant : etudiantsEnEchec) {\n            envoyerCourriel(etudiant);\n        }\n    }\n\n    void genererRapport(double moyenne, List&lt;Etudiant&gt; echecs) {\n        System.out.println(\"Moyenne: \" + moyenne);\n        System.out.println(\"Nombre d'\u00e9checs: \" + echecs.size());\n    }\n\n    // M\u00e9thode principale qui orchestre les autres\n    void traiterResultatsExamen(List&lt;Etudiant&gt; etudiants) {\n        double moyenne = calculerMoyenne(etudiants);\n        List&lt;Etudiant&gt; echecs = identifierEchecs(etudiants);\n        notifierEchecs(echecs);\n        genererRapport(moyenne, echecs);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/#avantages-de-la-decomposition","title":"Avantages de la d\u00e9composition","text":"<ol> <li>Lisibilit\u00e9 : Chaque m\u00e9thode est plus simple \u00e0 comprendre</li> <li>Maintenabilit\u00e9 : Plus facile \u00e0 modifier ou corriger</li> <li>R\u00e9utilisabilit\u00e9 : Les petites m\u00e9thodes peuvent \u00eatre r\u00e9utilis\u00e9es ailleurs</li> <li>Testabilit\u00e9 : Plus facile de tester des fonctionnalit\u00e9s isol\u00e9es</li> <li>D\u00e9bogage : Plus facile d\u2019identifier la source d\u2019un probl\u00e8me</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/08-Purete_d_une_methode/#autre-exemple","title":"Autre exemple","text":"<pre><code>public class AnalyseurTexte {\n    // Version initiale : trop de responsabilit\u00e9s\n    void analyserTexte(String texte) {\n        // Compte les mots\n        String[] mots = texte.split(\"\\\\s+\");\n        System.out.println(\"Nombre de mots: \" + mots.length);\n\n        // Compte les caract\u00e8res\n        int nombreCaracteres = texte.length();\n        System.out.println(\"Nombre de caract\u00e8res: \" + nombreCaracteres);\n\n        // Trouve le mot le plus long\n        String motLePlusLong = \"\";\n        for (String mot : mots) {\n            if (mot.length() &gt; motLePlusLong.length()) {\n                motLePlusLong = mot;\n            }\n        }\n        System.out.println(\"Mot le plus long: \" + motLePlusLong);\n    }\n}\n\n// Version refactoris\u00e9e\npublic class AnalyseurTexte {\n    int compterMots(String texte) {\n        return texte.split(\"\\\\s+\").length;\n    }\n\n    int compterCaracteres(String texte) {\n        return texte.length();\n    }\n\n    String trouverMotLePlusLong(String texte) {\n        return Arrays.stream(texte.split(\"\\\\s+\"))\n                .max(Comparator.comparingInt(String::length))\n                .orElse(\"\");\n    }\n\n    void afficherResultats(int nombreMots, int nombreCaracteres, String motLePlusLong) {\n        System.out.println(\"Nombre de mots: \" + nombreMots);\n        System.out.println(\"Nombre de caract\u00e8res: \" + nombreCaracteres);\n        System.out.println(\"Mot le plus long: \" + motLePlusLong);\n    }\n\n    // M\u00e9thode principale qui orchestre l'analyse\n    void analyserTexte(String texte) {\n        int nombreMots = compterMots(texte);\n        int nombreCaracteres = compterCaracteres(texte);\n        String motLePlusLong = trouverMotLePlusLong(texte);\n        afficherResultats(nombreMots, nombreCaracteres, motLePlusLong);\n    }\n}\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/","title":"\ud83d\udd389\ud83d\udd38R\u00e9cursivit\u00e9","text":""},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/#comprendre-la-recursivite","title":"Comprendre la r\u00e9cursivit\u00e9","text":"<p>La r\u00e9cursivit\u00e9 est bas\u00e9e sur deux principes fondamentaux :</p> <ol> <li>Un ou plusieurs cas de base qui arr\u00eatent la r\u00e9cursion</li> <li>Un ou plusieurs cas r\u00e9cursifs qui d\u00e9composent le probl\u00e8me</li> </ol> <p>Prenons l\u2019exemple de la suite de Fibonacci o\u00f9 :</p> <ul> <li>\\(F(0) = 0\\) (cas de base)</li> <li>\\(F(1) = 1\\) (cas de base)</li> <li>\\(F(n) = F(n-1) + F(n-2)\\) pour \\(n &gt; 1\\) (cas r\u00e9cursif)</li> </ul> <pre><code>public class ExempleFibonacci {\n    public static long fibonacci(int n) {\n        // Cas de base\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        // Cas r\u00e9cursif\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"F(5) = \" + fibonacci(5));\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/#visualisation-avec-le-debogueur","title":"Visualisation avec le d\u00e9bogueur","text":"<p>Pour visualiser les appels r\u00e9cursifs dans IntelliJ :</p> <ol> <li>Placez un point d\u2019arr\u00eat sur la ligne du cas r\u00e9cursif</li> <li>D\u00e9marrez le d\u00e9bogage (<code>Maj+F9</code>)</li> <li>Utilisez les commandes suivantes :<ul> <li><code>F7</code> (Step Into) pour suivre les appels r\u00e9cursifs</li> <li><code>F8</code> (Step Over) pour ex\u00e9cuter une ligne</li> <li><code>Alt+F7</code> pour sortir de la m\u00e9thode courante</li> </ul> </li> </ol> <pre><code>public class FibonacciDebug {\n    public static long fibonacci(int n) {\n        // Ajoutez cette ligne pour faciliter le d\u00e9bogage\n        System.out.printf(\"Calcul de F(%d)%n\", n);\n\n        if (n == 0) {\n            System.out.println(\"Cas de base F(0) = 0\");\n            return 0;\n        }\n        if (n == 1) {\n            System.out.println(\"Cas de base F(1) = 1\");\n            return 1;\n        }\n\n        // Point d'arr\u00eat ici\n        long resultat = fibonacci(n - 1) + fibonacci(n - 2);\n        System.out.printf(\"F(%d) = %d%n\", n, resultat);\n        return resultat;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"D\u00e9but du calcul de F(4)\");\n        long resultat = fibonacci(4);\n        System.out.println(\"R\u00e9sultat final: \" + resultat);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/#exemple-plus-complexe-tours-de-hanoi","title":"Exemple plus complexe : Tours de Hano\u00ef","text":"<pre><code>public class ToursHanoi {\n    private static int compteurEtapes = 0;\n\n    public static void deplacerDisques(int n, char source, char destination, char auxiliaire) {\n        compteurEtapes++;\n\n        // Cas de base\n        if (n == 1) {\n            System.out.printf(\"\u00c9tape %d: D\u00e9placer disque 1 de %c vers %c%n\",\n                    compteurEtapes, source, destination);\n            return;\n        }\n\n        // Cas r\u00e9cursifs\n        // 1. D\u00e9placer n-1 disques de source vers auxiliaire\n        deplacerDisques(n - 1, source, auxiliaire, destination);\n\n        // 2. D\u00e9placer le dernier disque de source vers destination\n        System.out.printf(\"\u00c9tape %d: D\u00e9placer disque %d de %c vers %c%n\",\n                compteurEtapes, n, source, destination);\n\n        // 3. D\u00e9placer n-1 disques de auxiliaire vers destination\n        deplacerDisques(n - 1, auxiliaire, destination, source);\n    }\n\n    public static void main(String[] args) {\n        int nombreDisques = 3;\n        System.out.printf(\"R\u00e9solution des Tours de Hano\u00ef avec %d disques:%n\", nombreDisques);\n        deplacerDisques(nombreDisques, 'A', 'C', 'B');\n        System.out.printf(\"R\u00e9solu en %d \u00e9tapes%n\", compteurEtapes);\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/#visualisation-de-la-pile-dappels","title":"Visualisation de la pile d\u2019appels","text":"<p>Dans IntelliJ, vous pouvez voir la pile d\u2019appels de plusieurs fa\u00e7ons :</p> <ol> <li> <p>Vue Frames (Cadres)    <pre><code>// Placez un point d'arr\u00eat ici\nif(n ==1){\n    System.out.printf(\"D\u00e9placer disque 1 de %c vers %c%n\",source, destination);\n    return;\n}\n</code></pre></p> </li> <li> <p>Vue Variables</p> <ul> <li>Montre les valeurs des param\u00e8tres \u00e0 chaque niveau</li> <li>Permet de voir comment les variables changent</li> </ul> </li> <li> <p>Vue Debugger</p> <ul> <li>Affiche la pile compl\u00e8te des appels</li> <li>Montre la progression de la r\u00e9cursion</li> </ul> </li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/2.%20M%C3%A9thodes/09-Recursivite/#conseils-pour-le-debogage-recursif","title":"Conseils pour le d\u00e9bogage r\u00e9cursif","text":"<ol> <li> <p>Points d\u2019arr\u00eat conditionnels <pre><code>// Dans IntelliJ, clic droit sur le point d'arr\u00eat\n// Condition: n == 2 (par exemple)\nif(n ==1){\n    return;\n}\n</code></pre></p> </li> <li> <p>Logging des appels <pre><code>public static long fibonacci(int n, int niveau) {\n    String indentation = \"  \".repeat(niveau);\n    System.out.println(indentation + \"Entr\u00e9e: F(\" + n + \")\");\n\n    if (n &lt;= 1) {\n        System.out.println(indentation + \"Retour cas de base: \" + n);\n        return n;\n    }\n\n    long resultat = fibonacci(n - 1, niveau + 1) +\n            fibonacci(n - 2, niveau + 1);\n\n    System.out.println(indentation + \"Retour F(\" + n + \") = \" + resultat);\n    return resultat;\n}\n</code></pre></p> </li> <li> <p>Utilisation de la vue \u201cEvaluate Expression\u201d</p> </li> </ol> <ul> <li>Permet d\u2019\u00e9valuer des expressions pendant le d\u00e9bogage</li> <li>Utile pour v\u00e9rifier des valeurs interm\u00e9diaires</li> </ul> <p>La r\u00e9cursivit\u00e9 peut \u00eatre difficile \u00e0 visualiser mentalement, mais le d\u00e9bogueur d\u2019IntelliJ offre des outils puissants pour comprendre comment les appels s\u2019empilent et se r\u00e9solvent.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/","title":"\ud83d\udd3810\ud83d\udd38Tableaux","text":""},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/#tableaux-de-types-primitifs","title":"Tableaux de types primitifs","text":"<pre><code>public class ExemplesTableauxPrimitifs {\n    public static void main(String[] args) {\n        // D\u00e9claration et initialisation\n        int[] nombres = new int[5];        // Tableau de 5 z\u00e9ros\n        int[] valeurs = {1, 2, 3, 4, 5};   // Initialisation directe\n\n        // Acc\u00e8s et modification\n        nombres[0] = 10;\n        System.out.println(\"Premier nombre: \" + nombres[0]);\n\n        // Parcours avec for classique\n        for (int i = 0; i &lt; valeurs.length; i++) {\n            System.out.println(\"Index \" + i + \": \" + valeurs[i]);\n        }\n\n        // Parcours avec for-each\n        for (int valeur : valeurs) {\n            System.out.println(\"Valeur: \" + valeur);\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/#tableaux-de-types-references","title":"Tableaux de types r\u00e9f\u00e9rences","text":"<pre><code>public class ExemplesTableauxReferences {\n    public static void main(String[] args) {\n        // D\u00e9claration et initialisation\n        String[] noms = new String[3];         // Tableau de 3 null\n        String[] fruits = {\"pomme\", \"banane\", \"orange\"};\n\n        // Acc\u00e8s et modification\n        noms[0] = \"Alice\";\n        noms[1] = \"Bob\";\n        noms[2] = \"Charlie\";\n\n        // Parcours et manipulation\n        for (String nom : noms) {\n            if (nom != null) {\n                System.out.println(nom.toUpperCase());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/#organisation-en-memoire","title":"Organisation en m\u00e9moire","text":"<p>Variables simples :</p> Type Stockage Taille int Stack 4 bytes fixes String Stack (r\u00e9f\u00e9rence) + Heap (contenu) 4/8 bytes pour la r\u00e9f\u00e9rence + taille variable pour le contenu <pre><code>public class ExempleMemoire {\n    public static void main(String[] args) {\n        // Sur la pile (stack)\n        int nombre = 42;          // 4 bytes directement sur la pile\n\n        // R\u00e9f\u00e9rence sur la pile, objet sur le tas (heap)\n        String texte = \"Bonjour\"; // 4/8 bytes (r\u00e9f\u00e9rence) + taille du contenu\n    }\n}\n</code></pre> <p>Tableaux :</p> <pre><code>public class ExempleTableauxMemoire {\n    public static void main(String[] args) {\n        // Tableau de int\n        int[] nombres = new int[5];\n\n        // Tableau de String\n        String[] textes = new String[5];\n\n        // Remplissage\n        nombres[0] = 42;\n        textes[0] = \"Bonjour\";\n    }\n}\n</code></pre> <p>Organisation en m\u00e9moire pour <code>nombres</code> :</p> <pre><code>Stack:\nnombres -&gt; [r\u00e9f\u00e9rence vers le tableau]\n\nHeap:\n[42][0][0][0][0]  // Les valeurs sont stock\u00e9es directement\n</code></pre> <p>Organisation en m\u00e9moire pour <code>textes</code> :</p> <pre><code>Stack:\ntextes -&gt; [r\u00e9f\u00e9rence vers le tableau]\n\nHeap:\n[ref1][null][null][null][null]  // Tableau de r\u00e9f\u00e9rences\n    |\n    v\n\"Bonjour\"  // Objet String stock\u00e9 s\u00e9par\u00e9ment\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/#exemple-detaille-avec-manipulation","title":"Exemple d\u00e9taill\u00e9 avec manipulation","text":"<pre><code>public class DemoMemoire {\n    public static void main(String[] args) {\n        // Tableau de int\n        int[] nombres = new int[3];\n        nombres[0] = 10;\n        nombres[1] = 20;\n        nombres[2] = 30;\n\n        // Tableau de String\n        String[] mots = new String[3];\n        mots[0] = \"Java\";\n        mots[1] = \"Python\";\n        mots[2] = \"C++\";\n\n        // Modification d'une valeur\n        nombres[0] = 15;          // Modifie directement la valeur\n        mots[0] = \"JavaScript\";   // Cr\u00e9e une nouvelle cha\u00eene, met \u00e0 jour la r\u00e9f\u00e9rence\n\n        // Copie de tableaux\n        int[] copieNombres = nombres.clone();      // Copie superficielle suffisante\n        String[] copieMots = mots.clone();         // Copie superficielle (r\u00e9f\u00e9rences)\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/10-Tableaux/#points-cles-a-retenir","title":"Points cl\u00e9s \u00e0 retenir","text":"<ol> <li> <p>Tableaux de types primitifs :</p> <ul> <li>Stockent directement les valeurs</li> <li>Taille fixe en m\u00e9moire</li> <li>Acc\u00e8s direct aux valeurs</li> <li>Copie = duplication des valeurs</li> </ul> </li> <li> <p>Tableaux de types r\u00e9f\u00e9rences :</p> <ul> <li>Stockent des r\u00e9f\u00e9rences vers des objets</li> <li>Double indirection pour acc\u00e9der aux valeurs</li> <li>Les objets r\u00e9f\u00e9renc\u00e9s peuvent \u00eatre de taille variable</li> <li>Copie superficielle = duplication des r\u00e9f\u00e9rences seulement</li> </ul> </li> <li> <p>Impact sur les performances :    <pre><code>public class PerformanceExample {\n    public static void main(String[] args) {\n        int[] nombres = new int[1000000];          // Allocation contigu\u00eb\n        String[] textes = new String[1000000];     // Tableau de r\u00e9f\u00e9rences\n\n        // Plus efficace : acc\u00e8s direct\n        for (int i = 0; i &lt; nombres.length; i++) {\n            nombres[i] = i;\n        }\n\n        // Moins efficace : cr\u00e9ation d'objets + gestion des r\u00e9f\u00e9rences\n        for (int i = 0; i &lt; textes.length; i++) {\n            textes[i] = String.valueOf(i);\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>Implications pour le garbage collector :    <pre><code>public class GCExample {\n    public static void main(String[] args) {\n        int[] nombres = new int[100];      // Un seul objet \u00e0 g\u00e9rer\n        String[] textes = new String[100];  // Jusqu'\u00e0 101 objets \u00e0 g\u00e9rer\n\n        // Remplacement d'une valeur\n        nombres[0] = 42;                    // Pas d'impact sur le GC\n        textes[0] = \"Nouveau\";             // Ancien String peut \u00eatre collect\u00e9\n    }\n}\n</code></pre></p> </li> </ol> <p>La compr\u00e9hension de ces diff\u00e9rences est cruciale pour :</p> <ul> <li>L\u2019optimisation des performances</li> <li>La gestion efficace de la m\u00e9moire</li> <li>Le choix des structures de donn\u00e9es appropri\u00e9es</li> <li>La pr\u00e9vention des fuites de m\u00e9moire</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/","title":"\ud83d\udd3811\ud83d\udd38ArrayList","text":""},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#arraylist-en-java","title":"ArrayList en Java","text":"<p>Une <code>ArrayList</code> est une impl\u00e9mentation redimensionnable des tableaux qui fait partie du framework <code>Collections</code>.</p> <pre><code>import java.util.ArrayList;\n\npublic class ExempleListes {\n    public static void main(String[] args) {\n        // Cr\u00e9ation d'une ArrayList typ\u00e9e\n        ArrayList&lt;String&gt; noms = new ArrayList&lt;&gt;();\n\n        // Ajout d'\u00e9l\u00e9ments\n        noms.add(\"Alice\");\n        noms.add(\"Bob\");\n        noms.add(\"Charlie\");\n\n        // Ajout \u00e0 un index sp\u00e9cifique\n        noms.add(1, \"David\");    // Ins\u00e8re \u00e0 l'index 1\n\n        // Modification d'un \u00e9l\u00e9ment\n        noms.set(0, \"Alicia\");   // Remplace \"Alice\" par \"Alicia\"\n\n        // Suppression d'\u00e9l\u00e9ments\n        noms.remove(\"Bob\");      // Par valeur\n        noms.remove(0);          // Par index\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#comparaison-avec-les-tableaux","title":"Comparaison avec les tableaux","text":"Caract\u00e9ristique Tableau ArrayList Taille Fixe Dynamique Performance Plus rapide Plus lent Syntaxe nombres nombres.get(0) Types support\u00e9s Primitifs et objets Objets uniquement M\u00e9moire Plus efficace Overhead suppl\u00e9mentaire"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#avantages-des-tableaux","title":"Avantages des tableaux","text":"<ol> <li>Performance optimale pour les op\u00e9rations de lecture/\u00e9criture</li> <li>Syntaxe plus simple et directe</li> <li>Peuvent contenir des types primitifs</li> <li>Moins de consommation m\u00e9moire</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#avantages-des-arraylist","title":"Avantages des ArrayList","text":"<ol> <li>Taille dynamique</li> <li>M\u00e9thodes utilitaires int\u00e9gr\u00e9es (add, remove, contains, etc.)</li> <li>Facilit\u00e9 de manipulation des \u00e9l\u00e9ments</li> <li>Conversion facile vers/depuis les tableaux</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#exemple-pratique","title":"Exemple pratique","text":"<pre><code>public class ComparaisonStructures {\n    public static void main(String[] args) {\n        // Tableau\n        int[] tableauNombres = new int[3];\n        tableauNombres[0] = 1;\n        tableauNombres[1] = 2;\n        tableauNombres[2] = 3;\n\n        // ArrayList\n        ArrayList&lt;Integer&gt; listeNombres = new ArrayList&lt;&gt;();\n        listeNombres.add(1);\n        listeNombres.add(2);\n        listeNombres.add(3);\n\n        // Conversion ArrayList vers tableau\n        Integer[] tableauDepuisListe = listeNombres.toArray(new Integer[0]);\n\n        // Conversion tableau vers ArrayList\n        ArrayList&lt;Integer&gt; listeDepuisTableau =\n                new ArrayList&lt;&gt;(Arrays.asList(tableauDepuisListe));\n\n        // Parcours avec for-each (fonctionne pour les deux)\n        for (int nombre : tableauNombres) {\n            System.out.println(nombre);\n        }\n\n        for (Integer nombre : listeNombres) {\n            System.out.println(nombre);\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#cas-dutilisation-recommandes","title":"Cas d\u2019utilisation recommand\u00e9s","text":"<p>Utiliser un tableau quand :</p> <ul> <li>La taille est fixe et connue</li> <li>Les performances sont critiques</li> <li>On travaille avec des types primitifs</li> <li>On fait beaucoup d\u2019acc\u00e8s al\u00e9atoires</li> </ul> <p>Utiliser une ArrayList quand :</p> <ul> <li>La taille est variable</li> <li>On a besoin d\u2019ajouter/supprimer fr\u00e9quemment</li> <li>On veut des m\u00e9thodes utilitaires int\u00e9gr\u00e9es</li> <li>La flexibilit\u00e9 est plus importante que la performance</li> </ul> Citations <ul> <li>[1] https://beginnersbook.com/2013/12/java-arraylist/</li> <li>[2] https://www.programiz.com/java-programming/arraylist</li> <li>[3] https://www.geeksforgeeks.org/arraylist-in-java/</li> <li>[4] https://www.w3schools.com/java/java_arraylist.asp</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#convertir-un-arraylist-en-tableau","title":"Convertir un <code>ArrayList</code> en tableau","text":"<p>Voici un exemple simple de programme Java qui utilise la m\u00e9thode <code>toArray()</code> sur un <code>ArrayList</code> pour convertir vers un tableau :</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class ExempleToArray {\n    public static void main(String[] args) {\n        // Cr\u00e9ation d'un ArrayList\n        ArrayList&lt;String&gt; listeNoms = new ArrayList&lt;&gt;();\n\n        // Ajout d'\u00e9l\u00e9ments\n        listeNoms.add(\"Jean\");\n        listeNoms.add(\"Marie\");\n        listeNoms.add(\"Pierre\");\n        listeNoms.add(\"Colette\");\n\n        // Utilisation de toArray() pour obtenir un tableau\n        Object[] tableauObjets = listeNoms.toArray();\n\n        // Affichage du tableau\n        System.out.println(\"Tableau obtenu via toArray():\");\n        System.out.println(Arrays.toString(tableauObjets));\n\n        // Type casting pour obtenir un tableau de String\n        String[] tableauStrings = listeNoms.toArray(new String[listeNoms.size()]);\n\n        System.out.println(\"\\nTableau de String apr\u00e8s type casting:\");\n        System.out.println(Arrays.toString(tableauStrings));\n    }\n}\n</code></pre> <p>Ce programme cr\u00e9e un <code>ArrayList</code> de noms, ajoute quelques \u00e9l\u00e9ments, puis utilise <code>toArray()</code> pour obtenir un tableau d\u2019objets. Il montre ensuite comment effectuer un type casting pour obtenir un tableau de <code>String</code>.</p>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#possibilite-de-creer-un-arraylist-a-partir-dun-tableau","title":"Possibilit\u00e9 de cr\u00e9er un ArrayList \u00e0 partir d\u2019un tableau","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class CreationArrayListFromArray {\n    public static void main(String[] args) {\n        // Tableau initial\n        String[] tabInitial = {\"A\", \"B\", \"C\", \"D\"};\n\n        // Cr\u00e9ation d'un ArrayList \u00e0 partir du tableau\n        ArrayList&lt;String&gt; liste = new ArrayList&lt;&gt;(Arrays.asList(tabInitial));\n\n        // Affichage\n        System.out.println(\"ArrayList cr\u00e9\u00e9e \u00e0 partir du tableau :\");\n        System.out.println(liste);\n    }\n}\n</code></pre> <p>Dans cet exemple, nous utilisons <code>Arrays.asList()</code> pour cr\u00e9er une liste \u00e0 partir du tableau, puis passons cette liste au constructeur d\u2019<code>ArrayList</code>. Cela cr\u00e9e un nouveau <code>ArrayList</code> contenant tous les \u00e9l\u00e9ments du tableau original.</p>"},{"location":"A.%20Les%20bases%20en%20Java/3.%20Tableaux/11-ArrayList/#points-cles-a-retenir","title":"Points cl\u00e9s \u00e0 retenir","text":"<ol> <li>La m\u00e9thode <code>toArray()</code> retourne un tableau d\u2019objets (<code>Object[]</code>) par d\u00e9faut.</li> <li>Pour obtenir un tableau de type sp\u00e9cifique, il faut utiliser la signature <code>toArray(T[] a)</code> et passer un tableau vide    du bon type.</li> <li>On peut cr\u00e9er un <code>ArrayList</code> \u00e0 partir d\u2019un tableau en utilisant <code>Arrays.asList()</code> et en passant le r\u00e9sultat au    constructeur d\u2019<code>ArrayList</code>.</li> <li>Cette approche permet de convertir facilement entre <code>ArrayList</code> et tableau standard.</li> </ol> <p>En suivant ces m\u00e9thodes, vous pouvez facilement convertir entre <code>ArrayList</code> et tableau dans Java, ce qui offre une grande flexibilit\u00e9 dans vos programmes.</p> Citations <ul> <li>[1] https://www.geeksforgeeks.org/arraylist-array-conversion-java-toarray-methods/</li> <li>[2] https://stackoverflow.com/questions/32677003/how-to-convert-arraylist-to-array</li> <li>[3] https://www.geeksforgeeks.org/arraylist-toarray-method-in-java-with-examples/</li> <li>[4] https://www.codecademy.com/resources/docs/java/array-list/toArray    </li> <li>[5] https://www.w3schools.com/java/ref_arraylist_toarray.asp</li> <li>[6] https://docs.vultr.com/java/standard-library/java/util/ArrayList/toArray</li> <li>[7] https://www.javatpoint.com/how-to-convert-arraylist-to-array-and-array-to-arraylist-in-java</li> <li>[8] https://stackoverflow.com/questions/5061640/make-arraylist-toarray-return-more-specific-types/64137104</li> <li>[9] https://howtodoinjava.com/java/collections/arraylist/convert-arraylist-to-array/</li> <li>[10] https://forums.oracle.com/ords/apexds/post/convert-arraylist-into-array-7537</li> </ul> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/","title":"\ud83d\udd3812\ud83d\udd38Gestion des fichiers texte","text":""},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#try-with-resources-vs-try-classique","title":"try-with-resources vs. try classique","text":"<p>La diff\u00e9rence est fondamentale et concerne la gestion des ressources. Comparons les deux approches :</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#try-with-resources-avec-parentheses","title":"Try-with-resources (avec parenth\u00e8ses)","text":"<pre><code>try (BufferedReader lecteur = new BufferedReader(new FileReader(fichier));\n     PrintWriter ecrivain = new PrintWriter(destination)) {\n    // Code utilisant lecteur et ecrivain\n} catch (IOException e) {\n    // Gestion des erreurs\n}\n</code></pre> <p>Avantages</p> <ul> <li>Fermeture automatique des ressources, m\u00eame en cas d\u2019exception</li> <li>Les ressources sont ferm\u00e9es dans l\u2019ordre inverse de leur cr\u00e9ation</li> <li>Plus concis et plus s\u00fbr</li> <li>Impossible d\u2019oublier de fermer une ressource</li> <li>Les ressources sont ferm\u00e9es m\u00eame si on quitte la m\u00e9thode avec un <code>return</code></li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#try-classique","title":"Try classique","text":"<pre><code>BufferedReader lecteur = null;\nPrintWriter ecrivain = null;\ntry {\n    lecteur = new BufferedReader(new FileReader(fichier));\n    ecrivain = new PrintWriter(destination);\n    // Code utilisant lecteur et ecrivain\n} catch (IOException e) {\n    // Gestion des erreurs\n} finally {\n    try {\n        if (lecteur != null) lecteur.close();\n        if (ecrivain != null) ecrivain.close();\n    } catch (IOException e) {\n        // Nouvelle exception pendant la fermeture\n    }\n}\n</code></pre> <p>Inconv\u00e9nients</p> <ul> <li>Code plus verbeux</li> <li>Risque d\u2019oublier de fermer une ressource</li> <li>N\u00e9cessite un bloc <code>finally</code> explicite</li> <li>Doit g\u00e9rer les exceptions lors de la fermeture</li> <li>Risque de masquer l\u2019exception originale si une exception survient pendant la fermeture</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#important-a-noter","title":"Important \u00e0 noter","text":"<p>Le try-with-resources (introduit en Java 7) :</p> <ul> <li>Ne fonctionne qu\u2019avec les classes qui impl\u00e9mentent l\u2019interface <code>AutoCloseable</code></li> <li>Est consid\u00e9r\u00e9 comme la meilleure pratique pour la gestion des ressources</li> <li>R\u00e9duit consid\u00e9rablement les risques de fuites de ressources</li> <li>Produit un code plus maintenable et plus s\u00fbr</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#lecture-dun-fichier-texte","title":"Lecture d\u2019un fichier texte","text":"<p>La lecture d\u2019un fichier texte en Java peut \u00eatre r\u00e9alis\u00e9e de plusieurs mani\u00e8res. Voici un exemple simple utilisant <code>BufferedReader</code> qui permet de lire le fichier ligne par ligne.</p> <pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class LectureFichier {\n    public static void main(String[] args) {\n        // Le chemin vers notre fichier, relativement au dossier du projet ou au dossier courant\n        String cheminFichier = \"fichiers/exemple1.txt\";\n        int nombreLignesNonVides = 0;\n\n        // Utilisation de try-with-resources pour fermer automatiquement les ressources\n        try (BufferedReader lecteur = new BufferedReader(new FileReader(cheminFichier))) {\n            String ligne;\n\n            // Lecture du fichier ligne par ligne\n            while ((ligne = lecteur.readLine()) != null) {\n                // On utilise trim() pour enlever les espaces au d\u00e9but et \u00e0 la fin\n                if (!ligne.trim().isEmpty()) {\n                    nombreLignesNonVides++;\n                }\n            }\n\n            System.out.println(\"Nombre de lignes non vides : \" + nombreLignesNonVides);\n\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier : \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#explications-du-code","title":"Explications du code","text":"<p>Importation des classes n\u00e9cessaires</p> <ul> <li><code>BufferedReader</code> : classe qui permet de lire efficacement le texte ligne par ligne</li> <li><code>FileReader</code> : classe de base pour lire des fichiers texte</li> <li><code>IOException</code> : exception qui peut survenir lors des op\u00e9rations de lecture</li> </ul> <p>Points importants \u00e0 noter</p> <ol> <li> <p>L\u2019utilisation du bloc <code>try-with-resources</code> (avec les parenth\u00e8ses apr\u00e8s le try) permet de fermer automatiquement le    fichier apr\u00e8s utilisation.</p> </li> <li> <p>La m\u00e9thode <code>readLine()</code> retourne :</p> <ul> <li>Une ligne de texte quand il y a du contenu \u00e0 lire</li> <li><code>null</code> quand on arrive \u00e0 la fin du fichier</li> </ul> </li> <li> <p>La m\u00e9thode <code>trim()</code> enl\u00e8ve les espaces au d\u00e9but et \u00e0 la fin de la cha\u00eene de caract\u00e8res. Une ligne qui ne contient que    des espaces sera consid\u00e9r\u00e9e comme vide apr\u00e8s le <code>trim()</code>.</p> </li> <li> <p>La gestion des exceptions est importante, car plusieurs erreurs peuvent survenir :</p> <ul> <li>Le fichier n\u2019existe pas</li> <li>Le fichier n\u2019est pas accessible en lecture</li> <li>Une erreur survient pendant la lecture.</li> </ul> </li> </ol> <p>Ce code repr\u00e9sente la fa\u00e7on moderne et recommand\u00e9e de lire un fichier en Java, car il :</p> <ul> <li>G\u00e8re correctement la fermeture des ressources</li> <li>Utilise une lecture efficace ligne par ligne</li> <li>G\u00e8re les exceptions de mani\u00e8re appropri\u00e9e</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#copier-le-contenu-dun-fichier","title":"Copier le contenu d\u2019un fichier","text":"<p>Voici un exemple qui utilise <code>BufferedReader</code> pour lire un fichier et <code>PrintWriter</code> pour \u00e9crire dans un nouveau fichier avec des num\u00e9ros de ligne :</p> <pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.IOException;\n\npublic class AjoutNumeroLignes {\n    public static void main(String[] args) {\n        String fichierSource = \"source.txt\";\n        String fichierDestination = \"destination.txt\";\n        int numeroLigne = 1;\n\n        try (BufferedReader lecteur = new BufferedReader(new FileReader(fichierSource));\n             PrintWriter ecrivain = new PrintWriter(fichierDestination)) {\n\n            String ligne;\n            while ((ligne = lecteur.readLine()) != null) {\n                // Format du num\u00e9ro de ligne sur 3 caract\u00e8res avec des z\u00e9ros devant\n                String numero = String.format(\"%03d\", numeroLigne);\n                ecrivain.println(numero + \" | \" + ligne);\n                numeroLigne++;\n            }\n\n            System.out.println(\"Fichier trait\u00e9 avec succ\u00e8s\");\n\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors du traitement des fichiers : \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#explications-du-code_1","title":"Explications du code","text":"<p>\u00c9l\u00e9ments principaux</p> <ul> <li><code>BufferedReader</code> est utilis\u00e9 pour la lecture efficace du fichier source</li> <li><code>PrintWriter</code> permet d\u2019\u00e9crire facilement dans le fichier de destination</li> <li><code>String.format()</code> formate le num\u00e9ro de ligne sur 3 caract\u00e8res</li> </ul> <p>Particularit\u00e9s</p> <ul> <li>Les num\u00e9ros de ligne sont format\u00e9s avec des z\u00e9ros devant (001, 002, etc.)</li> <li>Un s\u00e9parateur \u201d | \u201d est ajout\u00e9 entre le num\u00e9ro et le contenu de la ligne</li> <li>Le <code>try-with-resources</code> ferme automatiquement les deux fichiers</li> <li>Si le fichier source contient \u201cBonjour\u201d et \u201cMonde\u201d, le fichier destination contiendra :   <pre><code>001 | Bonjour\n002 | Monde\n</code></pre></li> </ul> <p>Cette approche est efficace, car elle :</p> <ul> <li>Lit et \u00e9crit les fichiers ligne par ligne</li> <li>G\u00e8re correctement les ressources</li> <li>Ajoute un formatage clair et lisible aux num\u00e9ros de ligne.</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/12-fichiers-texte/#citations","title":"Citations","text":"<ul> <li>[1] https://www.digitalocean.com/community/tutorials/java-read-file-line-by-line</li> <li>[2] https://howtodoinjava.com/java/io/linenumber-reader-example/</li> <li>[3] https://stackoverflow.com/questions/23023472/how-to-add-line-numbers-to-a-text-file</li> <li>[4] https://www.geeksforgeeks.org/java-program-to-read-content-from-one-file-and-write-it-into-another-file/</li> <li>[5] https://www.reddit.com/r/golang/comments/jmc6ow/append_line_numbers_to_a_text_file/</li> <li>[6] https://www.youtube.com/watch?v=IodQ6yhBbbU</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/","title":"\ud83d\udd3813\ud83d\udd38Gestion des fichiers JSON","text":""},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#exemple-simple","title":"Exemple simple","text":"<p>Voici un exemple de programme qui lit un fichier JSON et place son contenu dans une <code>Map</code> en utilisant la biblioth\u00e8que JSON-simple :</p> <pre><code>import java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class LectureJson {\n    public static void main(String[] args) {\n        String fichierJson = \"fichiers/exemple2.json\";\n        Map&lt;String, String&gt; donnees = new HashMap&lt;&gt;();\n\n        try {\n            // Cr\u00e9ation du parser JSON\n            JSONParser parser = new JSONParser();\n\n            // Lecture et parsing du fichier JSON\n            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader(fichierJson));\n\n            // Conversion du JSONObject en Map\n            for (Object key : jsonObject.keySet()) {\n                String cleStr = (String) key;\n                String valeurStr = (String) jsonObject.get(key);\n                donnees.put(cleStr, valeurStr);\n            }\n\n            // Affichage du contenu de la Map\n            for (Map.Entry&lt;String, String&gt; entry : donnees.entrySet()) {\n                System.out.println(entry.getKey() + \" : \" + entry.getValue());\n            }\n\n        } catch (IOException | ParseException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier JSON : \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#structure-du-fichier-json-attendu","title":"Structure du fichier JSON attendu","text":"<p>Le programme attend un fichier JSON simple avec des paires cl\u00e9-valeur, par exemple :</p> <pre><code>{\n  \"name\": \"Alex\",\n  \"age\": \"25\",\n  \"address\": \"Paris\"\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#points-importants","title":"Points importants","text":"<p>D\u00e9pendance requise</p> <ul> <li>Il faut ajouter la biblioth\u00e8que <code>json-simple</code> au projet[1]</li> </ul> <p>Gestion des types</p> <ul> <li>Cet exemple suppose que toutes les valeurs sont des cha\u00eenes de caract\u00e8res</li> <li>Pour g\u00e9rer d\u2019autres types, il faudrait adapter la conversion des valeurs</li> </ul> <p>Traitement des erreurs</p> <ul> <li>Le programme g\u00e8re les deux types d\u2019exceptions principales :<ul> <li><code>IOException</code> pour les erreurs de lecture</li> <li><code>ParseException</code> pour les erreurs de format JSON</li> </ul> </li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#citations","title":"Citations","text":"<ul> <li>[1] https://waytolearnx.com/2020/03/lire-un-fichier-json-avec-java.html</li> <li>[2] https://stackoverflow.com/questions/443499/convert-json-to-map</li> <li>[3] https://www.twilio.com/fr-fr/blog/trois-facons-utiliser-jackson-json-java</li> <li>[4] https://www.journaldunet.fr/developpeur/developpement/1203033-comment-parser-un-json-en-java/</li> <li>[5] https://jmdoudoux.developpez.com/cours/developpons/java/chap-json-p.php</li> <li>[6] https://javarush.com/fr/groups/posts/fr.3970.pause-caf-175-comment-lire-un-fichier-json-en-java\u2013quest-ce-que-le-kit-de-dveloppement-jav</li> <li>[7] https://openclassrooms.com/forum/sujet/lire-dans-un-fichier-json-1</li> <li>[8] https://developers.google.com/maps/documentation/javascript/importing_data?hl=fr</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#exemple-avec-comgooglegsongson","title":"Exemple avec <code>com.google.gson.Gson</code>","text":"<p>Voici les classes <code>Personne</code> et <code>JsonUtils</code> :</p> Code <code>Personne</code> <pre><code>public class Personne {\n    private String nom;\n    private int age;\n\n    public Personne(String nom, int age) {\n        this.nom = nom;\n        this.age = age;\n    }\n\n    // Getters et setters optionnels avec Gson\n    public String getNom() {\n        return nom;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Personne{nom='\" + nom + \"', age=\" + age + \"}\";\n    }\n}\n</code></pre> Code <code>JsonUtils</code> <pre><code>import com.google.gson.Gson;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class JsonUtils {\n    // Fonction de s\u00e9rialisation\n    public static void sauvegarderEnJson(Personne personne, String cheminFichier) throws IOException {\n        Gson gson = new Gson();\n        try (FileWriter writer = new FileWriter(cheminFichier)) {\n            gson.toJson(personne, writer);\n        }\n    }\n\n    // Fonction de d\u00e9s\u00e9rialisation\n    public static Personne chargerDeJson(String cheminFichier) throws IOException {\n        Gson gson = new Gson();\n        try (FileReader reader = new FileReader(cheminFichier)) {\n            return gson.fromJson(reader, Personne.class);\n        }\n    }\n\n    // Exemple d'utilisation\n    public static void main(String[] args) {\n        try {\n            // S\u00e9rialisation\n            Personne p1 = new Personne(\"Alice\", 30);\n            sauvegarderEnJson(p1, \"fichiers/personne.json\");\n\n            // D\u00e9s\u00e9rialisation\n            Personne p2 = chargerDeJson(\"fichiers/personne.json\");\n            System.out.println(p2.getNom() + \", \" + p2.getAge());\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>Le code de la classe utilitaire nomm\u00e9e <code>JsonUtils</code> est con\u00e7ue pour faciliter la s\u00e9rialisation et la d\u00e9s\u00e9rialisation d\u2019objets Java vers et depuis le format JSON en utilisant la biblioth\u00e8que Gson. Ceci est couramment utilis\u00e9 pour la persistance des donn\u00e9es ou l\u2019\u00e9change avec d\u2019autres syst\u00e8mes.</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#composants-cles","title":"Composants cl\u00e9s","text":"<ol> <li> <p>D\u00e9pendances :</p> <ul> <li><code>com.google.gson.Gson</code>: la biblioth\u00e8que principale g\u00e9rant la conversion JSON.</li> <li><code>java.io.*</code>: Fournit des classes pour les op\u00e9rations d\u2019entr\u00e9e/sortie de fichiers.</li> </ul> </li> <li> <p>Classe <code>JsonUtils</code> :    Cette classe contient deux m\u00e9thodes principales : <code>sauvegarderEnJson</code> et <code>chargerDeJson</code>.</p> </li> <li> <p><code>sauvegarderEnJson</code> (S\u00e9rialisation) :</p> <ul> <li><code>public static void sauvegarderEnJson(Personne personne, String cheminFichier)</code>: Cette m\u00e9thode prend un objet   <code>Personne</code> et un chemin de fichier en entr\u00e9e. Le modificateur <code>public static</code> permet un acc\u00e8s direct sans   instanciation de classe. Le type de retour <code>void</code> indique qu\u2019aucune valeur n\u2019est renvoy\u00e9e.</li> <li><code>Gson gson = new Gson();</code>: Instancie un objet <code>Gson</code>.</li> <li><code>try (FileWriter writer = new FileWriter(cheminFichier))</code>: Cr\u00e9e un <code>FileWriter</code> pour \u00e9crire dans le fichier   sp\u00e9cifi\u00e9 dans un bloc try-with-resources pour la gestion automatique des ressources.</li> <li><code>gson.toJson(personne, writer);</code>: S\u00e9rialise l\u2019objet <code>Personne</code> en JSON et l\u2019\u00e9crit dans le fichier via le <code>writer</code>.</li> </ul> </li> <li> <p><code>chargerDeJson</code> (D\u00e9s\u00e9rialisation) :</p> <ul> <li><code>public static Personne chargerDeJson(String cheminFichier)</code>: Cette m\u00e9thode prend un chemin de fichier et renvoie   un objet <code>Personne</code> d\u00e9s\u00e9rialis\u00e9.</li> <li><code>Gson gson = new Gson();</code>: Instancie un objet <code>Gson</code>.</li> <li><code>try (FileReader reader = new FileReader(cheminFichier))</code>: Cr\u00e9e un <code>FileReader</code> pour lire le fichier JSON.</li> <li><code>return gson.fromJson(reader, Personne.class);</code>: D\u00e9s\u00e9rialise le JSON du fichier en un objet <code>Personne</code> et le   renvoie.</li> </ul> </li> <li> <p>M\u00e9thode <code>main</code> (Exemple d\u2019utilisation) :    La m\u00e9thode <code>main</code> illustre l\u2019utilisation de base : cr\u00e9er un objet <code>Personne</code>, le s\u00e9rialiser en JSON, puis le    d\u00e9s\u00e9rialiser \u00e0 partir du fichier.  <code>System.out.println</code> confirme le processus en affichant le nom et l\u2019\u00e2ge.</p> </li> </ol> <p>En r\u00e9sum\u00e9, <code>JsonUtils</code> fournit une interface simple pour la conversion entre les objets Java et JSON \u00e0 l\u2019aide de la biblioth\u00e8que Gson. La classe <code>Personne</code>, bien que non affich\u00e9e, contient vraisemblablement des attributs tels que <code>nom</code> et <code>\u00e2ge</code>. La fonctionnalit\u00e9 principale s\u2019articule autour de l\u2019utilisation de Gson pour la s\u00e9rialisation (<code>toJson</code>) et la d\u00e9s\u00e9rialisation (<code>fromJson</code>).</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#resultat-dans-personnejson","title":"R\u00e9sultat dans <code>personne.json</code>","text":"<pre><code>{\"nom\":\"Alice\",\"age\":30}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#resultat-reformatte","title":"R\u00e9sultat reformatt\u00e9","text":"<pre><code>{\n  \"nom\": \"Alice\",\n  \"age\": 30\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#exemple-avec-comgooglegsongson-et-une-arraylist","title":"Exemple avec <code>com.google.gson.Gson</code> et une <code>ArrayList</code>","text":"Code <pre><code>import com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JsonUtilsList {\n    // Fonction de s\u00e9rialisation de la liste\n    public static void sauvegarderListeEnJson(List&lt;Personne&gt; personnes, String cheminFichier) throws IOException {\n        Gson gson = new Gson();\n        try (FileWriter writer = new FileWriter(cheminFichier)) {\n            gson.toJson(personnes, writer);\n        }\n    }\n\n    // Fonction de d\u00e9s\u00e9rialisation de la liste\n    public static List&lt;Personne&gt; chargerListeDeJson(String cheminFichier) throws IOException {\n        Gson gson = new Gson();\n        try (FileReader reader = new FileReader(cheminFichier)) {\n            // Cr\u00e9ation d'un Type pour ArrayList&lt;Personne&gt;\n            Type typeListePersonnes = new TypeToken&lt;ArrayList&lt;Personne&gt;&gt;(){}.getType();\n            return gson.fromJson(reader, typeListePersonnes);\n        }\n    }\n\n    // Exemple d'utilisation\n    public static void main(String[] args) {\n        try {\n            // Cr\u00e9ation d'une liste de personnes\n            ArrayList&lt;Personne&gt; personnes = new ArrayList&lt;&gt;();\n            personnes.add(new Personne(\"Alice\", 30));\n            personnes.add(new Personne(\"Bob\", 25));\n            personnes.add(new Personne(\"Charlie\", 35));\n\n            // S\u00e9rialisation\n            sauvegarderListeEnJson(personnes, \"fichiers/personnes.json\");\n\n            // D\u00e9s\u00e9rialisation\n            List&lt;Personne&gt; personnesChargees = chargerListeDeJson(\"fichiers/personnes.json\");\n\n            // Affichage des personnes charg\u00e9es\n            for (Personne p : personnesChargees) {\n                System.out.println(p);\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>Le code d\u00e9finit une classe utilitaire <code>JsonUtilsList</code> pour s\u00e9rialiser et d\u00e9s\u00e9rialiser des listes d\u2019objets <code>Personne</code> vers et depuis des fichiers JSON en utilisant la biblioth\u00e8que Gson. Voici une explication, soulignant les diff\u00e9rences avec <code>JsonUtils</code>:</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#jsonutilslist","title":"<code>JsonUtilsList</code>","text":"<ul> <li> <p><code>sauvegarderListeEnJson(List&lt;Personne&gt; personnes, String cheminFichier)</code>: Cette m\u00e9thode s\u00e9rialise une <code>List</code>   d\u2019objets <code>Personne</code> dans un fichier JSON sp\u00e9cifi\u00e9 par <code>cheminFichier</code>. Elle utilise <code>Gson.toJson()</code> pour effectuer la   s\u00e9rialisation.</p> </li> <li> <p><code>chargerListeDeJson(String cheminFichier)</code>: Cette m\u00e9thode d\u00e9s\u00e9rialise une <code>List</code> d\u2019objets <code>Personne</code> \u00e0 partir d\u2019un   fichier JSON sp\u00e9cifi\u00e9 par <code>cheminFichier</code>. Il est crucial qu\u2019elle utilise   <code>TypeToken&lt;ArrayList&lt;Personne&gt;&gt;(){}.getType()</code> pour obtenir la repr\u00e9sentation correcte du type pour la d\u00e9s\u00e9rialisation   avec Gson. Ceci est n\u00e9cessaire, car Gson doit conna\u00eetre le type sp\u00e9cifique de la <code>List</code> (dans ce cas,   <code>ArrayList&lt;Personne&gt;</code>) pour d\u00e9s\u00e9rialiser correctement.</p> </li> <li> <p>M\u00e9thode <code>main</code>: D\u00e9montre l\u2019utilisation des deux m\u00e9thodes de s\u00e9rialisation et de d\u00e9s\u00e9rialisation. Elle cr\u00e9e une   liste d\u2019objets <code>Personne</code>, les s\u00e9rialise dans \u201cfichiers/personnes.json\u201d, puis les d\u00e9s\u00e9rialise \u00e0 partir du fichier,   affichant les objets charg\u00e9s.</p> </li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#principales-differences-avec-jsonutils","title":"Principales diff\u00e9rences avec <code>JsonUtils</code>","text":"<ul> <li>Gestion des listes : <code>JsonUtilsList</code> fonctionne avec <code>List&lt;Personne&gt;</code>, tandis que <code>JsonUtils</code> fonctionne avec des   objets <code>Personne</code> individuels.</li> <li>Utilisation de TypeToken : <code>JsonUtilsList</code> utilise <code>TypeToken</code> pour d\u00e9s\u00e9rialiser correctement les listes.   <code>JsonUtils</code> n\u2019en a pas besoin, car il d\u00e9s\u00e9rialise vers une classe connue (<code>Personne.class</code>).</li> <li>Noms de fichiers : L\u2019exemple d\u2019utilisation dans <code>JsonUtilsList</code> utilise \u201cfichiers/personnes.json\u201d tandis que   <code>JsonUtils</code> utilise \u201cfichiers/personne.json\u201d. Cela refl\u00e8te la diff\u00e9rence de traitement entre les listes et les objets   individuels.</li> </ul> <p>En r\u00e9sum\u00e9, <code>JsonUtilsList</code> \u00e9tend les fonctionnalit\u00e9s de <code>JsonUtils</code> pour g\u00e9rer les collections d\u2019objets <code>Personne</code>, en utilisant le m\u00e9canisme <code>TypeToken</code> n\u00e9cessaire pour une d\u00e9s\u00e9rialisation correcte avec Gson.</p>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#resultat-dans-personnesjson","title":"R\u00e9sultat dans <code>personnes.json</code>","text":"<pre><code>[{\"nom\":\"Alice\",\"age\":30},{\"nom\":\"Bob\",\"age\":25},{\"nom\":\"Charlie\",\"age\":35}]\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/4.%20Fichiers/13-fichiers-json/#resultat-reformatte_1","title":"R\u00e9sultat reformatt\u00e9","text":"<pre><code>[\n  {\n    \"nom\": \"Alice\",\n    \"age\": 30\n  },\n  {\n    \"nom\": \"Bob\",\n    \"age\": 25\n  },\n  {\n    \"nom\": \"Charlie\",\n    \"age\": 35\n  }\n]\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/01-exercices/","title":"Exercices, partie 1","text":"<p>Pour chacune des questions suivantes, cr\u00e9ez une m\u00e9thode statique qui fait ce qui est d\u00e9crit, et testez votre m\u00e9thode dans un <code>main</code> . Vous pouvez mettre toutes les m\u00e9thodes dans la m\u00eame classe. Vous pouvez tester une m\u00e9thode \u00e0 la fois dans le <code>main</code>.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/01-exercices/#questions","title":"Questions","text":"<ol> <li>Calculer et afficher la valeur absolue d\u2019un nombre entr\u00e9 par l\u2019utilisateur.</li> <li>D\u00e9terminer si le nombre entier entr\u00e9 par l\u2019utilisateur est pair ou impair.</li> <li>Lire trois nombres et imprimer le plus petit de ces trois nombres.</li> <li>Calculer le salaire total d\u2019un employ\u00e9. On lit en entr\u00e9e les donn\u00e9es concernant son salaire horaire et le nombre    d\u2019heures travaill\u00e9es. Si l\u2019employ\u00e9 a travaill\u00e9 plus de 40 heures, les heures suppl\u00e9mentaires sont    pay\u00e9es \u00e0 1.5 fois le salaire horaire.</li> <li>Lire trois nombres positifs repr\u00e9sentant la longueur des c\u00f4t\u00e9s d\u2019un triangle. Imprimer :<ul> <li>\u201cScal\u00e8ne\u201d si les trois c\u00f4t\u00e9s sont in\u00e9gaux</li> <li>\u201cIsoc\u00e8le\u201d si deux des c\u00f4t\u00e9s sont \u00e9gaux</li> <li>\u201c\u00c9quilat\u00e9ral\u201d si les trois c\u00f4t\u00e9s sont \u00e9gaux</li> </ul> </li> <li>Un professeur vous fournit trois notes calcul\u00e9es sur 100. Calculer la moyenne et imprimer \u00e9chec si la note finale est    inf\u00e9rieure \u00e0 60/100. Dans le cas contraire, imprimer la note obtenue par l\u2019\u00e9tudiant.</li> <li>Lire en entr\u00e9e une note finale d\u2019un cours. Si la note est plus petite que 0, ou si la note est plus grande que 100,    alors afficher \u201cCette note est invalide\u201d et terminer la fonction. Si la note est valide, alors vous devez afficher    une lettre correspondant \u00e0 la note selon les conditions suivantes :<ul> <li>E : plus petite que 60</li> <li>D : de 60 \u00e0 moins que 70</li> <li>C : de 70 \u00e0 moins que 80</li> <li>B : de 80 \u00e0 moins que 90</li> <li>A : 90 ou plus</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d et demander le nombre \u00e0 nouveau. Vous   devez vous assurer que le nombre est valide avant de continuer \u00e0 la prochaine \u00e9tape. Il n\u2019y aucune limite sur   le nombre d\u2019essais incorrects.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entre 1 et 10 inclusivement.<ul> <li>Si le nombre n\u2019est pas dans cet intervalle, alors afficher \u201cinvalide\u201d et demander le nombre \u00e0 nouveau. Vous   devez vous assurer que le nombre est valide avant de continuer \u00e0 la prochaine \u00e9tape. Il y a une limite de 3 essais   incorrects.</li> <li>Si le nombre maximal d\u2019essais incorrects a \u00e9t\u00e9 atteint, alors afficher \u201cNombre maximal d\u2019essais atteint.\u201d et la   m\u00e9thode doit se terminer.</li> <li>Si le nombre est valide, alors afficher \u201cvalide\u201d.</li> </ul> </li> <li>Vous devez lire un nombre entier et l\u2019afficher \u00e0 l\u2019envers. Par exemple, l\u2019utilisateur saisit <code>123456</code> et le     programme affiche <code>654321</code>. Pour cet exercice, vous ne pouvez pas inverser une cha\u00eene de caract\u00e8res qui repr\u00e9sente     le nombre, vous devez utiliser un <code>int</code> et utiliser la division et le modulo sur ce <code>int</code>.</li> <li>Vous devez lire un nombre entier et afficher un d\u00e9compte \u00e0 partir de ce nombre jusqu\u2019\u00e0 0. Lorsque le d\u00e9compte est     termin\u00e9, afficher \u201cTermin\u00e9 !\u201d \u00e0 la place du nombre 0. Par exemple, si le nombre entr\u00e9 est 5, vous devez afficher     <pre><code>5\n4\n3\n2\n1\nTermin\u00e9 !\n</code></pre></li> <li>Pour chacune des questions suivantes, d\u00e9finissez un tableau de nombres entiers contenant environ 10 valeurs de votre     choix. La longueur exacte du tableau et les nombres qu\u2019il contient sont \u00e0     votre choix, mais ils devraient permettre de bien tester les questions. R\u00e9pondez aux questions dans des fonctions     diff\u00e9rentes. En utilisant une boucle <code>for</code> sur les index du tableau,<ol> <li>trouvez la somme et la moyenne de tous les nombres dans le tableau.</li> <li>affichez tous les nombres pairs contenus dans le tableau.</li> <li>d\u00e9terminez si tous les nombres dans le tableau sont positifs ou non. Si tous les nombres sont positifs, alors    affichez vrai, sinon affichez faux.</li> </ol> </li> <li>R\u00e9p\u00e9tez la question pr\u00e9c\u00e9dente, mais en utilisant une boucle <code>while</code> ou <code>do while</code> sur le tableau.</li> </ol>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/","title":"Exercices, partie 2","text":"<p>Pour chacun des exercices suivants, cr\u00e9ez une ou plusieurs m\u00e9thodes statiques qui font ce qui est d\u00e9crit, et testez vos m\u00e9thodes dans un <code>main</code>. Vous pouvez cr\u00e9er une classe diff\u00e9rente pour chaque question. Faites 2 versions de chaque question : une avec des tableaux, l\u2019autre avec des <code>ArrayList</code>.</p> <p>Pour chaque exercice, vous devriez :</p> <ul> <li>G\u00e9rer les exceptions appropri\u00e9es</li> <li>Valider les entr\u00e9es</li> <li>Documenter le code</li> <li>Cr\u00e9er des tests unitaires simples (optionnel)</li> <li>Comparer les avantages/inconv\u00e9nients des deux versions (tableau vs ArrayList)</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#questions","title":"Questions","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-1-lecture-de-nombres","title":"Exercice 1 - Lecture de Nombres","text":"<p>Cr\u00e9ez un programme qui lit un fichier contenant un nombre entier par ligne et qui stocke ces nombres dans un tableau ou une <code>ArrayList</code>. Impl\u00e9mentez les m\u00e9thodes suivantes :</p> <pre><code>// Version tableau\npublic static int[] lireFichierNombres(String nomFichier)\n\npublic static void afficherNombres(int[] nombres)\n\n// Version ArrayList\npublic static ArrayList&lt;Integer&gt; lireFichierNombres(String nomFichier)\n\npublic static void afficherNombres(ArrayList&lt;Integer&gt; nombres)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-2-generateur-aleatoire","title":"Exercice 2 - G\u00e9n\u00e9rateur Al\u00e9atoire","text":"<p>D\u00e9veloppez un programme qui g\u00e9n\u00e8re N nombres al\u00e9atoires entre MIN et MAX et les sauvegarde dans un fichier (un nombre par ligne). Impl\u00e9mentez :</p> <pre><code>// Version tableau\npublic static int[] genererNombres(int n, int min, int max)\n\npublic static void sauvegarderNombres(int[] nombres, String nomFichier)\n\n// Version ArrayList\npublic static ArrayList&lt;Integer&gt; genererNombres(int n, int min, int max)\n\npublic static void sauvegarderNombres(ArrayList&lt;Integer&gt; nombres, String nomFichier)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-3-statistiques-fichier","title":"Exercice 3 - Statistiques Fichier","text":"<p>Cr\u00e9ez un programme qui analyse un fichier texte et affiche le nombre de lignes, de mots et de caract\u00e8res. Impl\u00e9mentez :</p> <pre><code>public static void analyserFichier(String nomFichier)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-4-tri-de-fichier","title":"Exercice 4 - Tri de Fichier","text":"<p>D\u00e9veloppez un programme qui lit un fichier texte, enl\u00e8ve les lignes vides, trie les lignes restantes et sauvegarde le r\u00e9sultat dans un nouveau fichier. Impl\u00e9mentez :</p> <pre><code>// Version tableau\npublic static String[] lireLignesFichier(String nomFichier)\n\npublic static String[] supprimerLignesVides(String[] lignes)\n\npublic static void sauvegarderLignes(String[] lignes, String nomFichier)\n\n// Version ArrayList\npublic static ArrayList&lt;String&gt; lireLignesFichier(String nomFichier)\n\npublic static ArrayList&lt;String&gt; supprimerLignesVides(ArrayList&lt;String&gt; lignes)\n\npublic static void sauvegarderLignes(ArrayList&lt;String&gt; lignes, String nomFichier)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-5-fusion-de-fichiers","title":"Exercice 5 - Fusion de Fichiers**","text":"<p>Cr\u00e9ez un programme qui fusionne deux fichiers tri\u00e9s en ordre croissant en gardant l\u2019ordre. Impl\u00e9mentez :</p> <pre><code>// Version tableau\npublic static int[] fusionnerFichiers(String fichier1, String fichier2)\n\npublic static void sauvegarderFusion(int[] nombres, String fichierSortie)\n\n// Version ArrayList\npublic static ArrayList&lt;Integer&gt; fusionnerFichiers(String fichier1, String fichier2)\n\npublic static void sauvegarderFusion(ArrayList&lt;Integer&gt; nombres, String fichierSortie)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/02-exercices/#exercice-6-recherche-de-mots","title":"Exercice 6 - Recherche de Mots","text":"<p>D\u00e9veloppez un programme qui cherche toutes les occurrences d\u2019un mot dans un fichier et retourne les num\u00e9ros de lignes o\u00f9 le mot appara\u00eet. Impl\u00e9mentez :</p> <pre><code>// Version tableau\npublic static int[] rechercherMot(String mot, String nomFichier)\n\npublic static void afficherResultats(String mot, int[] lignes)\n\n// Version ArrayList\npublic static ArrayList&lt;Integer&gt; rechercherMot(String mot, String nomFichier)\n\npublic static void afficherResultats(String mot, ArrayList&lt;Integer&gt; lignes)\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/","title":"Solutions : exercices partie 1","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-1-valeur-absolue","title":"Question 1 : Valeur absolue","text":"<p>Pour calculer la valeur absolue d\u2019un nombre, nous devons :</p> <ol> <li>Lire un nombre de l\u2019utilisateur</li> <li>D\u00e9terminer si le nombre est n\u00e9gatif</li> <li>Si le nombre est n\u00e9gatif, le multiplier par -1.</li> <li>Afficher le r\u00e9sultat</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void valeurAbsolue() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez un nombre: \");\n        int nombre = clavier.nextInt();\n\n        int valeurAbsolue = nombre;\n        if (nombre &lt; 0) {\n            valeurAbsolue = -nombre;\n        }\n\n        System.out.println(\"La valeur absolue de \" + nombre + \" est \" + valeurAbsolue);\n    }\n\n    public static void main(String[] args) {\n        valeurAbsolue();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>La m\u00e9thode est d\u00e9clar\u00e9e <code>static</code> car elle sera appel\u00e9e directement dans le <code>main</code></li> <li>Nous utilisons un <code>Scanner</code> pour lire l\u2019entr\u00e9e de l\u2019utilisateur</li> <li>La condition <code>if</code> v\u00e9rifie si le nombre est n\u00e9gatif</li> <li>Il n\u2019est pas n\u00e9cessaire d\u2019utiliser un <code>else</code> car si le nombre est positif, nous voulons garder sa valeur initiale</li> <li>La m\u00e9thode <code>Math.abs()</code> existe en Java pour calculer la valeur absolue, mais l\u2019exercice demande d\u2019impl\u00e9menter la   logique nous-m\u00eames</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 5 \u2192 Sortie attendue : 5</li> <li>Entr\u00e9e : -3 \u2192 Sortie attendue : 3</li> <li>Entr\u00e9e : 0 \u2192 Sortie attendue : 0</li> <li>Entr\u00e9e : -10 \u2192 Sortie attendue : 10</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-2-nombre-pair-ou-impair","title":"Question 2 : Nombre pair ou impair","text":"<p>Pour d\u00e9terminer si un nombre est pair ou impair, nous utilisons l\u2019op\u00e9rateur modulo (%). Un nombre est pair si le reste de sa division par 2 est \u00e9gal \u00e0 0.</p> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void verifierPairImpair() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez un nombre entier: \");\n        int nombre = clavier.nextInt();\n\n        if (nombre % 2 == 0) {\n            System.out.println(nombre + \" est pair\");\n        } else {\n            System.out.println(nombre + \" est impair\");\n        }\n    }\n\n    public static void main(String[] args) {\n        verifierPairImpair();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>L\u2019op\u00e9rateur modulo <code>%</code> retourne le reste de la division</li> <li>Pour un nombre pair, <code>nombre % 2</code> donne toujours 0</li> <li>Pour un nombre impair, <code>nombre % 2</code> donne toujours 1</li> <li>La structure if/else est appropri\u00e9e ici, car nous avons exactement deux cas possibles</li> <li>La m\u00e9thode traite aussi correctement les nombres n\u00e9gatifs</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 4 \u2192 Sortie : \u201c4 est pair\u201d</li> <li>Entr\u00e9e : 7 \u2192 Sortie : \u201c7 est impair\u201d</li> <li>Entr\u00e9e : 0 \u2192 Sortie : \u201c0 est pair\u201d</li> <li>Entr\u00e9e : -3 \u2192 Sortie : \u201c-3 est impair\u201d</li> <li>Entr\u00e9e : -2 \u2192 Sortie : \u201c-2 est pair\u201d</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-3-le-plus-petit-de-trois-nombres","title":"Question 3 : Le plus petit de trois nombres","text":"<p>Pour trouver le plus petit de trois nombres, nous devons comparer les nombres de mani\u00e8re syst\u00e9matique.</p> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void trouverPlusPetit() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez le premier nombre: \");\n        int nombre1 = clavier.nextInt();\n\n        System.out.print(\"Entrez le deuxi\u00e8me nombre: \");\n        int nombre2 = clavier.nextInt();\n\n        System.out.print(\"Entrez le troisi\u00e8me nombre: \");\n        int nombre3 = clavier.nextInt();\n\n        int plusPetit = nombre1;\n\n        if (nombre2 &lt; plusPetit) {\n            plusPetit = nombre2;\n        }\n\n        if (nombre3 &lt; plusPetit) {\n            plusPetit = nombre3;\n        }\n\n        System.out.println(\"Le plus petit nombre est: \" + plusPetit);\n    }\n\n    public static void main(String[] args) {\n        trouverPlusPetit();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>Nous commen\u00e7ons par supposer que le premier nombre est le plus petit</li> <li>Nous comparons ensuite cette valeur avec les autres nombres</li> <li>Si nous trouvons un nombre plus petit, nous mettons \u00e0 jour notre variable <code>plusPetit</code></li> <li>Cette approche est plus simple et plus claire que d\u2019utiliser des conditions imbriqu\u00e9es</li> <li>Il existe aussi la m\u00e9thode <code>Math.min()</code>, mais l\u2019exercice demande d\u2019impl\u00e9menter la logique nous-m\u00eames</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 5, 3, 7 \u2192 Sortie : 3</li> <li>Entr\u00e9e : 2, 2, 2 \u2192 Sortie : 2</li> <li>Entr\u00e9e : -1, 0, 1 \u2192 Sortie : -1</li> <li>Entr\u00e9e : 10, -5, 3 \u2192 Sortie : -5</li> <li>Entr\u00e9e : 0, 0, 1 \u2192 Sortie : 0</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-4-calcul-du-salaire-avec-heures-supplementaires","title":"Question 4 : Calcul du salaire avec heures suppl\u00e9mentaires","text":"<p>Pour calculer le salaire total, nous devons :</p> <ol> <li>Lire le salaire horaire et les heures travaill\u00e9es</li> <li>Calculer le salaire de base pour les 40 premi\u00e8res heures</li> <li>Si applicable, calculer le salaire pour les heures suppl\u00e9mentaires (1.5x le taux horaire)</li> <li>Additionner les deux montants</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void calculerSalaire() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez le salaire horaire: \");\n        double salaireHoraire = clavier.nextDouble();\n\n        System.out.print(\"Entrez le nombre d'heures travaill\u00e9es: \");\n        double heuresTravaillees = clavier.nextDouble();\n\n        double salaireFinal;\n\n        if (heuresTravaillees &lt;= 40) {\n            salaireFinal = salaireHoraire * heuresTravaillees;\n        } else {\n            double heuresNormales = 40;\n            double heuresSupp = heuresTravaillees - 40;\n            salaireFinal = (salaireHoraire * heuresNormales) +\n                    (salaireHoraire * 1.5 * heuresSupp);\n        }\n\n        System.out.printf(\"Le salaire total est: %.2f$\\n\", salaireFinal);\n    }\n\n    public static void main(String[] args) {\n        calculerSalaire();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>Nous utilisons le type <code>double</code> pour g\u00e9rer les d\u00e9cimales dans les calculs mon\u00e9taires</li> <li>La structure if/else s\u00e9pare clairement les deux cas possibles :<ul> <li>Heures r\u00e9guli\u00e8res seulement (\u2264 40 heures)</li> <li>Heures r\u00e9guli\u00e8res + heures suppl\u00e9mentaires (&gt; 40 heures)</li> </ul> </li> <li><code>printf</code> est utilis\u00e9 pour formater l\u2019affichage \u00e0 deux d\u00e9cimales</li> <li>Les calculs sont s\u00e9par\u00e9s en parties distinctes pour plus de clart\u00e9</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 20$/h, 35h \u2192 Sortie : 700.00$</li> <li>Entr\u00e9e : 15$/h, 45h \u2192 Sortie : 712.50$ (600$ + 112.50$)</li> <li>Entr\u00e9e : 25$/h, 40h \u2192 Sortie : 1000.00$</li> <li>Entr\u00e9e : 18$/h, 50h \u2192 Sortie : 990.00$ (720$ + 270$)</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-5-type-de-triangle","title":"Question 5 : Type de triangle","text":"<p>Pour d\u00e9terminer le type de triangle, nous devons :</p> <ol> <li>Lire les trois c\u00f4t\u00e9s</li> <li>V\u00e9rifier les \u00e9galit\u00e9s entre les c\u00f4t\u00e9s</li> <li>Classifier le triangle selon ces \u00e9galit\u00e9s</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void determinerTypeTriangle() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez la longueur du premier c\u00f4t\u00e9: \");\n        double cote1 = clavier.nextDouble();\n\n        System.out.print(\"Entrez la longueur du deuxi\u00e8me c\u00f4t\u00e9: \");\n        double cote2 = clavier.nextDouble();\n\n        System.out.print(\"Entrez la longueur du troisi\u00e8me c\u00f4t\u00e9: \");\n        double cote3 = clavier.nextDouble();\n\n        // V\u00e9rifier si les c\u00f4t\u00e9s sont positifs\n        if (cote1 &lt;= 0 || cote2 &lt;= 0 || cote3 &lt;= 0) {\n            System.out.println(\"Les c\u00f4t\u00e9s doivent \u00eatre positifs\");\n            return;\n        }\n\n        // D\u00e9terminer le type de triangle\n        if (cote1 == cote2 &amp;&amp; cote2 == cote3) {\n            System.out.println(\"\u00c9quilat\u00e9ral\");\n        } else if (cote1 == cote2 || cote2 == cote3 || cote1 == cote3) {\n            System.out.println(\"Isoc\u00e8le\");\n        } else {\n            System.out.println(\"Scal\u00e8ne\");\n        }\n    }\n\n    public static void main(String[] args) {\n        determinerTypeTriangle();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>Nous utilisons le type <code>double</code> pour permettre des mesures d\u00e9cimales</li> <li>La validation des c\u00f4t\u00e9s positifs est importante pour la coh\u00e9rence math\u00e9matique</li> <li>L\u2019ordre des conditions est crucial :<ol> <li>D\u2019abord v\u00e9rifier si tous les c\u00f4t\u00e9s sont \u00e9gaux (\u00e9quilat\u00e9ral).</li> <li>Ensuite v\u00e9rifier si deux c\u00f4t\u00e9s sont \u00e9gaux (isoc\u00e8le).</li> <li>Sinon, c\u2019est un triangle scal\u00e8ne</li> </ol> </li> <li>L\u2019utilisation de <code>return</code> permet de terminer la m\u00e9thode si les donn\u00e9es sont invalides</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 5, 5, 5 \u2192 Sortie : \u201c\u00c9quilat\u00e9ral\u201d</li> <li>Entr\u00e9e : 5, 5, 3 \u2192 Sortie : \u201cIsoc\u00e8le\u201d</li> <li>Entr\u00e9e : 3, 4, 5 \u2192 Sortie : \u201cScal\u00e8ne\u201d</li> <li>Entr\u00e9e : -1, 2, 3 \u2192 Sortie : \u201cLes c\u00f4t\u00e9s doivent \u00eatre positifs\u201d</li> <li>Entr\u00e9e : 4, 4, 6 \u2192 Sortie : \u201cIsoc\u00e8le\u201d</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-6-calcul-de-moyenne-et-validation","title":"Question 6 : Calcul de moyenne et validation","text":"<p>Pour calculer la moyenne de trois notes et d\u00e9terminer la r\u00e9ussite, nous devons :</p> <ol> <li>Lire les trois notes</li> <li>Calculer la moyenne</li> <li>D\u00e9terminer si c\u2019est un \u00e9chec ou une r\u00e9ussite</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void calculerMoyenne() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez la premi\u00e8re note (sur 100): \");\n        double note1 = clavier.nextDouble();\n\n        System.out.print(\"Entrez la deuxi\u00e8me note (sur 100): \");\n        double note2 = clavier.nextDouble();\n\n        System.out.print(\"Entrez la troisi\u00e8me note (sur 100): \");\n        double note3 = clavier.nextDouble();\n\n        // Validation des notes\n        if (note1 &lt; 0 || note1 &gt; 100 || note2 &lt; 0 || note2 &gt; 100 || note3 &lt; 0 || note3 &gt; 100) {\n            System.out.println(\"Les notes doivent \u00eatre entre 0 et 100\");\n            return;\n        }\n\n        // Calcul de la moyenne\n        double moyenne = (note1 + note2 + note3) / 3;\n\n        // Affichage du r\u00e9sultat\n        if (moyenne &lt; 60) {\n            System.out.println(\"\u00c9chec\");\n        } else {\n            System.out.printf(\"Note finale: %.1f/100\\n\", moyenne);\n        }\n    }\n\n    public static void main(String[] args) {\n        calculerMoyenne();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>La validation des notes est importante pour assurer la coh\u00e9rence des r\u00e9sultats</li> <li>Nous utilisons le type <code>double</code> pour g\u00e9rer les d\u00e9cimales dans les calculs</li> <li>La moyenne est calcul\u00e9e en additionnant les notes et en divisant par le nombre de notes</li> <li><code>printf</code> permet de formater l\u2019affichage \u00e0 une d\u00e9cimale</li> <li>La condition de r\u00e9ussite (\u2265 60) d\u00e9termine le message \u00e0 afficher</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 70, 80, 90 \u2192 Sortie : \u201cNote finale : 80.0/100\u201d</li> <li>Entr\u00e9e : 50, 55, 45 \u2192 Sortie : \u201c\u00c9chec\u201d</li> <li>Entr\u00e9e : 60, 60, 60 \u2192 Sortie : \u201cNote finale : 60.0/100\u201d</li> <li>Entr\u00e9e : -10, 80, 90 \u2192 Sortie : \u201cLes notes doivent \u00eatre entre 0 et 100\u201d</li> <li>Entr\u00e9e : 59, 59, 59 \u2192 Sortie : \u201c\u00c9chec\u201d</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-7-conversion-de-note-numerique-en-lettre","title":"Question 7 : Conversion de note num\u00e9rique en lettre","text":"<p>Pour convertir une note num\u00e9rique en lettre, nous devons :</p> <ol> <li>Lire la note</li> <li>Valider qu\u2019elle est entre 0 et 100</li> <li>D\u00e9terminer la lettre correspondante selon les intervalles donn\u00e9s</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void convertirNoteEnLettre() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez la note finale (0-100): \");\n        double note = clavier.nextDouble();\n\n        // Validation de la note\n        if (note &lt; 0 || note &gt; 100) {\n            System.out.println(\"Cette note est invalide\");\n            return;\n        }\n\n        // Conversion en lettre\n        char lettre;\n        if (note &gt;= 90) {\n            lettre = 'A';\n        } else if (note &gt;= 80) {\n            lettre = 'B';\n        } else if (note &gt;= 70) {\n            lettre = 'C';\n        } else if (note &gt;= 60) {\n            lettre = 'D';\n        } else {\n            lettre = 'E';\n        }\n\n        System.out.println(\"Note: \" + lettre);\n    }\n\n    public static void main(String[] args) {\n        convertirNoteEnLettre();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>L\u2019ordre des conditions est important : on commence par la plus haute note</li> <li>Les conditions utilisent &gt;= pour inclure la borne inf\u00e9rieure de chaque intervalle</li> <li>La structure <code>if-else if</code> permet de n\u2019ex\u00e9cuter qu\u2019une seule condition</li> <li>Le type <code>char</code> est utilis\u00e9 pour stocker la lettre</li> <li>La validation est faite avant la conversion.</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 95 \u2192 Sortie : \u201cNote : A\u201d</li> <li>Entr\u00e9e : 85 \u2192 Sortie : \u201cNote : B\u201d</li> <li>Entr\u00e9e : 75 \u2192 Sortie : \u201cNote : C\u201d</li> <li>Entr\u00e9e : 65 \u2192 Sortie : \u201cNote : D\u201d</li> <li>Entr\u00e9e : 55 \u2192 Sortie : \u201cNote : E\u201d</li> <li>Entr\u00e9e : -5 \u2192 Sortie : \u201cCette note est invalide\u201d</li> <li>Entr\u00e9e : 101 \u2192 Sortie : \u201cCette note est invalide\u201d</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#avec-une-expression-switch-moderne","title":"Avec une expression <code>switch</code> moderne","text":"<p>Voici la m\u00eame conversion de notes en utilisant le switch moderne (switch expressions) disponible depuis Java 14 :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void convertirNoteEnLettre() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez la note finale (0-100): \");\n        double note = clavier.nextDouble();\n\n        // Validation de la note\n        if (note &lt; 0 || note &gt; 100) {\n            System.out.println(\"Cette note est invalide\");\n            return;\n        }\n\n        // Conversion en lettre avec switch moderne\n        char lettre = switch ((int) (note / 10)) {\n            case 9, 10 -&gt; 'A';\n            case 8 -&gt; 'B';\n            case 7 -&gt; 'C';\n            case 6 -&gt; 'D';\n            default -&gt; 'E';\n        };\n\n        System.out.println(\"Note: \" + lettre);\n    }\n\n    public static void main(String[] args) {\n        convertirNoteEnLettre();\n    }\n}\n</code></pre> <p>Les avantages de cette version moderne sont : - La syntaxe est plus concise avec l\u2019op\u00e9rateur fl\u00e9ch\u00e9 (<code>-&gt;</code>) - Pas besoin d\u2019utiliser <code>break</code> - L\u2019assignation peut se faire directement dans une expression - Les cas multiples peuvent \u00eatre list\u00e9s avec des virgules (<code>case 9, 10</code>)</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-8-validation-simple-dun-intervalle","title":"Question 8 : Validation simple d\u2019un intervalle","text":"<p>Pour valider qu\u2019un nombre est entre 1 et 10 inclusivement, nous devons :</p> <ol> <li>Lire le nombre</li> <li>V\u00e9rifier s\u2019il est dans l\u2019intervalle [1,10]</li> <li>Afficher le message appropri\u00e9</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void validerIntervalle() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez un nombre entre 1 et 10: \");\n        int nombre = clavier.nextInt();\n\n        if (nombre &gt;= 1 &amp;&amp; nombre &lt;= 10) {\n            System.out.println(\"valide\");\n        } else {\n            System.out.println(\"invalide\");\n        }\n    }\n\n    public static void main(String[] args) {\n        validerIntervalle();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>L\u2019op\u00e9rateur <code>&amp;&amp;</code> permet de combiner deux conditions</li> <li>Les bornes (1 et 10) sont incluses dans l\u2019intervalle gr\u00e2ce \u00e0 <code>&gt;=</code> et <code>&lt;=</code></li> <li>La structure if/else est appropri\u00e9e, car nous avons exactement deux cas possibles</li> <li>Le message affich\u00e9 doit \u00eatre exactement \u201cvalide\u201d ou \u201cinvalide\u201d selon l\u2019\u00e9nonc\u00e9</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <ul> <li>Entr\u00e9e : 5 \u2192 Sortie : \u201cvalide\u201d</li> <li>Entr\u00e9e : 1 \u2192 Sortie : \u201cvalide\u201d</li> <li>Entr\u00e9e : 10 \u2192 Sortie : \u201cvalide\u201d</li> <li>Entr\u00e9e : 0 \u2192 Sortie : \u201cinvalide\u201d</li> <li>Entr\u00e9e : 11 \u2192 Sortie : \u201cinvalide\u201d</li> <li>Entr\u00e9e : -5 \u2192 Sortie : \u201cinvalide\u201d</li> </ul>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-9-validation-avec-repetition","title":"Question 9 : Validation avec r\u00e9p\u00e9tition","text":"<p>Cette question est similaire \u00e0 la pr\u00e9c\u00e9dente, mais nous devons continuer \u00e0 demander un nombre jusqu\u2019\u00e0 ce qu\u2019il soit valide.</p> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void validerIntervalleAvecRepetition() {\n        Scanner clavier = new Scanner(System.in);\n        int nombre;\n\n        do {\n            System.out.print(\"Entrez un nombre entre 1 et 10: \");\n            nombre = clavier.nextInt();\n\n            if (nombre &lt; 1 || nombre &gt; 10) {\n                System.out.println(\"invalide\");\n            }\n        } while (nombre &lt; 1 || nombre &gt; 10);\n\n        System.out.println(\"valide\");\n    }\n\n    public static void main(String[] args) {\n        validerIntervalleAvecRepetition();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>La boucle <code>do-while</code> est id\u00e9ale ici car :<ul> <li>Nous devons ex\u00e9cuter le code au moins une fois</li> <li>Nous ne connaissons pas \u00e0 l\u2019avance le nombre d\u2019it\u00e9rations n\u00e9cessaires</li> </ul> </li> <li>La condition de la boucle est l\u2019inverse de la validation</li> <li>Le message \u201cinvalide\u201d est affich\u00e9 \u00e0 chaque tentative incorrecte</li> <li>Le message \u201cvalide\u201d n\u2019est affich\u00e9 qu\u2019une seule fois, apr\u00e8s avoir obtenu un nombre valide</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <pre><code>Test 1 :\nEntr\u00e9e : 15\nSortie : \"invalide\"\nEntr\u00e9e : 0\nSortie : \"invalide\"\nEntr\u00e9e : 7\nSortie : \"valide\"\n\nTest 2 :\nEntr\u00e9e : 5\nSortie : \"valide\"\n\nTest 3 :\nEntr\u00e9e : -3\nSortie : \"invalide\"\nEntr\u00e9e : 11\nSortie : \"invalide\"\nEntr\u00e9e : 1\nSortie : \"valide\"\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-10-validation-avec-nombre-limite-dessais","title":"Question 10 : Validation avec nombre limit\u00e9 d\u2019essais","text":"<p>Cette question ajoute une limite de 3 essais incorrects \u00e0 la validation pr\u00e9c\u00e9dente.</p> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void validerIntervalleAvecLimite() {\n        Scanner clavier = new Scanner(System.in);\n        int nombre;\n        int essaisIncorrects = 0;\n        final int MAX_ESSAIS = 3;\n\n        do {\n            System.out.print(\"Entrez un nombre entre 1 et 10: \");\n            nombre = clavier.nextInt();\n\n            if (nombre &lt; 1 || nombre &gt; 10) {\n                essaisIncorrects++;\n                System.out.println(\"invalide\");\n\n                if (essaisIncorrects &gt;= MAX_ESSAIS) {\n                    System.out.println(\"Nombre maximal d'essais atteint.\");\n                    return;\n                }\n            }\n        } while (nombre &lt; 1 || nombre &gt; 10);\n\n        System.out.println(\"valide\");\n    }\n\n    public static void main(String[] args) {\n        validerIntervalleAvecLimite();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>Une constante <code>MAX_ESSAIS</code> est utilis\u00e9e pour d\u00e9finir la limite</li> <li>Le compteur <code>essaisIncorrects</code> est incr\u00e9ment\u00e9 \u00e0 chaque essai invalide</li> <li>L\u2019instruction <code>return</code> permet de sortir imm\u00e9diatement de la m\u00e9thode quand la limite est atteinte</li> <li>La structure reste similaire \u00e0 la question pr\u00e9c\u00e9dente, avec l\u2019ajout du compteur</li> <li>Le message de limite atteinte doit \u00eatre exact selon l\u2019\u00e9nonc\u00e9</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <pre><code>Test 1 (succ\u00e8s rapide) :\nEntr\u00e9e : 5\nSortie : \"valide\"\n\nTest 2 (succ\u00e8s apr\u00e8s erreurs) :\nEntr\u00e9e : 11\nSortie : \"invalide\"\nEntr\u00e9e : 0\nSortie : \"invalide\"\nEntr\u00e9e : 7\nSortie : \"valide\"\n\nTest 3 (\u00e9chec apr\u00e8s 3 essais) :\nEntr\u00e9e : 15\nSortie : \"invalide\"\nEntr\u00e9e : -1\nSortie : \"invalide\"\nEntr\u00e9e : 11\nSortie : \"invalide\"\nSortie : \"Nombre maximal d'essais atteint.\"\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-11-inverser-un-nombre-entier","title":"Question 11 : Inverser un nombre entier","text":"<p>Pour inverser un nombre entier sans utiliser de cha\u00eene de caract\u00e8res, nous devons :</p> <ol> <li>Extraire chaque chiffre avec l\u2019op\u00e9rateur modulo (%)</li> <li>Construire le nouveau nombre en multipliant par 10 et en ajoutant chaque chiffre</li> <li>Utiliser la division enti\u00e8re pour passer au chiffre suivant</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void inverserNombre() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez un nombre entier: \");\n        int nombre = clavier.nextInt();\n\n        int nombreInverse = 0;\n        int nombreTemp = Math.abs(nombre); // Traiter le signe \u00e0 part\n\n        while (nombreTemp &gt; 0) {\n            int chiffre = nombreTemp % 10;        // Extraire le dernier chiffre\n            nombreInverse = nombreInverse * 10 + chiffre;  // Construire le nombre inverse\n            nombreTemp = nombreTemp / 10;         // Enlever le dernier chiffre\n        }\n\n        // G\u00e9rer le signe du nombre original\n        if (nombre &lt; 0) {\n            nombreInverse = -nombreInverse;\n        }\n\n        System.out.println(\"Nombre invers\u00e9: \" + nombreInverse);\n    }\n\n    public static void main(String[] args) {\n        inverserNombre();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>L\u2019algorithme utilise trois op\u00e9rations math\u00e9matiques cl\u00e9s :<ul> <li><code>% 10</code> pour obtenir le dernier chiffre</li> <li><code>* 10</code> pour d\u00e9caler les chiffres vers la gauche</li> <li><code>/ 10</code> pour enlever le dernier chiffre</li> </ul> </li> <li>Nous traitons le signe s\u00e9par\u00e9ment pour simplifier les calculs</li> <li>La boucle continue tant qu\u2019il reste des chiffres \u00e0 traiter</li> <li>Chaque it\u00e9ration :<ol> <li>Extrait le dernier chiffre</li> <li>L\u2019ajoute au r\u00e9sultat (d\u00e9cal\u00e9).</li> <li>R\u00e9duit le nombre original</li> </ol> </li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <pre><code>Test 1 :\nEntr\u00e9e : 123456\nSortie : 654321\n\nTest 2 :\nEntr\u00e9e : 100\nSortie : 1\n\nTest 3 :\nEntr\u00e9e : -123\nSortie : -321\n\nTest 4 :\nEntr\u00e9e : 1000\nSortie : 1\n\nTest 5 :\nEntr\u00e9e : 5\nSortie : 5\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-12-decompte-avec-message-final","title":"Question 12 : D\u00e9compte avec message final","text":"<p>Pour r\u00e9aliser un d\u00e9compte et afficher \u201cTermin\u00e9 !\u201d \u00e0 la fin, nous devons :</p> <ol> <li>Lire le nombre de d\u00e9part</li> <li>Afficher chaque nombre en d\u00e9cr\u00e9mentant</li> <li>Remplacer le 0 par \u201cTermin\u00e9 !\u201d</li> </ol> <p>Voici le code solution :</p> <pre><code>import java.util.Scanner;\n\npublic class ExercicesPartie1 {\n    public static void faireDecompte() {\n        Scanner clavier = new Scanner(System.in);\n\n        System.out.print(\"Entrez un nombre entier positif: \");\n        int nombre = clavier.nextInt();\n\n        if (nombre &lt;= 0) {\n            System.out.println(\"Le nombre doit \u00eatre positif\");\n            return;\n        }\n\n        for (int i = nombre; i &gt; 0; i--) {\n            System.out.println(i);\n        }\n\n        System.out.println(\"Termin\u00e9 !\");\n    }\n\n    public static void main(String[] args) {\n        faireDecompte();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>La boucle <code>for</code> est id\u00e9ale ici car :<ul> <li>Nous connaissons le nombre exact d\u2019it\u00e9rations</li> <li>Nous avons besoin d\u2019un compteur qui d\u00e9cr\u00e9mente</li> </ul> </li> <li>La validation du nombre positif est importante.</li> <li>Le message \u201cTermin\u00e9 !\u201d remplace le 0 et n\u2019est affich\u00e9 qu\u2019une fois \u00e0 la fin</li> <li>Chaque nombre est affich\u00e9 sur une nouvelle ligne</li> </ul> <p>Exemples de tests \u00e0 effectuer :</p> <pre><code>Test 1 :\nEntr\u00e9e : 5\nSortie :\n5\n4\n3\n2\n1\nTermin\u00e9 !\n\nTest 2 :\nEntr\u00e9e : 1\nSortie :\n1\nTermin\u00e9 !\n\nTest 3 :\nEntr\u00e9e : 0\nSortie : Le nombre doit \u00eatre positif\n\nTest 4 :\nEntr\u00e9e : -3\nSortie : Le nombre doit \u00eatre positif\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-13-operations-sur-tableau-avec-boucle-for","title":"Question 13 : Op\u00e9rations sur tableau avec boucle for","text":"<p>Cette question comporte trois sous-parties utilisant un m\u00eame tableau, mais avec des op\u00e9rations diff\u00e9rentes.</p> <pre><code>public class ExercicesPartie1 {\n    // Tableau de test commun pour toutes les sous-questions\n    private static final int[] tableau = {4, -2, 7, 8, -5, 10, 3, 6, -8, 1};\n\n    // Sous-question 1 : Somme et moyenne\n    public static void calculerSommeMoyenne() {\n        int somme = 0;\n\n        for (int i = 0; i &lt; tableau.length; i++) {\n            somme += tableau[i];\n        }\n\n        double moyenne = (double) somme / tableau.length;\n        System.out.println(\"Somme: \" + somme);\n        System.out.printf(\"Moyenne: %.2f\\n\", moyenne);\n    }\n\n    // Sous-question 2 : Nombres pairs\n    public static void afficherNombresPairs() {\n        System.out.print(\"Nombres pairs: \");\n\n        for (int i = 0; i &lt; tableau.length; i++) {\n            if (tableau[i] % 2 == 0) {\n                System.out.print(tableau[i] + \" \");\n            }\n        }\n        System.out.println();\n    }\n\n    // Sous-question 3 : V\u00e9rifier si tous positifs\n    public static void verifierTousPositifs() {\n        boolean tousPositifs = true;\n\n        for (int i = 0; i &lt; tableau.length; i++) {\n            if (tableau[i] &lt;= 0) {\n                tousPositifs = false;\n                break;\n            }\n        }\n\n        System.out.println(tousPositifs);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Question 13.1 - Somme et moyenne:\");\n        calculerSommeMoyenne();\n\n        System.out.println(\"\\nQuestion 13.2 - Nombres pairs:\");\n        afficherNombresPairs();\n\n        System.out.println(\"\\nQuestion 13.3 - Tous positifs:\");\n        verifierTousPositifs();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>Le tableau est d\u00e9clar\u00e9 comme constante de classe pour \u00eatre r\u00e9utilis\u00e9</li> <li>Chaque sous-question utilise une boucle <code>for</code> avec index</li> <li>La boucle <code>for</code> permet d\u2019acc\u00e9der aux \u00e9l\u00e9ments via leur index : <code>tableau[i]</code></li> </ul> <p>Pour la somme et moyenne :</p> <ul> <li>Le cast vers <code>double</code> est n\u00e9cessaire pour avoir une division d\u00e9cimale</li> <li><code>printf</code> permet de formater l\u2019affichage des d\u00e9cimales</li> </ul> <p>Pour les nombres pairs :</p> <ul> <li>L\u2019op\u00e9rateur modulo <code>%</code> permet de tester si un nombre est pair</li> <li><code>print</code> (sans ln) permet d\u2019afficher sur une m\u00eame ligne</li> </ul> <p>Pour la v\u00e9rification des positifs :</p> <ul> <li>L\u2019approche avec un bool\u00e9en initialis\u00e9 \u00e0 <code>true</code> est efficace</li> <li>Le <code>break</code> permet de sortir de la boucle d\u00e8s qu\u2019un n\u00e9gatif est trouv\u00e9</li> </ul> <p>Exemple d\u2019ex\u00e9cution :</p> <pre><code>Question 13.1 - Somme et moyenne :\nSomme : 24\nMoyenne : 2.40\n\nQuestion 13.2 - Nombres pairs :\nNombres pairs : 4 -2 8 10 6 -8 \n\nQuestion 13.3 - Tous positifs :\nfaux\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/01-exercices_solutions/#question-14-memes-operations-avec-boucle-whiledo-while","title":"Question 14 : M\u00eames op\u00e9rations avec boucle <code>while/do-while</code>","text":"<p>Cette question reprend les m\u00eames op\u00e9rations que la question 13, mais en utilisant des boucles while.</p> <pre><code>public class ExercicesPartie1 {\n    // M\u00eame tableau de test que la question 13\n    private static final int[] tableau = {4, -2, 7, 8, -5, 10, 3, 6, -8, 1};\n\n    // Sous-question 1 : Somme et moyenne avec while\n    public static void calculerSommeMoyenneWhile() {\n        int somme = 0;\n        int i = 0;\n\n        while (i &lt; tableau.length) {\n            somme += tableau[i];\n            i++;\n        }\n\n        double moyenne = (double) somme / tableau.length;\n        System.out.println(\"Somme: \" + somme);\n        System.out.printf(\"Moyenne: %.2f\\n\", moyenne);\n    }\n\n    // Sous-question 2 : Nombres pairs avec while\n    public static void afficherNombresPairsWhile() {\n        System.out.print(\"Nombres pairs: \");\n        int i = 0;\n\n        while (i &lt; tableau.length) {\n            if (tableau[i] % 2 == 0) {\n                System.out.print(tableau[i] + \" \");\n            }\n            i++;\n        }\n        System.out.println();\n    }\n\n    // Sous-question 3 : V\u00e9rifier si tous positifs avec while\n    public static void verifierTousPositifsWhile() {\n        boolean tousPositifs = true;\n        int i = 0;\n\n        while (i &lt; tableau.length &amp;&amp; tousPositifs) {\n            if (tableau[i] &lt;= 0) {\n                tousPositifs = false;\n            }\n            i++;\n        }\n\n        System.out.println(tousPositifs);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Question 14.1 - Somme et moyenne (while):\");\n        calculerSommeMoyenneWhile();\n\n        System.out.println(\"\\nQuestion 14.2 - Nombres pairs (while):\");\n        afficherNombresPairsWhile();\n\n        System.out.println(\"\\nQuestion 14.3 - Tous positifs (while):\");\n        verifierTousPositifsWhile();\n    }\n}\n</code></pre> <p>Points importants \u00e0 expliquer aux \u00e9tudiants :</p> <ul> <li>La principale diff\u00e9rence avec la question 13 est la structure de boucle</li> <li>Avec <code>while</code>, nous devons :<ul> <li>Initialiser le compteur avant la boucle</li> <li>Incr\u00e9menter manuellement le compteur dans la boucle</li> <li>G\u00e9rer la condition de continuation nous-m\u00eames</li> </ul> </li> </ul> <p>Diff\u00e9rences cl\u00e9s avec la version for :</p> <ul> <li>La variable de compteur <code>i</code> doit \u00eatre d\u00e9clar\u00e9e avant la boucle</li> <li>L\u2019incr\u00e9mentation doit \u00eatre explicite dans le corps de la boucle</li> <li>La logique reste la m\u00eame, seule la structure change</li> </ul> <p>Note sur l\u2019optimisation :</p> <ul> <li>Dans la version <code>verifierTousPositifsWhile</code>, nous pouvons combiner la condition du <code>while</code> avec notre bool\u00e9en</li> <li>Cela permet d\u2019arr\u00eater la boucle d\u00e8s qu\u2019un nombre n\u00e9gatif est trouv\u00e9</li> </ul> <p>Exemple d\u2019ex\u00e9cution :</p> <pre><code>Question 14.1 - Somme et moyenne (while) :\nSomme : 24\nMoyenne : 2.40\n\nQuestion 14.2 - Nombres pairs (while) :\nNombres pairs : 4 -2 8 10 6 -8 \n\nQuestion 14.3 - Tous positifs (while) :\nfaux\n</code></pre> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/","title":"Solutions : exercices partie 2","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-1","title":"Question 1","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-tableau","title":"Version avec Tableau","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class LectureNombresTableau {\n    /**\n     * Lit les nombres d'un fichier et les stocke dans un tableau\n     * @param nomFichier le chemin du fichier \u00e0 lire\n     * @return un tableau contenant les nombres lus\n     * @throws IOException si une erreur de lecture survient\n     * @throws NumberFormatException si le fichier contient des donn\u00e9es non num\u00e9riques\n     */\n    public static int[] lireFichierNombres(String nomFichier) throws IOException {\n        // Compte d'abord le nombre de lignes pour dimensionner le tableau\n        Path path = Paths.get(nomFichier);\n        int nombreLignes = (int) Files.lines(path).count();\n        int[] nombres = new int[nombreLignes];\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            int index = 0;\n            while ((ligne = reader.readLine()) != null) {\n                nombres[index] = Integer.parseInt(ligne.trim());\n                index++;\n            }\n        }\n        return nombres;\n    }\n\n    /**\n     * Affiche les nombres du tableau\n     * @param nombres le tableau de nombres \u00e0 afficher\n     */\n    public static void afficherNombres(int[] nombres) {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"Le tableau ne peut pas \u00eatre null\");\n        }\n\n        for (int i = 0; i &lt; nombres.length; i++) {\n            System.out.printf(\"Nombre %d: %d%n\", i + 1, nombres[i]);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            int[] nombres = lireFichierNombres(\"nombres.txt\");\n            afficherNombres(nombres);\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.err.println(\"Le fichier contient des donn\u00e9es non num\u00e9riques: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-arraylist","title":"Version avec ArrayList","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\npublic class LectureNombresArrayList {\n    /**\n     * Lit les nombres d'un fichier et les stocke dans une ArrayList\n     * @param nomFichier le chemin du fichier \u00e0 lire\n     * @return une ArrayList contenant les nombres lus\n     * @throws IOException si une erreur de lecture survient\n     * @throws NumberFormatException si le fichier contient des donn\u00e9es non num\u00e9riques\n     */\n    public static ArrayList&lt;Integer&gt; lireFichierNombres(String nomFichier) throws IOException {\n        ArrayList&lt;Integer&gt; nombres = new ArrayList&lt;&gt;();\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            while ((ligne = reader.readLine()) != null) {\n                nombres.add(Integer.parseInt(ligne.trim()));\n            }\n        }\n        return nombres;\n    }\n\n    /**\n     * Affiche les nombres de l'ArrayList\n     * @param nombres l'ArrayList de nombres \u00e0 afficher\n     */\n    public static void afficherNombres(ArrayList&lt;Integer&gt; nombres) {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"La liste ne peut pas \u00eatre null\");\n        }\n\n        for (int i = 0; i &lt; nombres.size(); i++) {\n            System.out.printf(\"Nombre %d: %d%n\", i + 1, nombres.get(i));\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            ArrayList&lt;Integer&gt; nombres = lireFichierNombres(\"nombres.txt\");\n            afficherNombres(nombres);\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.err.println(\"Le fichier contient des donn\u00e9es non num\u00e9riques: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#comparaison-des-versions","title":"Comparaison des Versions","text":"<p>Avantages de la version tableau:</p> <ul> <li>Utilisation m\u00e9moire fixe et pr\u00e9visible</li> <li>Acc\u00e8s direct aux \u00e9l\u00e9ments plus rapide</li> <li>Performance l\u00e9g\u00e8rement meilleure pour les op\u00e9rations de lecture s\u00e9quentielle</li> </ul> <p>Avantages de la version ArrayList:</p> <ul> <li>Pas besoin de conna\u00eetre la taille \u00e0 l\u2019avance</li> <li>Taille dynamique qui s\u2019adapte automatiquement</li> <li>Code plus simple et plus lisible</li> <li>Plus flexible pour les modifications futures</li> </ul> <p>Points communs aux deux versions:</p> <ul> <li>Gestion des exceptions (IOException, NumberFormatException)</li> <li>Validation des entr\u00e9es (v\u00e9rification null)</li> <li>Documentation JavaDoc compl\u00e8te</li> <li>Structure de code similaire</li> </ul> <p>Pour tester ces impl\u00e9mentations, cr\u00e9ez un fichier <code>nombres.txt</code> contenant des nombres entiers, un par ligne, comme:</p> <pre><code>42\n17\n123\n456\n789\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-2","title":"Question 2","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-tableau_1","title":"Version avec Tableau","text":"<pre><code>import java.io.PrintWriter;\nimport java.io.IOException;\nimport java.util.Random;\n\npublic class GenerateurNombresTableau {\n    /**\n     * G\u00e9n\u00e8re N nombres al\u00e9atoires entre MIN et MAX inclus\n     * @param n nombre de nombres \u00e0 g\u00e9n\u00e9rer\n     * @param min valeur minimum\n     * @param max valeur maximum\n     * @return tableau contenant les nombres g\u00e9n\u00e9r\u00e9s\n     * @throws IllegalArgumentException si n &lt; 0 ou min &gt; max\n     */\n    public static int[] genererNombres(int n, int min, int max) {\n        if (n &lt; 0) {\n            throw new IllegalArgumentException(\"Le nombre de valeurs \u00e0 g\u00e9n\u00e9rer doit \u00eatre positif\");\n        }\n        if (min &gt; max) {\n            throw new IllegalArgumentException(\"La valeur minimum doit \u00eatre inf\u00e9rieure ou \u00e9gale \u00e0 la valeur maximum\");\n        }\n\n        Random random = new Random();\n        int[] nombres = new int[n];\n\n        for (int i = 0; i &lt; n; i++) {\n            nombres[i] = random.nextInt(max - min + 1) + min;\n        }\n\n        return nombres;\n    }\n\n    /**\n     * Sauvegarde les nombres dans un fichier\n     * @param nombres tableau de nombres \u00e0 sauvegarder\n     * @param nomFichier nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderNombres(int[] nombres, String nomFichier) throws IOException {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"Le tableau ne peut pas \u00eatre null\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(nomFichier)) {\n            for (int nombre : nombres) {\n                writer.println(nombre);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            int[] nombres = genererNombres(10, 1, 100);\n            sauvegarderNombres(nombres, \"nombres_aleatoires.txt\");\n            System.out.println(\"G\u00e9n\u00e9ration et sauvegarde r\u00e9ussies!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la sauvegarde: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tres: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-arraylist_1","title":"Version avec ArrayList","text":"<pre><code>import java.io.PrintWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class GenerateurNombresArrayList {\n    /**\n     * G\u00e9n\u00e8re N nombres al\u00e9atoires entre MIN et MAX inclus\n     * @param n nombre de nombres \u00e0 g\u00e9n\u00e9rer\n     * @param min valeur minimum\n     * @param max valeur maximum\n     * @return ArrayList contenant les nombres g\u00e9n\u00e9r\u00e9s\n     * @throws IllegalArgumentException si n &lt; 0 ou min &gt; max\n     */\n    public static ArrayList&lt;Integer&gt; genererNombres(int n, int min, int max) {\n        if (n &lt; 0) {\n            throw new IllegalArgumentException(\"Le nombre de valeurs \u00e0 g\u00e9n\u00e9rer doit \u00eatre positif\");\n        }\n        if (min &gt; max) {\n            throw new IllegalArgumentException(\"La valeur minimum doit \u00eatre inf\u00e9rieure ou \u00e9gale \u00e0 la valeur maximum\");\n        }\n\n        Random random = new Random();\n        ArrayList&lt;Integer&gt; nombres = new ArrayList&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) {\n            nombres.add(random.nextInt(max - min + 1) + min);\n        }\n\n        return nombres;\n    }\n\n    /**\n     * Sauvegarde les nombres dans un fichier\n     * @param nombres ArrayList de nombres \u00e0 sauvegarder\n     * @param nomFichier nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderNombres(ArrayList&lt;Integer&gt; nombres, String nomFichier) throws IOException {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"La liste ne peut pas \u00eatre null\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(nomFichier)) {\n            for (Integer nombre : nombres) {\n                writer.println(nombre);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            ArrayList&lt;Integer&gt; nombres = genererNombres(10, 1, 100);\n            sauvegarderNombres(nombres, \"nombres_aleatoires.txt\");\n            System.out.println(\"G\u00e9n\u00e9ration et sauvegarde r\u00e9ussies!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la sauvegarde: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tres: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#comparaison-des-versions_1","title":"Comparaison des Versions","text":"<p>Avantages de la version tableau:</p> <ul> <li>Allocation m\u00e9moire en une seule fois</li> <li>Performance l\u00e9g\u00e8rement meilleure pour un nombre fixe d\u2019\u00e9l\u00e9ments</li> <li>Moins de surcharge m\u00e9moire car pas de structure de donn\u00e9es dynamique</li> </ul> <p>Avantages de la version ArrayList:</p> <ul> <li>Plus flexible si on veut modifier le nombre d\u2019\u00e9l\u00e9ments apr\u00e8s la g\u00e9n\u00e9ration</li> <li>Syntaxe plus claire avec les m\u00e9thodes add()</li> <li>Plus facile \u00e0 modifier si on veut ajouter des fonctionnalit\u00e9s</li> </ul> <p>Points communs aux deux versions:</p> <ul> <li>M\u00eame logique de g\u00e9n\u00e9ration de nombres al\u00e9atoires</li> <li>Validation similaire des param\u00e8tres d\u2019entr\u00e9e</li> <li>Gestion identique des exceptions</li> <li>M\u00eame approche pour la sauvegarde dans un fichier</li> </ul> <p>Pour tester ces impl\u00e9mentations, ex\u00e9cutez simplement le main de l\u2019une ou l\u2019autre version. Le programme cr\u00e9era un fichier \u201cnombres_aleatoires.txt\u201d contenant les nombres g\u00e9n\u00e9r\u00e9s, un par ligne.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-3","title":"Question 3","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class StatistiquesFichier {\n    /**\n     * Structure pour stocker les statistiques du fichier\n     */\n    public static class Statistiques {\n        private int nombreLignes;\n        private int nombreMots;\n        private int nombreCaracteres;\n\n        public Statistiques(int lignes, int mots, int caracteres) {\n            this.nombreLignes = lignes;\n            this.nombreMots = mots;\n            this.nombreCaracteres = caracteres;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"\"\"\n                            Statistiques du fichier:\n                            Nombre de lignes: %d\n                            Nombre de mots: %d\n                            Nombre de caract\u00e8res: %d\"\"\",\n                    nombreLignes, nombreMots, nombreCaracteres);\n        }\n    }\n\n    /**\n     * Analyse un fichier texte et retourne ses statistiques\n     * @param nomFichier le nom du fichier \u00e0 analyser\n     * @throws IOException si une erreur de lecture survient\n     * @throws IllegalArgumentException si le nom du fichier est null ou vide\n     */\n    public static void analyserFichier(String nomFichier) throws IOException {\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        int lignes = 0;\n        int mots = 0;\n        int caracteres = 0;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            while ((ligne = reader.readLine()) != null) {\n                lignes++;\n\n                // Compte les caract\u00e8res (sans les retours \u00e0 la ligne)\n                caracteres += ligne.length();\n\n                // Compte les mots (en ignorant les espaces multiples)\n                if (!ligne.trim().isEmpty()) {\n                    mots += ligne.trim().split(\"\\\\s+\").length;\n                }\n            }\n        }\n\n        Statistiques stats = new Statistiques(lignes, mots, caracteres);\n        System.out.println(stats);\n    }\n\n    /**\n     * Version alternative qui retourne les statistiques au lieu de les afficher\n     */\n    public static Statistiques obtenirStatistiques(String nomFichier) throws IOException {\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        int lignes = 0;\n        int mots = 0;\n        int caracteres = 0;\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            while ((ligne = reader.readLine()) != null) {\n                lignes++;\n                caracteres += ligne.length();\n                if (!ligne.trim().isEmpty()) {\n                    mots += ligne.trim().split(\"\\\\s+\").length;\n                }\n            }\n        }\n\n        return new Statistiques(lignes, mots, caracteres);\n    }\n\n    public static void main(String[] args) {\n        try {\n            // Test avec un fichier exemple\n            analyserFichier(\"test.txt\");\n\n            // Test avec la version alternative\n            Statistiques stats = obtenirStatistiques(\"test.txt\");\n            System.out.println(\"\\nStatistiques obtenues via la m\u00e9thode alternative:\");\n            System.out.println(stats);\n\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tre: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#points-importants-de-limplementation","title":"Points Importants de l\u2019Impl\u00e9mentation","text":"<p>Caract\u00e9ristiques principales:</p> <ul> <li>Utilisation d\u2019une classe interne <code>Statistiques</code> pour encapsuler les r\u00e9sultats</li> <li>Deux versions de la m\u00e9thode d\u2019analyse : une qui affiche directement et une qui retourne un objet</li> <li>Gestion appropri\u00e9e des espaces multiples dans le comptage des mots</li> <li>Prise en compte des lignes vides</li> </ul> <p>Gestion des cas particuliers:</p> <ul> <li>Validation du nom de fichier</li> <li>Gestion des lignes vides dans le comptage des mots</li> <li>Traitement correct des espaces multiples</li> </ul> <p>Tests</p> <p>Pour tester cette impl\u00e9mentation, cr\u00e9ez un fichier <code>test.txt</code> avec du contenu vari\u00e9, par exemple:</p> <pre><code>Ceci est une ligne de test\navec des    espaces   multiples\n\nEt une ligne apr\u00e8s une ligne vide\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#ameliorations-possibles","title":"Am\u00e9liorations Possibles","text":"<ol> <li>Comptage plus pr\u00e9cis des caract\u00e8res:</li> </ol> <pre><code>// Version am\u00e9lior\u00e9e du comptage des caract\u00e8res\ncaracteres +=ligne.\n\nreplaceAll(\"\\\\s\",\"\").\n\nlength(); // Ignore les espaces\n</code></pre> <ol> <li>Support de diff\u00e9rents types de s\u00e9parateurs de mots:</li> </ol> <pre><code>// Version plus robuste du comptage des mots\nmots +=ligne.\n\ntrim().\n\nsplit(\"[\\\\s,;.]+\").length;\n</code></pre> <ol> <li>Ajout de statistiques suppl\u00e9mentaires:</li> </ol> <ul> <li>Nombre de paragraphes</li> <li>Nombre de caract\u00e8res sans espaces</li> <li>Longueur moyenne des mots</li> <li>Nombre de phrases</li> </ul> <p>Cette impl\u00e9mentation offre une base solide pour l\u2019analyse de fichiers texte, avec une bonne gestion des erreurs et une structure de code claire et maintenable.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-4","title":"Question 4","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-tableau_2","title":"Version avec Tableau","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.Arrays;\n\npublic class TriFichierTableau {\n    /**\n     * Lit toutes les lignes d'un fichier dans un tableau\n     * @param nomFichier le nom du fichier \u00e0 lire\n     * @return un tableau contenant toutes les lignes du fichier\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static String[] lireLignesFichier(String nomFichier) throws IOException {\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        Path path = Paths.get(nomFichier);\n        return Files.readAllLines(path).toArray(new String[0]);\n    }\n\n    /**\n     * Supprime les lignes vides d'un tableau de cha\u00eenes\n     * @param lignes le tableau de lignes \u00e0 traiter\n     * @return un nouveau tableau sans les lignes vides\n     */\n    public static String[] supprimerLignesVides(String[] lignes) {\n        if (lignes == null) {\n            throw new IllegalArgumentException(\"Le tableau de lignes ne peut pas \u00eatre null\");\n        }\n\n        return Arrays.stream(lignes)\n                .filter(ligne -&gt; ligne != null &amp;&amp; !ligne.trim().isEmpty())\n                .sorted()\n                .toArray(String[]::new);\n    }\n\n    /**\n     * Sauvegarde un tableau de lignes dans un fichier\n     * @param lignes le tableau de lignes \u00e0 sauvegarder\n     * @param nomFichier le nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderLignes(String[] lignes, String nomFichier) throws IOException {\n        if (lignes == null) {\n            throw new IllegalArgumentException(\"Le tableau de lignes ne peut pas \u00eatre null\");\n        }\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(new FileWriter(nomFichier))) {\n            for (String ligne : lignes) {\n                writer.println(ligne);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            // Lecture du fichier\n            String[] lignes = lireLignesFichier(\"input.txt\");\n\n            // Traitement et tri\n            String[] lignesTriees = supprimerLignesVides(lignes);\n\n            // Sauvegarde\n            sauvegarderLignes(lignesTriees, \"output.txt\");\n\n            System.out.println(\"Traitement termin\u00e9 avec succ\u00e8s!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur d'entr\u00e9e/sortie: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tre: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-arraylist_2","title":"Version avec ArrayList","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class TriFichierArrayList {\n    /**\n     * Lit toutes les lignes d'un fichier dans une ArrayList\n     * @param nomFichier le nom du fichier \u00e0 lire\n     * @return une ArrayList contenant toutes les lignes du fichier\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static ArrayList&lt;String&gt; lireLignesFichier(String nomFichier) throws IOException {\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        Path path = Paths.get(nomFichier);\n        return new ArrayList&lt;&gt;(Files.readAllLines(path));\n    }\n\n    /**\n     * Supprime les lignes vides d'une ArrayList de cha\u00eenes\n     * @param lignes l'ArrayList de lignes \u00e0 traiter\n     * @return une nouvelle ArrayList sans les lignes vides\n     */\n    public static ArrayList&lt;String&gt; supprimerLignesVides(ArrayList&lt;String&gt; lignes) {\n        if (lignes == null) {\n            throw new IllegalArgumentException(\"La liste de lignes ne peut pas \u00eatre null\");\n        }\n\n        ArrayList&lt;String&gt; resultat = new ArrayList&lt;&gt;();\n\n        for (String ligne : lignes) {\n            if (ligne != null &amp;&amp; !ligne.trim().isEmpty()) {\n                resultat.add(ligne);\n            }\n        }\n\n        Collections.sort(resultat);\n        return resultat;\n    }\n\n    /**\n     * Sauvegarde une ArrayList de lignes dans un fichier\n     * @param lignes l'ArrayList de lignes \u00e0 sauvegarder\n     * @param nomFichier le nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderLignes(ArrayList&lt;String&gt; lignes, String nomFichier) throws IOException {\n        if (lignes == null) {\n            throw new IllegalArgumentException(\"La liste de lignes ne peut pas \u00eatre null\");\n        }\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(new FileWriter(nomFichier))) {\n            for (String ligne : lignes) {\n                writer.println(ligne);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            // Lecture du fichier\n            ArrayList&lt;String&gt; lignes = lireLignesFichier(\"input.txt\");\n\n            // Traitement et tri\n            ArrayList&lt;String&gt; lignesTriees = supprimerLignesVides(lignes);\n\n            // Sauvegarde\n            sauvegarderLignes(lignesTriees, \"output.txt\");\n\n            System.out.println(\"Traitement termin\u00e9 avec succ\u00e8s!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur d'entr\u00e9e/sortie: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tre: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#comparaison-des-versions_2","title":"Comparaison des Versions","text":"<p>Avantages de la version tableau:</p> <ul> <li>Utilisation m\u00e9moire fixe</li> <li>Performance l\u00e9g\u00e8rement meilleure pour les op\u00e9rations de lecture s\u00e9quentielle</li> <li>Utilisation efficace de l\u2019API Stream pour le filtrage et le tri</li> </ul> <p>Avantages de la version ArrayList:</p> <ul> <li>Plus flexible pour les modifications dynamiques</li> <li>Code plus simple \u00e0 comprendre</li> <li>Pas besoin de g\u00e9rer la taille du tableau</li> <li>Plus facile \u00e0 modifier si besoin d\u2019ajouter des fonctionnalit\u00e9s</li> </ul> <p>Test de l\u2019impl\u00e9mentation</p> <p>Cr\u00e9ez un fichier <code>input.txt</code> avec le contenu suivant:</p> <pre><code>Ligne 3\n\nLigne 1\n\nLigne 2\n</code></pre> <p>Le fichier <code>output.txt</code> devrait contenir:</p> <pre><code>Ligne 1\nLigne 2\nLigne 3\n</code></pre> <p>Les deux versions produiront le m\u00eame r\u00e9sultat, avec les lignes tri\u00e9es alphab\u00e9tiquement et sans lignes vides.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-5","title":"Question 5","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-tableau_3","title":"Version avec Tableau","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.Arrays;\n\npublic class FusionFichiersTableau {\n    /**\n     * Fusionne deux fichiers tri\u00e9s en ordre croissant\n     * @param fichier1 premier fichier source\n     * @param fichier2 deuxi\u00e8me fichier source\n     * @return tableau contenant tous les nombres fusionn\u00e9s et tri\u00e9s\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static int[] fusionnerFichiers(String fichier1, String fichier2) throws IOException {\n        if (fichier1 == null || fichier2 == null) {\n            throw new IllegalArgumentException(\"Les noms de fichiers ne peuvent pas \u00eatre null\");\n        }\n\n        // Lecture des fichiers\n        int[] nombres1 = lireFichierNombres(fichier1);\n        int[] nombres2 = lireFichierNombres(fichier2);\n\n        // Cr\u00e9ation du tableau r\u00e9sultat\n        int[] resultat = new int[nombres1.length + nombres2.length];\n\n        // Fusion des tableaux tri\u00e9s\n        int i = 0, j = 0, k = 0;\n        while (i &lt; nombres1.length &amp;&amp; j &lt; nombres2.length) {\n            if (nombres1[i] &lt;= nombres2[j]) {\n                resultat[k++] = nombres1[i++];\n            } else {\n                resultat[k++] = nombres2[j++];\n            }\n        }\n\n        // Ajout des \u00e9l\u00e9ments restants\n        while (i &lt; nombres1.length) {\n            resultat[k++] = nombres1[i++];\n        }\n        while (j &lt; nombres2.length) {\n            resultat[k++] = nombres2[j++];\n        }\n\n        return resultat;\n    }\n\n    /**\n     * Lit un fichier de nombres et retourne un tableau tri\u00e9\n     */\n    private static int[] lireFichierNombres(String nomFichier) throws IOException {\n        return Files.lines(Paths.get(nomFichier))\n                .map(String::trim)\n                .filter(s -&gt; !s.isEmpty())\n                .mapToInt(Integer::parseInt)\n                .sorted()\n                .toArray();\n    }\n\n    /**\n     * Sauvegarde le r\u00e9sultat de la fusion dans un fichier\n     * @param nombres tableau de nombres \u00e0 sauvegarder\n     * @param fichierSortie nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderFusion(int[] nombres, String fichierSortie) throws IOException {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"Le tableau de nombres ne peut pas \u00eatre null\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(new FileWriter(fichierSortie))) {\n            for (int nombre : nombres) {\n                writer.println(nombre);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            int[] nombresFusionnes = fusionnerFichiers(\"fichier1.txt\", \"fichier2.txt\");\n            sauvegarderFusion(nombresFusionnes, \"fusion.txt\");\n            System.out.println(\"Fusion r\u00e9ussie!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur d'entr\u00e9e/sortie: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.err.println(\"Format de nombre invalide: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-arraylist_3","title":"Version avec ArrayList","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class FusionFichiersArrayList {\n    /**\n     * Fusionne deux fichiers tri\u00e9s en ordre croissant\n     * @param fichier1 premier fichier source\n     * @param fichier2 deuxi\u00e8me fichier source\n     * @return ArrayList contenant tous les nombres fusionn\u00e9s et tri\u00e9s\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static ArrayList&lt;Integer&gt; fusionnerFichiers(String fichier1, String fichier2) throws IOException {\n        if (fichier1 == null || fichier2 == null) {\n            throw new IllegalArgumentException(\"Les noms de fichiers ne peuvent pas \u00eatre null\");\n        }\n\n        // Lecture des fichiers\n        ArrayList&lt;Integer&gt; nombres1 = lireFichierNombres(fichier1);\n        ArrayList&lt;Integer&gt; nombres2 = lireFichierNombres(fichier2);\n\n        // Cr\u00e9ation de la liste r\u00e9sultat\n        ArrayList&lt;Integer&gt; resultat = new ArrayList&lt;&gt;();\n\n        // Indices pour la fusion\n        int i = 0, j = 0;\n\n        // Fusion des listes tri\u00e9es\n        while (i &lt; nombres1.size() &amp;&amp; j &lt; nombres2.size()) {\n            if (nombres1.get(i) &lt;= nombres2.get(j)) {\n                resultat.add(nombres1.get(i++));\n            } else {\n                resultat.add(nombres2.get(j++));\n            }\n        }\n\n        // Ajout des \u00e9l\u00e9ments restants\n        while (i &lt; nombres1.size()) {\n            resultat.add(nombres1.get(i++));\n        }\n        while (j &lt; nombres2.size()) {\n            resultat.add(nombres2.get(j++));\n        }\n\n        return resultat;\n    }\n\n    /**\n     * Lit un fichier de nombres et retourne une ArrayList tri\u00e9e\n     */\n    private static ArrayList&lt;Integer&gt; lireFichierNombres(String nomFichier) throws IOException {\n        ArrayList&lt;Integer&gt; nombres = new ArrayList&lt;&gt;();\n\n        Files.lines(Paths.get(nomFichier))\n                .map(String::trim)\n                .filter(s -&gt; !s.isEmpty())\n                .mapToInt(Integer::parseInt)\n                .forEach(nombres::add);\n\n        Collections.sort(nombres);\n        return nombres;\n    }\n\n    /**\n     * Sauvegarde le r\u00e9sultat de la fusion dans un fichier\n     * @param nombres ArrayList de nombres \u00e0 sauvegarder\n     * @param fichierSortie nom du fichier de destination\n     * @throws IOException si une erreur d'\u00e9criture survient\n     */\n    public static void sauvegarderFusion(ArrayList&lt;Integer&gt; nombres, String fichierSortie) throws IOException {\n        if (nombres == null) {\n            throw new IllegalArgumentException(\"La liste de nombres ne peut pas \u00eatre null\");\n        }\n\n        try (PrintWriter writer = new PrintWriter(new FileWriter(fichierSortie))) {\n            for (Integer nombre : nombres) {\n                writer.println(nombre);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            ArrayList&lt;Integer&gt; nombresFusionnes = fusionnerFichiers(\"fichier1.txt\", \"fichier2.txt\");\n            sauvegarderFusion(nombresFusionnes, \"fusion.txt\");\n            System.out.println(\"Fusion r\u00e9ussie!\");\n        } catch (IOException e) {\n            System.err.println(\"Erreur d'entr\u00e9e/sortie: \" + e.getMessage());\n        } catch (NumberFormatException e) {\n            System.err.println(\"Format de nombre invalide: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#comparaison-des-versions_3","title":"Comparaison des Versions","text":"<p>Avantages de la version tableau:</p> <ul> <li>Performance m\u00e9moire optimale pour les grands ensembles de donn\u00e9es</li> <li>Acc\u00e8s direct aux \u00e9l\u00e9ments plus rapide</li> <li>Meilleure performance pour la fusion elle-m\u00eame</li> </ul> <p>Avantages de la version ArrayList:</p> <ul> <li>Code plus flexible et maintenable</li> <li>Pas besoin de g\u00e9rer la taille manuellement</li> <li>Plus facile \u00e0 modifier pour ajouter des fonctionnalit\u00e9s</li> </ul> <p>Test de l\u2019impl\u00e9mentation</p> <p>Cr\u00e9ez deux fichiers de test:</p> <p><code>fichier1.txt</code>:</p> <pre><code>1\n3\n5\n7\n9\n</code></pre> <p><code>fichier2.txt</code>:</p> <pre><code>2\n4\n6\n8\n10\n</code></pre> <p>Le fichier <code>fusion.txt</code> devrait contenir:</p> <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> <p>Les deux versions produiront le m\u00eame r\u00e9sultat, avec tous les nombres tri\u00e9s en ordre croissant.</p>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#question-6","title":"Question 6","text":""},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-tableau_4","title":"Version avec Tableau","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class RechercheMotsTableau {\n    /**\n     * Recherche toutes les occurrences d'un mot dans un fichier\n     * @param mot le mot \u00e0 rechercher\n     * @param nomFichier le nom du fichier \u00e0 analyser\n     * @return tableau contenant les num\u00e9ros des lignes o\u00f9 le mot appara\u00eet\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static int[] rechercherMot(String mot, String nomFichier) throws IOException {\n        if (mot == null || mot.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le mot \u00e0 rechercher ne peut pas \u00eatre null ou vide\");\n        }\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        // Utilisation d'une liste temporaire pour stocker les num\u00e9ros de ligne\n        List&lt;Integer&gt; lignesTrouvees = new ArrayList&lt;&gt;();\n        String motRecherche = mot.toLowerCase().trim();\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            int numeroLigne = 1;\n\n            while ((ligne = reader.readLine()) != null) {\n                if (ligne.toLowerCase().contains(motRecherche)) {\n                    lignesTrouvees.add(numeroLigne);\n                }\n                numeroLigne++;\n            }\n        }\n\n        // Conversion de la liste en tableau\n        return lignesTrouvees.stream().mapToInt(Integer::intValue).toArray();\n    }\n\n    /**\n     * Affiche les r\u00e9sultats de la recherche\n     * @param mot le mot recherch\u00e9\n     * @param lignes tableau des num\u00e9ros de lignes o\u00f9 le mot a \u00e9t\u00e9 trouv\u00e9\n     */\n    public static void afficherResultats(String mot, int[] lignes) {\n        if (mot == null || lignes == null) {\n            throw new IllegalArgumentException(\"Les param\u00e8tres ne peuvent pas \u00eatre null\");\n        }\n\n        if (lignes.length == 0) {\n            System.out.printf(\"Le mot '%s' n'a pas \u00e9t\u00e9 trouv\u00e9 dans le fichier.%n\", mot);\n            return;\n        }\n\n        System.out.printf(\"Le mot '%s' a \u00e9t\u00e9 trouv\u00e9 %d fois:%n\", mot, lignes.length);\n        for (int ligne : lignes) {\n            System.out.printf(\"- Ligne %d%n\", ligne);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String motRecherche = \"exemple\";\n            int[] lignesTrouvees = rechercherMot(motRecherche, \"texte.txt\");\n            afficherResultats(motRecherche, lignesTrouvees);\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tre: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#version-avec-arraylist_4","title":"Version avec ArrayList","text":"<pre><code>import java.io.*;\nimport java.nio.file.*;\nimport java.util.ArrayList;\n\npublic class RechercheMotsArrayList {\n    /**\n     * Recherche toutes les occurrences d'un mot dans un fichier\n     * @param mot le mot \u00e0 rechercher\n     * @param nomFichier le nom du fichier \u00e0 analyser\n     * @return ArrayList contenant les num\u00e9ros des lignes o\u00f9 le mot appara\u00eet\n     * @throws IOException si une erreur de lecture survient\n     */\n    public static ArrayList&lt;Integer&gt; rechercherMot(String mot, String nomFichier) throws IOException {\n        if (mot == null || mot.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le mot \u00e0 rechercher ne peut pas \u00eatre null ou vide\");\n        }\n        if (nomFichier == null || nomFichier.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Le nom du fichier ne peut pas \u00eatre null ou vide\");\n        }\n\n        ArrayList&lt;Integer&gt; lignesTrouvees = new ArrayList&lt;&gt;();\n        String motRecherche = mot.toLowerCase().trim();\n\n        try (BufferedReader reader = new BufferedReader(new FileReader(nomFichier))) {\n            String ligne;\n            int numeroLigne = 1;\n\n            while ((ligne = reader.readLine()) != null) {\n                if (ligne.toLowerCase().contains(motRecherche)) {\n                    lignesTrouvees.add(numeroLigne);\n                }\n                numeroLigne++;\n            }\n        }\n\n        return lignesTrouvees;\n    }\n\n    /**\n     * Affiche les r\u00e9sultats de la recherche\n     * @param mot le mot recherch\u00e9\n     * @param lignes ArrayList des num\u00e9ros de lignes o\u00f9 le mot a \u00e9t\u00e9 trouv\u00e9\n     */\n    public static void afficherResultats(String mot, ArrayList&lt;Integer&gt; lignes) {\n        if (mot == null || lignes == null) {\n            throw new IllegalArgumentException(\"Les param\u00e8tres ne peuvent pas \u00eatre null\");\n        }\n\n        if (lignes.isEmpty()) {\n            System.out.printf(\"Le mot '%s' n'a pas \u00e9t\u00e9 trouv\u00e9 dans le fichier.%n\", mot);\n            return;\n        }\n\n        System.out.printf(\"Le mot '%s' a \u00e9t\u00e9 trouv\u00e9 %d fois:%n\", mot, lignes.size());\n        for (int ligne : lignes) {\n            System.out.printf(\"- Ligne %d%n\", ligne);\n        }\n    }\n\n    /**\n     * Version am\u00e9lior\u00e9e qui retourne aussi le contexte\n     */\n    public static ArrayList&lt;String&gt; rechercherMotAvecContexte(String mot, String nomFichier, int contexteLignes)\n            throws IOException {\n        ArrayList&lt;String&gt; resultats = new ArrayList&lt;&gt;();\n        String motRecherche = mot.toLowerCase().trim();\n\n        List&lt;String&gt; toutesLignes = Files.readAllLines(Paths.get(nomFichier));\n\n        for (int i = 0; i &lt; toutesLignes.size(); i++) {\n            if (toutesLignes.get(i).toLowerCase().contains(motRecherche)) {\n                StringBuilder contexte = new StringBuilder();\n\n                // Ajout du contexte avant\n                for (int j = Math.max(0, i - contexteLignes); j &lt; i; j++) {\n                    contexte.append(String.format(\"  %d: %s%n\", j + 1, toutesLignes.get(j)));\n                }\n\n                // Ligne avec le mot trouv\u00e9\n                contexte.append(String.format(\"\u2192 %d: %s%n\", i + 1, toutesLignes.get(i)));\n\n                // Ajout du contexte apr\u00e8s\n                for (int j = i + 1; j &lt;= Math.min(toutesLignes.size() - 1, i + contexteLignes); j++) {\n                    contexte.append(String.format(\"  %d: %s%n\", j + 1, toutesLignes.get(j)));\n                }\n\n                resultats.add(contexte.toString());\n            }\n        }\n\n        return resultats;\n    }\n\n    public static void main(String[] args) {\n        try {\n            String motRecherche = \"exemple\";\n\n            // Version simple\n            ArrayList&lt;Integer&gt; lignesTrouvees = rechercherMot(motRecherche, \"texte.txt\");\n            afficherResultats(motRecherche, lignesTrouvees);\n\n            // Version avec contexte\n            System.out.println(\"\\nRecherche avec contexte (2 lignes avant/apr\u00e8s):\");\n            ArrayList&lt;String&gt; resultatsAvecContexte = rechercherMotAvecContexte(motRecherche, \"texte.txt\", 2);\n            for (String contexte : resultatsAvecContexte) {\n                System.out.println(contexte);\n            }\n\n        } catch (IOException e) {\n            System.err.println(\"Erreur lors de la lecture du fichier: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Erreur de param\u00e8tre: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"A.%20Les%20bases%20en%20Java/Exercices/Solutions/02-exercices_solutions/#comparaison-des-versions_4","title":"Comparaison des Versions","text":"<p>Avantages de la version tableau:</p> <ul> <li>Performance m\u00e9moire l\u00e9g\u00e8rement meilleure</li> <li>Acc\u00e8s direct aux \u00e9l\u00e9ments plus rapide</li> <li>Plus simple pour les op\u00e9rations de base</li> </ul> <p>Avantages de la version ArrayList:</p> <ul> <li>Plus flexible pour ajouter/supprimer des r\u00e9sultats</li> <li>Facilit\u00e9 d\u2019extension (comme montr\u00e9 avec la version avec contexte)</li> <li>Code plus lisible et maintenable</li> </ul> <p>Test de l\u2019impl\u00e9mentation</p> <p>Cr\u00e9ez un fichier <code>texte.txt</code> avec le contenu suivant:</p> <pre><code>Ceci est un exemple de texte\npour tester notre programme.\nIl contient plusieurs lignes\navec le mot exemple r\u00e9p\u00e9t\u00e9\n\u00e0 diff\u00e9rents endroits du texte.\nVoici un autre exemple.\n</code></pre> <p>Les deux versions produiront des r\u00e9sultats similaires, mais la version ArrayList offre plus de flexibilit\u00e9 pour des fonctionnalit\u00e9s avanc\u00e9es comme l\u2019affichage du contexte.</p> <p>La version avec ArrayList inclut \u00e9galement une am\u00e9lioration significative avec la m\u00e9thode <code>rechercherMotAvecContexte</code> qui montre les lignes avant et apr\u00e8s chaque occurrence du mot recherch\u00e9, ce qui est tr\u00e8s utile pour comprendre le contexte des r\u00e9sultats.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/01-bases/","title":"\ud83d\udd381\ud83d\udd38Programmation OO","text":"<p>La programmation orient\u00e9e objet (POO) est une approche de programmation qui organise le code autour du concept d\u2019objets, qui sont des instances de classes.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/01-bases/#classes-et-objets","title":"Classes et Objets","text":"<p>Une classe est un mod\u00e8le qui d\u00e9finit la structure et le comportement d\u2019un type d\u2019objet. Elle contient des attributs (donn\u00e9es) et des m\u00e9thodes (comportements). Par exemple, la classe <code>String</code> en Java d\u00e9finit la structure d\u2019une cha\u00eene de caract\u00e8res.</p> <p>Un objet est une instance concr\u00e8te d\u2019une classe. Par exemple :</p> <pre><code>String message = new String(\"Bonjour\");\n</code></pre> <p>Dans cet exemple :</p> <ul> <li><code>String</code> est la classe</li> <li><code>message</code> est une variable qui r\u00e9f\u00e9rence l\u2019objet</li> <li><code>new String(\"Bonjour\")</code> cr\u00e9e une nouvelle instance</li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/01-bases/#constructeurs","title":"Constructeurs","text":"<p>Un constructeur est une m\u00e9thode sp\u00e9ciale qui est appel\u00e9e lors de la cr\u00e9ation d\u2019un objet avec le mot-cl\u00e9 <code>new</code>. Il porte le m\u00eame nom que la classe et initialise les attributs de l\u2019objet.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/01-bases/#exemple-pratique-avec-la-classe-personne","title":"Exemple Pratique avec la Classe Personne","text":"<p>Voici un exemple simple d\u2019une classe <code>Personne</code> :</p> <pre><code>public class Personne {\n    // Attributs\n    public String nom;\n    public String prenom;\n    public int age;\n\n    // Constructeur\n    public Personne(String nom, String prenom, int age) {\n        this.nom = nom;\n        this.prenom = prenom;\n        this.age = age;\n    }\n\n    // M\u00e9thode suppl\u00e9mentaire\n    public void sePresenter() {\n        System.out.println(\"Je m'appelle \" + prenom + \" \" + nom +\n                \" et j'ai \" + age + \" ans\");\n    }\n}\n</code></pre> <p>Pour utiliser cette classe, on peut cr\u00e9er des instances comme ceci :</p> <pre><code>Personne etudiant = new Personne(\"Dupont\", \"Jean\", 20);\netudiant.sePresenter();\n</code></pre> <p>Dans cet exemple :</p> <ul> <li>Les attributs <code>nom</code>, <code>prenom</code> et <code>age</code> sont publics (nous verrons plus tard pourquoi c\u2019est g\u00e9n\u00e9ralement d\u00e9conseill\u00e9)</li> <li>Le constructeur prend trois param\u00e8tres pour initialiser les attributs</li> <li>La m\u00e9thode <code>sePresenter()</code> affiche les informations de la personne</li> </ul> <p>Cette introduction aux concepts de base de la POO permet de comprendre comment les classes servent de mod\u00e8les pour cr\u00e9er des objets qui contiennent \u00e0 la fois des donn\u00e9es (attributs) et des comportements (m\u00e9thodes).</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/","title":"\ud83d\udd382\ud83d\udd38Mot-cl\u00e9 <code>static</code>","text":"<p>Le mot-cl\u00e9 <code>static</code> est un modificateur qui permet de d\u00e9finir des \u00e9l\u00e9ments (attributs ou m\u00e9thodes) qui appartiennent \u00e0 la classe elle-m\u00eame plut\u00f4t qu\u2019aux instances de cette classe[1].</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/#attributs-statiques","title":"Attributs Statiques","text":"<p>Un attribut statique poss\u00e8de les caract\u00e9ristiques suivantes :</p> <ul> <li>Une seule copie de la variable est cr\u00e9\u00e9e et partag\u00e9e entre tous les objets de la classe[1]</li> <li>Il existe d\u00e8s que la classe est charg\u00e9e en m\u00e9moire, avant m\u00eame la cr\u00e9ation d\u2019instances[2]</li> <li>Il est accessible directement par le nom de la classe, sans cr\u00e9er d\u2019instance[1]</li> </ul> <p>Par exemple :</p> <pre><code>public class Compteur {\n    public static int nombreTotal = 0;\n\n    public Compteur() {\n        nombreTotal++; // Incr\u00e9mente le compteur partag\u00e9\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/#methodes-statiques","title":"M\u00e9thodes Statiques","text":"<p>Une m\u00e9thode statique a plusieurs caract\u00e9ristiques importantes :</p> <ul> <li>Elle appartient \u00e0 la classe et non aux instances[3]</li> <li>Elle ne peut acc\u00e9der qu\u2019aux autres membres statiques de la classe[3]</li> <li>Elle ne peut pas utiliser les mots-cl\u00e9s <code>this</code> ou <code>super</code>[1]</li> <li>Elle est appel\u00e9e directement sur la classe, sans cr\u00e9er d\u2019instance[3]</li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/#pourquoi-main-est-static","title":"Pourquoi main() est Static","text":"<p>La m\u00e9thode <code>main</code> doit \u00eatre statique car elle doit pouvoir \u00eatre ex\u00e9cut\u00e9e par la JVM avant la cr\u00e9ation de toute instance de classe[3]. Comme elle est le point d\u2019entr\u00e9e du programme, elle doit \u00eatre accessible sans avoir besoin d\u2019instancier la classe qui la contient[2].</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/#exemple-dutilisation","title":"Exemple d\u2019Utilisation","text":"<pre><code>public class Exemple {\n    public static int compteur = 0;  // Variable statique\n\n    public static void incrementer() {  // M\u00e9thode statique\n        compteur++;\n    }\n}\n</code></pre> <pre><code>// Utilisation\nExemple.incrementer();  // Appel sans instance\nSystem.out.println(Exemple.compteur);  // Acc\u00e8s direct\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/02-static/#citations","title":"Citations","text":"<ul> <li>[1] https://waytolearnx.com/2018/11/le-mot-cle-static-en-java.html</li> <li>[2] https://perso.telecom-paristech.fr/hudry/coursJava/avance/static.html</li> <li>[3] https://www.guru99.com/fr/static-variable-in-java.html</li> <li>[4] https://javarush.com/fr/groups/posts/fr.3874.pause-caf-142-quel-rle-le-mot-cl-static-joue-t-il-en-java-</li> <li>[5] https://blog.paumard.org/cours/java/chap04-structure-classe-statique.html</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/03-eviter_public/","title":"\ud83d\udd383\ud83d\udd38\u00c9viter <code>public</code> si possible","text":""},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/03-eviter_public/#pourquoi-eviter-les-attributs-publics","title":"Pourquoi \u00c9viter les Attributs Publics","text":"<p>Les attributs publics posent plusieurs probl\u00e8mes importants :</p> <ul> <li>Ils permettent la modification directe des donn\u00e9es sans aucun contr\u00f4le</li> <li>Ils ne garantissent pas la coh\u00e9rence des donn\u00e9es de l\u2019objet</li> <li>Ils violent le principe d\u2019encapsulation o\u00f9 un objet doit \u00eatre responsable de sa propre coh\u00e9rence[1]</li> </ul> <p>Par exemple, avec des attributs publics, on pourrait faire : <pre><code>Personne personne = new Personne();\npersonne.age = -8; // Valeur invalide mais accept\u00e9e\n</code></pre></p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/03-eviter_public/#solution-encapsulation-avec-accesseurs-et-mutateurs","title":"Solution : Encapsulation avec Accesseurs et Mutateurs","text":"<p>Pour prot\u00e9ger les donn\u00e9es tout en permettant leur acc\u00e8s contr\u00f4l\u00e9, on utilise :</p> <p>Accesseurs (getters) : <pre><code>public class Personne {\n    private int age;\n\n    public int getAge() {\n        return age;\n    }\n}\n</code></pre></p> <p>Mutateurs (setters) : <pre><code>public class Personne {\n    private int age;\n\n    public void setAge(int age) {\n        if (age &gt; 0 &amp;&amp; age &lt; 125) {  // Validation des donn\u00e9es\n            this.age = age;\n        }\n    }\n}\n</code></pre></p> <p>Cette approche offre plusieurs avantages :</p> <ul> <li>Contr\u00f4le de la validit\u00e9 des donn\u00e9es avant modification[1]</li> <li>Protection de l\u2019int\u00e9grit\u00e9 des donn\u00e9es de l\u2019objet[3]</li> <li>Possibilit\u00e9 de modifier l\u2019impl\u00e9mentation interne sans affecter le code client</li> <li>Capacit\u00e9 d\u2019ajouter des traitements suppl\u00e9mentaires lors de l\u2019acc\u00e8s ou de la modification</li> </ul> <p>En utilisant cette approche, l\u2019objet maintient le contr\u00f4le sur ses donn\u00e9es tout en fournissant une interface claire pour y acc\u00e9der et les modifier de mani\u00e8re s\u00e9curis\u00e9e.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/03-eviter_public/#citations","title":"Citations","text":"<ul> <li>[1] https://prog101.com/exemples/csharp/poo/attribut-prive-public.php</li> <li>[2] https://www.louismarchand.me/index.php/2021/06/25/pourquoi-je-naime-pas-la-portee-privee/</li> <li>[3] https://datascientest.com/programmation-orientee-objet-guide-ultime</li> <li>[4] https://jmdoudoux.developpez.com/cours/developpons/java/chap-poo.php</li> <li>[5] https://www.jmdoudoux.fr/java/dej/chap-poo.htm</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/","title":"\ud83d\udd384\ud83d\udd38Validation dans les mutateurs","text":"<p>L\u2019utilisation d\u2019exceptions pour g\u00e9rer les cas invalides est souvent pr\u00e9f\u00e9rable car elle force le code appelant \u00e0 g\u00e9rer explicitement les erreurs, contrairement \u00e0 un retour silencieux qui pourrait passer inaper\u00e7u.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#version-avec-exception","title":"Version avec Exception","text":"<p>D\u2019abord, d\u00e9finissons une exception personnalis\u00e9e :</p> <pre><code>public class AgeInvalideException extends Exception {\n    public AgeInvalideException(String message) {\n        super(message);\n    }\n}\n</code></pre> <p>Ensuite, modifions le setter pour utiliser cette exception :</p> <pre><code>public class Personne {\n    private int age;\n\n    public void setAge(int age) throws AgeInvalideException {\n        if (age &lt; 0) {\n            throw new AgeInvalideException(\"L'\u00e2ge ne peut pas \u00eatre n\u00e9gatif\");\n        }\n        if (age &gt; 125) {\n            throw new AgeInvalideException(\"L'\u00e2ge ne peut pas d\u00e9passer 125 ans\");\n        }\n        this.age = age;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#utilisation","title":"Utilisation","text":"<pre><code>Personne personne = new Personne();\ntry {\n        personne.setAge(-5);\n} catch(AgeInvalideException e) {\n        System.out.println(\"Erreur : \"+e.getMessage());\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#avantages-de-lapproche-par-exception","title":"Avantages de l\u2019Approche par Exception","text":"<p>Cette approche est plus appropri\u00e9e car :</p> <ul> <li>Elle rend explicite le fait qu\u2019une erreur peut survenir</li> <li>Elle force le code appelant \u00e0 g\u00e9rer le cas d\u2019erreur (soit avec try-catch, soit en propageant l\u2019exception)</li> <li>Elle permet de transmettre des informations d\u00e9taill\u00e9es sur l\u2019erreur</li> <li>Elle s\u00e9pare clairement le code de gestion des erreurs du code normal</li> <li>Elle permet de traiter l\u2019erreur \u00e0 n\u2019importe quel niveau de la pile d\u2019appel</li> </ul> <p>Cette version est particuli\u00e8rement utile dans un syst\u00e8me plus large o\u00f9 la validation des donn\u00e9es est critique et o\u00f9 les erreurs doivent \u00eatre g\u00e9r\u00e9es de mani\u00e8re appropri\u00e9e plut\u00f4t que d\u2019\u00eatre ignor\u00e9es.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#inconvenients-potentiels","title":"Inconv\u00e9nients Potentiels","text":"<p>L\u2019utilisation d\u2019exceptions dans la validation de l\u2019\u00e2ge pr\u00e9sente quelques inconv\u00e9nients :</p> <ul> <li>Le flot d\u2019ex\u00e9cution devient non lin\u00e9aire et plus complexe \u00e0 suivre[1]</li> <li>La gestion des exceptions peut rendre le code plus verbeux avec les blocs <code>try-catch</code></li> <li>Les exceptions peuvent impacter l\u00e9g\u00e8rement les performances si elles sont fr\u00e9quemment lanc\u00e9es</li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#pourquoi-les-avantages-lemportent","title":"Pourquoi les Avantages l\u2019Emportent","text":"<p>Malgr\u00e9 ces inconv\u00e9nients, l\u2019utilisation d\u2019exceptions reste appropri\u00e9e ici car :</p> <ul> <li>La validation de l\u2019\u00e2ge repr\u00e9sente une condition exceptionnelle qui sort du flux normal d\u2019ex\u00e9cution[3]</li> <li>Les exceptions permettent de s\u00e9parer clairement le code de gestion des erreurs du code normal[3]</li> <li>Elles fournissent un m\u00e9canisme clair pour communiquer les erreurs aux niveaux sup\u00e9rieurs du programme[3]</li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#alternative-et-conclusion","title":"Alternative et Conclusion","text":"<p>Une approche alternative serait d\u2019utiliser un syst\u00e8me de validation de donn\u00e9es avec des contraintes[5], mais pour un  cas simple comme la validation de l\u2019\u00e2ge, les exceptions offrent une solution claire et efficace. Les inconv\u00e9nients sont mineurs compar\u00e9s \u00e0 l\u2019avantage d\u2019avoir un code plus robuste et plus explicite dans la gestion des erreurs.</p> <p>L\u2019utilisation d\u2019exceptions est particuli\u00e8rement pertinente ici car il s\u2019agit d\u2019une validation de donn\u00e9es qui peut  \u00e9chouer en raison de facteurs externes (entr\u00e9es utilisateur)[3], ce qui correspond exactement au cas d\u2019usage recommand\u00e9 pour la gestion des exceptions.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/04-validation/#citations","title":"Citations","text":"<ul> <li>[1] https://www.osedea.com/fr/perspective/gerer-et-reduire-les-exceptions</li> <li>[2] https://fr.wikipedia.org/wiki/Syst%C3%A8me_de_gestion_d\u2019exceptions</li> <li>[3] https://canada.lenovo.com/fr/ca/en/glossary/exception-handling/</li> <li>[4] https://javarush.com/fr/groups/posts/fr.701.erreurs-courantes-dans-la-gestion-des-exceptions</li> <li>[5] https://www.jmdoudoux.fr/java/dej/chap-validation_donnees.htm</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/","title":"\ud83d\udd385\ud83d\udd38Le mot-cl\u00e9 <code>this</code>","text":"<p>Voici une version am\u00e9lior\u00e9e de la classe Personne utilisant la classe <code>LocalDate</code> de Java pour g\u00e9rer les dates.</p> <pre><code>import java.time.LocalDate;\n\npublic class Personne {\n    private String nom;\n    private String prenom;\n    private LocalDate dateNaissance;\n\n    // Constructeur complet\n    public Personne(String nom, String prenom, LocalDate dateNaissance) {\n        this.nom = nom;\n        this.prenom = prenom;\n        this.dateNaissance = dateNaissance;\n    }\n\n    // Constructeur qui appelle l'autre constructeur avec la date d'aujourd'hui\n    public Personne(String nom, String prenom) {\n        this(nom, prenom, LocalDate.now());\n    }\n\n    // Accesseurs et mutateurs\n    public String getNom() {\n        return nom;\n    }\n\n    public void setNom(String nom) {\n        this.nom = nom;\n    }\n\n    public String getPrenom() {\n        return prenom;\n    }\n\n    public void setPrenom(String prenom) {\n        this.prenom = prenom;\n    }\n\n    public LocalDate getDateNaissance() {\n        return dateNaissance;\n    }\n\n    public void setDateNaissance(LocalDate dateNaissance) {\n        this.dateNaissance = dateNaissance;\n    }\n\n    // M\u00e9thode utilitaire pour calculer l'\u00e2ge\n    public int getAge() {\n        return LocalDate.now().getYear() - dateNaissance.getYear();\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#utilisation","title":"Utilisation","text":"<pre><code>// Cr\u00e9ation avec date sp\u00e9cifique\nLocalDate dateNaissance = LocalDate.of(2000, 1, 15);\nPersonne personne1 = new Personne(\"Dupont\", \"Jean\", dateNaissance);\n\n// Cr\u00e9ation sans date (utilisera la date d'aujourd'hui)\nPersonne personne2 = new Personne(\"Martin\", \"Marie\");\n</code></pre> <p>Points importants dans cet exemple :</p> <ul> <li>L\u2019utilisation de <code>this()</code> pour appeler un autre constructeur</li> <li>L\u2019utilisation de <code>LocalDate</code> pour une gestion robuste des dates</li> <li>Les attributs sont priv\u00e9s avec leurs accesseurs et mutateurs</li> <li>Une m\u00e9thode utilitaire <code>getAge()</code> qui calcule l\u2019\u00e2ge \u00e0 partir de la date de naissance</li> </ul> <p>Note</p> <p>Le calcul de l\u2019\u00e2ge dans cet exemple est simplifi\u00e9. Pour un calcul plus pr\u00e9cis, il faudrait tenir compte des mois et des jours.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#le-mot-cle-this","title":"Le mot-cl\u00e9 <code>this</code>","text":"<p><code>this</code> est une r\u00e9f\u00e9rence \u00e0 l\u2019objet courant, utilisable uniquement dans les m\u00e9thodes d\u2019instance (non-statiques). Il repr\u00e9sente l\u2019instance de la classe qui ex\u00e9cute le code.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#references-et-objets","title":"R\u00e9f\u00e9rences et Objets","text":"<pre><code>public class Personne {\n    private String nom;\n\n    public void setNom(String nom) {\n        this.nom = nom;  // this.nom r\u00e9f\u00e8re \u00e0 l'attribut de l'instance\n    }\n}\n\n// Utilisation avec plusieurs r\u00e9f\u00e9rences\nPersonne p1 = new Personne();\nPersonne p2 = p1;  // p2 r\u00e9f\u00e8re au m\u00eame objet que p1\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#differents-usages-de-this","title":"Diff\u00e9rents Usages de <code>this</code>","text":"<p>1. Distinguer les attributs des param\u00e8tres :</p> <pre><code>public class Personne {\n    private String nom;\n\n    public Personne(String nom) {\n        this.nom = nom;  // Sans this, nom r\u00e9f\u00e9rerait au param\u00e8tre\n    }\n}\n</code></pre> <p>2. Appeler un autre constructeur :</p> <pre><code>public class Personne {\n    private String nom;\n    private int age;\n\n    public Personne(String nom) {\n        this(nom, 0);  // Appelle l'autre constructeur\n    }\n\n    public Personne(String nom, int age) {\n        this.nom = nom;\n        this.age = age;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#references-multiples","title":"R\u00e9f\u00e9rences Multiples","text":"<pre><code>Personne p1 = new Personne(\"Alice\");\nPersonne p2 = p1;  // Nouvelle r\u00e9f\u00e9rence au m\u00eame objet\np2.setNom(\"Bob\");  // Modifie l'objet via p2\nSystem.out.println(p1.getNom());  // Affiche \"Bob\" car p1 et p2 r\u00e9f\u00e8rent au m\u00eame objet\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/05-this/#comportement-des-references","title":"Comportement des R\u00e9f\u00e9rences","text":"<pre><code>public class ExempleReferences {\n    public static void modifierPersonne(Personne p) {\n        p.setNom(\"Charlie\");  // Modifie l'objet original\n        p = new Personne(\"David\");  // Cr\u00e9e un nouvel objet, ne modifie pas la r\u00e9f\u00e9rence originale\n    }\n\n    public static void main(String[] args) {\n        Personne p1 = new Personne(\"Alice\");\n        modifierPersonne(p1);\n        System.out.println(p1.getNom());  // Affiche \"Charlie\"\n    }\n}\n</code></pre> <p>Dans cet exemple :</p> <ul> <li>La modification via une r\u00e9f\u00e9rence affecte l\u2019objet pour toutes les r\u00e9f\u00e9rences</li> <li>La r\u00e9affectation d\u2019une r\u00e9f\u00e9rence n\u2019affecte pas les autres r\u00e9f\u00e9rences au m\u00eame objet</li> <li><code>this</code> reste toujours une r\u00e9f\u00e9rence \u00e0 l\u2019objet courant, peu importe le nombre de r\u00e9f\u00e9rences externes</li> </ul> <p>Cette compr\u00e9hension des r\u00e9f\u00e9rences est fondamentale en POO car elle explique comment les objets sont partag\u00e9s et modifi\u00e9s \u00e0 travers le programme.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/","title":"\ud83d\udd386\ud83d\udd38Mots-cl\u00e9s de port\u00e9e","text":""},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#resume-des-portees","title":"R\u00e9sum\u00e9 des Port\u00e9es","text":"Modificateur Classe Package Sous-classe Partout private \u2713 \u2717 \u2717 \u2717 (default) \u2713 \u2713 \u2717 \u2717 protected \u2713 \u2713 \u2713 \u2717 public \u2713 \u2713 \u2713 \u2713"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#details-des-modificateurs-dacces","title":"D\u00e9tails des Modificateurs d\u2019Acc\u00e8s","text":""},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#private","title":"<code>private</code>","text":"<ul> <li>Acc\u00e8s limit\u00e9 uniquement \u00e0 l\u2019int\u00e9rieur de la classe d\u00e9clarante</li> <li>Utilis\u00e9 principalement pour les attributs afin d\u2019assurer l\u2019encapsulation</li> </ul> <pre><code>public class Compte {\n    private double solde;  // Accessible uniquement dans Compte\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#default-pas-de-modificateur","title":"<code>default</code> (pas de modificateur)","text":"<ul> <li>Acc\u00e8s limit\u00e9 au package (aussi appel\u00e9 \u201cpackage-private\u201d)</li> <li>C\u2019est la port\u00e9e par d\u00e9faut quand aucun modificateur n\u2019est sp\u00e9cifi\u00e9</li> </ul> <pre><code>class Utilitaire {  // Accessible uniquement dans le m\u00eame package\n    int valeur;     // \u00c9galement accessible uniquement dans le package\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#protected","title":"<code>protected</code>","text":"<ul> <li>Accessible dans le package et par les sous-classes</li> <li>Utile pour permettre l\u2019h\u00e9ritage tout en limitant l\u2019acc\u00e8s public</li> </ul> <pre><code>public class Animal {\n    protected void respirer() {  // Accessible aux sous-classes\n        // code\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#public","title":"<code>public</code>","text":"<ul> <li>Accessible partout</li> <li>Utilis\u00e9 pour les interfaces publiques des classes</li> </ul> <pre><code>public class Client {\n    public String getNom() {  // Accessible de partout\n        return nom;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#bonnes-pratiques","title":"Bonnes Pratiques","text":"<ul> <li>Utiliser <code>private</code> pour les attributs (encapsulation)</li> <li>Utiliser <code>public</code> pour les m\u00e9thodes qui font partie de l\u2019interface publique</li> <li>Utiliser <code>protected</code> avec parcimonie, seulement quand l\u2019h\u00e9ritage le justifie</li> <li>La port\u00e9e par d\u00e9faut est utile pour les classes utilitaires internes au package</li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/06-portees/#exemple-complet","title":"Exemple Complet","text":"<pre><code>public class Employe {\n    private String nom;           // Accessible uniquement dans cette classe\n    protected double salaire;     // Accessible dans les sous-classes\n    String departement;          // Accessible dans le package\n\n    public String getId();       // Accessible partout\n}\n</code></pre> <p>Cette hi\u00e9rarchie de port\u00e9es permet de contr\u00f4ler pr\u00e9cis\u00e9ment la visibilit\u00e9 des \u00e9l\u00e9ments et de maintenir un bon niveau d\u2019encapsulation dans le code.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/","title":"\ud83d\udd387\ud83d\udd38Les \u00e9num\u00e9rations (enum) en Java","text":"<p>Une \u00e9num\u00e9ration est un type sp\u00e9cial qui d\u00e9finit un ensemble fixe de constantes. Voici un exemple basique d\u2019\u00e9num\u00e9ration des saisons :</p> <pre><code>public enum Saison {\n    PRINTEMPS,\n    ETE,\n    AUTOMNE,\n    HIVER\n}\n</code></pre> <p>Pour utiliser cette \u00e9num\u00e9ration :</p> <pre><code>Saison saison = Saison.PRINTEMPS;\nif(saison == Saison.PRINTEMPS) {\n    System.out.println(\"C'est le printemps!\");\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/#enumerations-avancees","title":"\u00c9num\u00e9rations avanc\u00e9es","text":"<p>Les \u00e9num\u00e9rations en Java peuvent \u00eatre plus sophistiqu\u00e9es en incluant des attributs, des constructeurs et des m\u00e9thodes.</p>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/#attributs-et-constructeurs","title":"Attributs et constructeurs","text":"<p>Dans l\u2019exemple de <code>Couleur</code>, qui repr\u00e9sente les 4 couleurs possibles dans un jeu de cartes standard, chaque constante  est associ\u00e9e \u00e0 un symbole :</p> <pre><code>public enum Couleur {\n    COEUR(\"\u2665\"),    // Appelle le constructeur avec \"\u2665\"\n    CARREAU(\"\u2666\"),  // Appelle le constructeur avec \"\u2666\"\n    PIQUE(\"\u2660\"),    // Appelle le constructeur avec \"\u2660\"\n    TREFLE(\"\u2663\");   // Appelle le constructeur avec \"\u2663\"\n\n    private final String symbole;  // Attribut priv\u00e9\n\n    Couleur(String symbole) {      // Constructeur\n        this.symbole = symbole;\n    }\n\n    public String getSymbole() {   // M\u00e9thode d'acc\u00e8s\n        return symbole;\n    }\n}\n</code></pre> <p>Dans l\u2019exemple de <code>NomCarte</code>, qui repr\u00e9sente les 13 noms de carte possibles dans un jeu de cartes standard, chaque  constante \u00e0 une valeur :</p> <pre><code>public enum NomCarte {\n    AS(1),\n    DEUX(2),\n    TROIS(3),\n    QUATRE(4),\n    CINQ(5),\n    SIX(6),\n    SEPT(7),\n    HUIT(8),\n    NEUF(9),\n    DIX(10),\n    VALET(10),\n    DAME(10),\n    ROI(10);\n\n    private final int valeur;\n\n    NomCarte(int valeur) {\n        this.valeur = valeur;\n    }\n\n    public int getValeur() {\n        return valeur;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/#utilisation-avancee","title":"Utilisation avanc\u00e9e","text":"<p>Voici comment utiliser les \u00e9num\u00e9rations <code>Couleur</code> et <code>NomCarte</code> :</p> <pre><code>Couleur couleur = Couleur.COEUR;\nSystem.out.println(couleur.getSymbole());  // Affiche: \u2665\n\nNomCarte carte = NomCarte.AS;\nSystem.out.println(carte.getValeur());     // Affiche: 1\n</code></pre>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/#points-importants","title":"Points importants","text":"<ul> <li>Les constructeurs d\u2019un <code>enum</code> sont toujours priv\u00e9s (m\u00eame si on ne met pas le mot-cl\u00e9 <code>private</code>)</li> <li>Les constantes d\u2019un <code>enum</code> doivent \u00eatre d\u00e9clar\u00e9es en premier dans la classe</li> <li>Chaque constante est une instance unique de l\u2019\u00e9num\u00e9ration</li> <li>Les \u00e9num\u00e9rations h\u00e9ritent implicitement de <code>java.lang.Enum</code></li> </ul>"},{"location":"B.%20Programmation%20OO/1.%20Les%20bases%20en%20OO/07-enum/#methodes-utiles-heritees","title":"M\u00e9thodes utiles h\u00e9rit\u00e9es","text":"<ul> <li><code>name()</code>: retourne le nom de la constante</li> <li><code>ordinal()</code>: retourne la position (commence \u00e0 0)</li> <li><code>values()</code>: retourne un tableau de toutes les constantes</li> <li><code>valueOf(String)</code>: convertit une cha\u00eene en constante</li> </ul> <pre><code>// Exemple d'utilisation des m\u00e9thodes h\u00e9rit\u00e9es\nfor(NomCarte carte : NomCarte.values()){\n    System.out.printf(\"%s a la valeur %d%n\", carte.name(),carte.getValeur());\n}\n</code></pre> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/01-heritage/","title":"\ud83d\udd381\ud83d\udd38L\u2019h\u00e9ritage","text":"<p>L\u2019h\u00e9ritage est un concept fondamental en programmation orient\u00e9e objet qui permet de cr\u00e9er une nouvelle classe \u00e0 partir d\u2019une classe existante. La nouvelle classe h\u00e9rite des attributs et m\u00e9thodes de la classe parente.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/01-heritage/#exemple-avec-la-classe-personne","title":"Exemple avec la classe Personne","text":"<p>Commen\u00e7ons par une classe de base <code>Personne</code> :</p> <pre><code>public class Personne {\n    private String nom;\n    private String prenom;\n    private int age;\n\n    public Personne(String nom, String prenom, int age) {\n        this.nom = nom;\n        this.prenom = prenom;\n        this.age = age;\n    }\n\n    // Accesseurs\n    public String getNom() {\n        return nom;\n    }\n\n    public String getPrenom() {\n        return prenom;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    // Mutateurs\n    public void setNom(String nom) {\n        this.nom = nom;\n    }\n\n    public void setPrenom(String prenom) {\n        this.prenom = prenom;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String toString() {\n        return prenom + \" \" + nom + \" (\" + age + \" ans)\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/01-heritage/#premiere-sous-classe-etudiant","title":"Premi\u00e8re sous-classe : Etudiant","text":"<p>La classe <code>Etudiant</code> h\u00e9rite de <code>Personne</code> en utilisant le mot-cl\u00e9 <code>extends</code>. Elle ajoute des attributs sp\u00e9cifiques aux \u00e9tudiants :</p> <pre><code>public class Etudiant extends Personne {\n    private String numeroDossier;\n    private String programme;\n\n    public Etudiant(String nom, String prenom, int age,\n                    String numeroDossier, String programme) {\n        super(nom, prenom, age);  // Appel du constructeur de la classe parente\n        this.numeroDossier = numeroDossier;\n        this.programme = programme;\n    }\n\n    // Accesseurs sp\u00e9cifiques \u00e0 Etudiant\n    public String getNumeroDossier() {\n        return numeroDossier;\n    }\n\n    public String getProgramme() {\n        return programme;\n    }\n\n    // Mutateurs sp\u00e9cifiques \u00e0 Etudiant\n    public void setNumeroDossier(String numeroDossier) {\n        this.numeroDossier = numeroDossier;\n    }\n\n    public void setProgramme(String programme) {\n        this.programme = programme;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \" - \" + programme +\n                \" (Dossier: \" + numeroDossier + \")\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/01-heritage/#deuxieme-sous-classe-professeur","title":"Deuxi\u00e8me sous-classe : Professeur","text":"<p>Ajoutons maintenant une classe <code>Professeur</code> qui h\u00e9rite aussi de <code>Personne</code> :</p> <pre><code>public class Professeur extends Personne {\n    private String departement;\n    private String specialite;\n\n    public Professeur(String nom, String prenom, int age,\n                      String departement, String specialite) {\n        super(nom, prenom, age);\n        this.departement = departement;\n        this.specialite = specialite;\n    }\n\n    // Accesseurs sp\u00e9cifiques \u00e0 Professeur\n    public String getDepartement() {\n        return departement;\n    }\n\n    public String getSpecialite() {\n        return specialite;\n    }\n\n    // Mutateurs sp\u00e9cifiques \u00e0 Professeur\n    public void setDepartement(String departement) {\n        this.departement = departement;\n    }\n\n    public void setSpecialite(String specialite) {\n        this.specialite = specialite;\n    }\n\n    @Override\n    public String toString() {\n        return super.toString() + \" - \" + departement +\n                \" (Sp\u00e9cialit\u00e9: \" + specialite + \")\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/01-heritage/#points-importants-a-noter","title":"Points importants \u00e0 noter","text":"<ul> <li>Le mot-cl\u00e9 <code>extends</code> indique l\u2019h\u00e9ritage</li> <li><code>super()</code> appelle le constructeur de la classe parente</li> <li>Les sous-classes h\u00e9ritent de toutes les m\u00e9thodes publiques et prot\u00e9g\u00e9es</li> <li><code>@Override</code> indique qu\u2019on red\u00e9finit une m\u00e9thode de la classe parente</li> <li>Les sous-classes peuvent ajouter leurs propres attributs et m\u00e9thodes</li> <li>Une sous-classe peut acc\u00e9der aux m\u00e9thodes de la classe parente avec <code>super</code></li> </ul> <p>Pour tester ces classes, voici un exemple d\u2019utilisation :</p> <pre><code>public class TestHeritage {\n    public static void main(String[] args) {\n        Etudiant etudiant = new Etudiant(\"Tremblay\", \"Marie\", 20,\n                \"12345\", \"Informatique\");\n        Professeur prof = new Professeur(\"Dubois\", \"Pierre\", 45,\n                \"Informatique\", \"Java\");\n\n        System.out.println(etudiant);\n        System.out.println(prof);\n    }\n}\n</code></pre> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/","title":"\ud83d\udd382\ud83d\udd38Les mots-cl\u00e9 <code>this</code> et <code>super</code>","text":"<p>Dans le contexte de la programmation orient\u00e9e objet en Java, voici les diff\u00e9rences cl\u00e9s entre <code>this</code> et <code>super</code> :</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#definition-et-portee","title":"D\u00e9finition et Port\u00e9e","text":"<p>this fait r\u00e9f\u00e9rence \u00e0 l\u2019instance courante de la classe actuelle, tandis que super fait r\u00e9f\u00e9rence \u00e0 la classe parente imm\u00e9diate[1].</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#utilisations-principales","title":"Utilisations Principales","text":""},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#acces-aux-attributs","title":"Acc\u00e8s aux attributs","text":"<ul> <li><code>this.attribut</code> acc\u00e8de aux attributs de la classe courante</li> <li><code>super.attribut</code> acc\u00e8de aux attributs de la classe parente[1]</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#appel-des-constructeurs","title":"Appel des constructeurs","text":"<ul> <li><code>this()</code> appelle un autre constructeur de la m\u00eame classe</li> <li><code>super()</code> appelle le constructeur de la classe parente[2]</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#resolution-des-conflits-de-noms","title":"R\u00e9solution des conflits de noms","text":"<pre><code>public class Etudiant extends Personne {\n    private String nom; // Attribut local\n\n    public void setNom(String nom) {\n        this.nom = nom;        // Attribut local\n        super.nom = nom;       // Attribut de la classe parente; ne doit pas \u00eatre priv\u00e9 pour avoir acc\u00e8s\n    }\n}\n</code></pre> <p>Attention</p> <p>Bien que l\u2019exemple pr\u00e9c\u00e9dent soit valide (il compile si <code>nom</code> dans parent n\u2019est pas priv\u00e9), il n\u2019est pas recommand\u00e9 d\u2019utiliser des attributs diff\u00e9rents avec le m\u00eame nom dans une sous-classe, pour \u00e9viter des probl\u00e8mes de r\u00e9f\u00e9rences  \u00e0 ces attributs d\u00fbs \u00e0 la confusion possible entre les attributs. </p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#regles-importantes","title":"R\u00e8gles importantes","text":"<ul> <li><code>super()</code> doit \u00eatre la premi\u00e8re instruction dans un constructeur[3]</li> <li>On ne peut pas utiliser <code>this()</code> et <code>super()</code> dans le m\u00eame constructeur[5]</li> <li>L\u2019utilisation de <code>super</code> est essentielle dans l\u2019h\u00e9ritage pour acc\u00e9der aux membres de la classe parente qui sont   masqu\u00e9s par la classe enfant[3]</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#tableau-comparatif","title":"Tableau comparatif","text":"Caract\u00e9ristique this super R\u00e9f\u00e9rence Instance courante Classe parente Port\u00e9e Classe actuelle Classe parente imm\u00e9diate Constructeur Appelle autre constructeur de la m\u00eame classe Appelle constructeur de la classe parente Position Premi\u00e8re instruction si utilis\u00e9 dans constructeur Premi\u00e8re instruction si utilis\u00e9 dans constructeur"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/02-this_super/#citations","title":"Citations","text":"<ul> <li>[1] https://www.studysmarter.fr/resumes/informatique/programmation-informatique/mot-cle-this-de-java/</li> <li>[2] https://www.justacademy.co/blog-detail/difference-between-this-and-super-in-java</li> <li>[3] https://www.scientecheasy.com/2019/11/difference-between-super-and-this-keyword-in-java.html/</li> <li>[4] https://www.javatpoint.com/this-vs-super-in-java</li> <li>[5] https://www.scaler.com/topics/java/this-and-super-keyword-in-java/</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/","title":"\ud83d\udd383\ud83d\udd38M\u00e9thode <code>toString</code> et introduction au polymorphisme","text":"<p>La red\u00e9finition de m\u00e9thodes est un excellent exemple pour introduire le polymorphisme.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#analyse-de-tostring","title":"Analyse de toString()","text":""},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#dans-la-classe-personne","title":"Dans la classe Personne","text":"<pre><code>public class Personne {\n    // ... autres attributs et m\u00e9thodes ...\n\n    @Override\n    public String toString() {\n        return prenom + \" \" + nom + \" (\" + age + \" ans)\";\n    }\n}\n</code></pre> <p>Cette premi\u00e8re version cr\u00e9e une repr\u00e9sentation textuelle de base d\u2019une personne. L\u2019annotation <code>@Override</code> indique que nous red\u00e9finissons la m\u00e9thode <code>toString()</code> h\u00e9rit\u00e9e de la classe <code>Object</code>.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#dans-la-classe-etudiant","title":"Dans la classe Etudiant","text":"<pre><code>public class Etudiant extends Personne {\n    // ... autres attributs et m\u00e9thodes ...\n\n    @Override\n    public String toString() {\n        return super.toString() + \" - \" + programme +\n                \" (Dossier: \" + numeroDossier + \")\";\n    }\n}\n</code></pre> <p>Cette version :</p> <ul> <li>Utilise <code>super.toString()</code> pour r\u00e9utiliser le format de base de la classe parente</li> <li>Ajoute les informations sp\u00e9cifiques \u00e0 un \u00e9tudiant</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#dans-la-classe-professeur","title":"Dans la classe Professeur","text":"<pre><code>public class Professeur extends Personne {\n    // ... autres attributs et m\u00e9thodes ...\n\n    @Override\n    public String toString() {\n        return super.toString() + \" - \" + departement +\n                \" (Sp\u00e9cialit\u00e9: \" + specialite + \")\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#introduction-au-polymorphisme","title":"Introduction au Polymorphisme","text":"<p>Le polymorphisme permet \u00e0 une r\u00e9f\u00e9rence de type parent de manipuler un objet de type enfant. Voici un exemple concret :</p> <pre><code>public class ExemplePolymorphisme {\n    public static void main(String[] args) {\n        // Cr\u00e9ation d'un tableau de Personnes\n        Personne[] personnes = new Personne[3];\n\n        // Remplissage avec diff\u00e9rents types\n        personnes[0] = new Personne(\"Dupont\", \"Jean\", 30);\n        personnes[1] = new Etudiant(\"Tremblay\", \"Marie\", 20, \"12345\", \"Informatique\");\n        personnes[2] = new Professeur(\"Dubois\", \"Pierre\", 45, \"Informatique\", \"Java\");\n\n        // Affichage polymorphique\n        for (Personne p : personnes) {\n            System.out.println(p.toString());\n            // ou simplement\n            //System.out.println(p);\n        }\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#resultat-dexecution","title":"R\u00e9sultat d\u2019ex\u00e9cution","text":"<pre><code>Jean Dupont (30 ans)\nMarie Tremblay (20 ans) - Informatique (Dossier: 12345)\nPierre Dubois (45 ans) - Informatique (Sp\u00e9cialit\u00e9: Java)\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#points-cles-du-polymorphisme","title":"Points cl\u00e9s du polymorphisme","text":"<ul> <li>Une r\u00e9f\u00e9rence de type parent peut contenir un objet de type enfant</li> <li>La m\u00e9thode appel\u00e9e est d\u00e9termin\u00e9e \u00e0 l\u2019ex\u00e9cution (liaison dynamique)</li> <li>Le comportement d\u00e9pend du type r\u00e9el de l\u2019objet, pas du type de la r\u00e9f\u00e9rence</li> <li>Permet d\u2019\u00e9crire du code plus g\u00e9n\u00e9rique et r\u00e9utilisable</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/03-toString/#exemple-supplementaire-avec-une-methode-polymorphique","title":"Exemple suppl\u00e9mentaire avec une m\u00e9thode polymorphique","text":"<pre><code>public class GestionnairePersonnes {\n    public static void afficherDetails(Personne p) {\n        System.out.println(\"D\u00e9tails de la personne:\");\n        System.out.println(p);  // Appel polymorphique de toString()\n    }\n\n    public static void main(String[] args) {\n        Personne pers = new Personne(\"Dupont\", \"Jean\", 30);\n        Etudiant etud = new Etudiant(\"Tremblay\", \"Marie\", 20, \"12345\", \"Informatique\");\n\n        afficherDetails(pers);  // Appelle toString de Personne\n        afficherDetails(etud);  // Appelle toString d'Etudiant\n    }\n}\n</code></pre> <p>Cette capacit\u00e9 \u00e0 traiter diff\u00e9rents types d\u2019objets de mani\u00e8re uniforme tout en conservant leur comportement sp\u00e9cifique est l\u2019essence m\u00eame du polymorphisme.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/","title":"\ud83d\udd384\ud83d\udd38D\u00e9finition du polymorphisme","text":"<p>Le polymorphisme est un concept fondamental en programmation orient\u00e9e objet qui permet \u00e0 des objets de diff\u00e9rentes classes d\u2019\u00eatre trait\u00e9s comme des objets d\u2019une classe commune.</p>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#definition-formelle","title":"D\u00e9finition formelle","text":"<p>Le polymorphisme se manifeste sous deux formes principales :</p> <p>Polymorphisme ad hoc (surcharge)</p> <ul> <li>Permet \u00e0 plusieurs m\u00e9thodes d\u2019avoir le m\u00eame nom mais des param\u00e8tres diff\u00e9rents</li> <li>R\u00e9solu \u00e0 la compilation</li> </ul> <p>Polymorphisme par sous-typage (h\u00e9ritage)</p> <ul> <li>Permet \u00e0 une classe enfant de red\u00e9finir le comportement d\u2019une m\u00e9thode h\u00e9rit\u00e9e</li> <li>R\u00e9solu \u00e0 l\u2019ex\u00e9cution (liaison dynamique)</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#exemple-avec-des-vehicules","title":"Exemple avec des V\u00e9hicules","text":""},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#classe-de-base","title":"Classe de base","text":"<pre><code>public class Vehicule {\n    private String marque;\n    private String modele;\n\n    public Vehicule(String marque, String modele) {\n        this.marque = marque;\n        this.modele = modele;\n    }\n\n    public void demarrer() {\n        System.out.println(\"Le v\u00e9hicule d\u00e9marre\");\n    }\n\n    public String getDescription() {\n        return marque + \" \" + modele;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#premiere-sous-classe","title":"Premi\u00e8re sous-classe","text":"<pre><code>public class Voiture extends Vehicule {\n    private int nombrePortes;\n\n    public Voiture(String marque, String modele, int nombrePortes) {\n        super(marque, modele);\n        this.nombrePortes = nombrePortes;\n    }\n\n    @Override\n    public void demarrer() {\n        System.out.println(\"La voiture d\u00e9marre en tournant la cl\u00e9\");\n    }\n\n    @Override\n    public String getDescription() {\n        return super.getDescription() + \" (\" + nombrePortes + \" portes)\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#deuxieme-sous-classe","title":"Deuxi\u00e8me sous-classe","text":"<pre><code>public class Moto extends Vehicule {\n    private int cylindree;\n\n    public Moto(String marque, String modele, int cylindree) {\n        super(marque, modele);\n        this.cylindree = cylindree;\n    }\n\n    @Override\n    public void demarrer() {\n        System.out.println(\"La moto d\u00e9marre avec le kick\");\n    }\n\n    @Override\n    public String getDescription() {\n        return super.getDescription() + \" (\" + cylindree + \"cc)\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#avantages-du-polymorphisme","title":"Avantages du polymorphisme","text":"<ul> <li>Extensibilit\u00e9: Ajout facile de nouvelles sous-classes sans modifier le code existant</li> <li>R\u00e9utilisabilit\u00e9: Le m\u00eame code peut traiter diff\u00e9rents types d\u2019objets</li> <li>Maintenance: Modification du comportement sp\u00e9cifique sans affecter le code client</li> </ul>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#demonstration-du-polymorphisme","title":"D\u00e9monstration du polymorphisme","text":"<pre><code>public class DemoPolymorphisme {\n    public static void main(String[] args) {\n        // Tableau polymorphique\n        Vehicule[] vehicules = new Vehicule[3];\n        vehicules[0] = new Vehicule(\"Generic\", \"Transport\");\n        vehicules[1] = new Voiture(\"Toyota\", \"Corolla\", 4);\n        vehicules[2] = new Moto(\"Honda\", \"CBR\", 600);\n\n        // Utilisation polymorphique\n        for (Vehicule v : vehicules) {\n            System.out.println(\"Description: \" + v.getDescription());\n            v.demarrer();\n            System.out.println(\"---\");\n        }\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/2.%20H%C3%A9ritage/04-polymorphisme/#exemple-dutilisation-pratique","title":"Exemple d\u2019utilisation pratique","text":"<pre><code>public class GarageAuto {\n    public static void demarrerTousLesVehicules(Vehicule[] vehicules) {\n        for (Vehicule v : vehicules) {\n            System.out.println(\"D\u00e9marrage de: \" + v.getDescription());\n            v.demarrer();\n        }\n    }\n}\n</code></pre> <p>Cette impl\u00e9mentation illustre comment le polymorphisme permet d\u2019\u00e9crire du code g\u00e9n\u00e9rique qui fonctionne avec n\u2019importe quelle sous-classe de <code>Vehicule</code>. La m\u00e9thode <code>demarrerTousLesVehicules</code> peut traiter n\u2019importe quel type de v\u00e9hicule sans avoir besoin de conna\u00eetre sa classe sp\u00e9cifique.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/01-abstract/","title":"\ud83d\udd381\ud83d\udd38Mot-cl\u00e9 <code>abstract</code>","text":""},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/01-abstract/#classes-concretes-vs-classes-abstraites","title":"Classes Concr\u00e8tes vs Classes Abstraites","text":"<p>Une classe concr\u00e8te est une classe standard qui peut \u00eatre instanci\u00e9e directement pour cr\u00e9er des objets. Elle doit impl\u00e9menter toutes ses m\u00e9thodes. Par exemple, <code>Voiture</code> et <code>Moto</code> sont des classes concr\u00e8tes car on peut cr\u00e9er des objets de ces types.</p> <p>Une classe abstraite est une classe qui ne peut pas \u00eatre instanci\u00e9e directement. Voici la classe abstraite <code>Vehicule</code> :</p> <pre><code>public abstract class Vehicule {\n    private String marque;\n    private String modele;\n\n    public Vehicule(String marque, String modele) {\n        this.marque = marque;\n        this.modele = modele;\n    }\n\n    // M\u00e9thode abstraite que les sous-classes devront impl\u00e9menter\n    public abstract void demarrer();\n\n    // M\u00e9thode concr\u00e8te commune \u00e0 tous les v\u00e9hicules\n    public String getDescription() {\n        return marque + \" \" + modele;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/01-abstract/#methodes-abstraites","title":"M\u00e9thodes Abstraites","text":"<p>Une m\u00e9thode abstraite est une m\u00e9thode d\u00e9clar\u00e9e sans impl\u00e9mentation. Les classes qui h\u00e9ritent de <code>Vehicule</code> doivent impl\u00e9menter la m\u00e9thode <code>demarrer()</code> :</p> <pre><code>public class Voiture extends Vehicule {\n    private int nombrePortes;\n\n    public Voiture(String marque, String modele, int nombrePortes) {\n        super(marque, modele);\n        this.nombrePortes = nombrePortes;\n    }\n\n    @Override\n    public void demarrer() {\n        System.out.println(\"La voiture d\u00e9marre en tournant la cl\u00e9\");\n    }\n\n    @Override\n    public String getDescription() {\n        return super.getDescription() + \" (\" + nombrePortes + \" portes)\";\n    }\n}\n\npublic class Moto extends Vehicule {\n    private int cylindree;\n\n    public Moto(String marque, String modele, int cylindree) {\n        super(marque, modele);\n        this.cylindree = cylindree;\n    }\n\n    @Override\n    public void demarrer() {\n        System.out.println(\"La moto d\u00e9marre avec le kick\");\n    }\n\n    @Override\n    public String getDescription() {\n        return super.getDescription() + \" (\" + cylindree + \"cc)\";\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/01-abstract/#utilisation-pratique-avec-le-polymorphisme","title":"Utilisation Pratique avec le Polymorphisme","text":"<p>Voici comment utiliser ces classes de mani\u00e8re polymorphique :</p> <pre><code>public class DemoPolymorphisme {\n    public static void main(String[] args) {\n        // Tableau polymorphique\n        Vehicule[] vehicules = new Vehicule[2];\n        vehicules[0] = new Voiture(\"Toyota\", \"Corolla\", 4);\n        vehicules[1] = new Moto(\"Honda\", \"CBR\", 600);\n\n        // Utilisation polymorphique\n        for (Vehicule v : vehicules) {\n            System.out.println(\"Description: \" + v.getDescription());\n            v.demarrer();\n            System.out.println(\"---\");\n        }\n    }\n}\n</code></pre> <p>On peut \u00e9galement cr\u00e9er des m\u00e9thodes utilitaires qui travaillent avec n\u2019importe quel v\u00e9hicule :</p> <pre><code>public class GarageAuto {\n    public static void demarrerTousLesVehicules(Vehicule[] vehicules) {\n        for (Vehicule v : vehicules) {\n            System.out.println(\"D\u00e9marrage de: \" + v.getDescription());\n            v.demarrer();\n        }\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/01-abstract/#caracteristiques-importantes","title":"Caract\u00e9ristiques Importantes","text":"<p>Points cl\u00e9s sur les classes abstraites :</p> <ul> <li>Une classe abstraite peut avoir des m\u00e9thodes abstraites et des m\u00e9thodes concr\u00e8tes (comme <code>getDescription()</code>)</li> <li>Elle peut avoir des constructeurs (comme <code>Vehicule(String marque, String modele)</code>)</li> <li>Elle peut avoir des attributs (comme <code>marque</code> et <code>modele</code>)</li> </ul> <p>Points cl\u00e9s sur les m\u00e9thodes abstraites :</p> <ul> <li>Elles d\u00e9finissent un comportement obligatoire que les sous-classes doivent impl\u00e9menter</li> <li>Dans notre exemple, chaque type de v\u00e9hicule doit d\u00e9finir sa propre fa\u00e7on de d\u00e9marrer</li> <li>Elles sont particuli\u00e8rement utiles quand un comportement varie selon le type sp\u00e9cifique de l\u2019objet</li> </ul> <p>Cette approche permet une grande flexibilit\u00e9 : pour ajouter un nouveau type de v\u00e9hicule (comme un Scooter), il suffit de cr\u00e9er une nouvelle classe qui h\u00e9rite de <code>Vehicule</code> et impl\u00e9mente <code>demarrer()</code>.une nouvelle classe qui h\u00e9rite de <code>Forme</code> et impl\u00e9mente <code>calculerAire()</code>.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/","title":"\ud83d\udd382\ud83d\udd38Exemples pour les jeux vid\u00e9os","text":"<p>Avertissement</p> <p>Les exemples ci-dessous sont des illustrations simplifi\u00e9es de concepts de programmation orient\u00e9e objet. Ils ne repr\u00e9sentent pas des impl\u00e9mentations compl\u00e8tes de jeux vid\u00e9o et n\u00e9cessitent des adaptations pour \u00eatre utilis\u00e9s dans un contexte r\u00e9el. Par exemple, les m\u00e9thodes ne contiendraient pas seulement des <code>println</code> mais des logiques plus complexes.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#exemples-dans-les-jeux-video","title":"Exemples dans les Jeux Vid\u00e9o","text":"<p>Gestion des Personnages</p> <ul> <li>Une classe abstraite <code>Personnage</code> avec des m\u00e9thodes abstraites comme <code>attaquer()</code> ou <code>seDeplacer()</code> que chaque type de   personnage (guerrier, mage, archer) doit impl\u00e9menter diff\u00e9remment[1].</li> <li>Des PNJs (Personnages Non Joueurs) qui doivent d\u00e9finir leurs propres comportements via des m\u00e9thodes abstraites[1].</li> </ul> <pre><code>public abstract class Personnage {\n    protected String nom;\n    protected int pointsDeVie;\n    protected int niveau;\n\n    public abstract void attaquer(Personnage cible);\n    public abstract void seDeplacer(Position position);\n    public abstract void utiliserCapaciteSpeciale();\n}\n\npublic class Guerrier extends Personnage {\n    private int force;\n    private String arme;\n\n    @Override\n    public void attaquer(Personnage cible) {\n        System.out.println(nom + \" frappe avec son \" + arme);\n        // Logique de d\u00e9g\u00e2ts bas\u00e9e sur la force\n    }\n\n    @Override\n    public void seDeplacer(Position position) {\n        System.out.println(nom + \" court lourdement vers la position\");\n        // D\u00e9placement plus lent mais r\u00e9sistant\n    }\n\n    @Override\n    public void utiliserCapaciteSpeciale() {\n        System.out.println(nom + \" entre dans une rage berserk!\");\n        // Augmente temporairement la force\n    }\n}\n\npublic class Mage extends Personnage {\n    private int mana;\n    private List&lt;Sort&gt; sorts;\n\n    @Override\n    public void attaquer(Personnage cible) {\n        System.out.println(nom + \" lance un projectile magique\");\n        // Logique de d\u00e9g\u00e2ts magiques\n    }\n\n    @Override\n    public void seDeplacer(Position position) {\n        System.out.println(nom + \" se t\u00e9l\u00e9porte\");\n        // T\u00e9l\u00e9portation sur courte distance\n    }\n\n    @Override\n    public void utiliserCapaciteSpeciale() {\n        System.out.println(nom + \" cr\u00e9e un bouclier magique!\");\n        // Activation d'une protection magique\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#intelligence-artificielle","title":"Intelligence Artificielle","text":"<p>Comportements des Ennemis</p> <pre><code>public abstract class EnnemiIA {\n    protected Position position;\n    protected int niveau;\n    protected int pointsDeVie;\n\n    public abstract void deplacer();\n    public abstract void attaquer();\n    public abstract void reagirAuJoueur();\n}\n\npublic class ZombieIA extends EnnemiIA {\n    private double vitesseDeplacement;\n\n    @Override\n    public void deplacer() {\n        System.out.println(\"Le zombie se d\u00e9place lentement vers le joueur\");\n        // Logique de d\u00e9placement direct vers le joueur\n    }\n\n    @Override\n    public void attaquer() {\n        System.out.println(\"Le zombie tente de mordre\");\n        // Attaque corps \u00e0 corps avec d\u00e9g\u00e2ts d'infection\n    }\n\n    @Override\n    public void reagirAuJoueur() {\n        System.out.println(\"Le zombie a rep\u00e9r\u00e9 le joueur et le poursuit\");\n        // Poursuite directe du joueur\n    }\n}\n\npublic class SentinelleIA extends EnnemiIA {\n    private double porteeDetection;\n    private boolean modeAlerte;\n\n    @Override\n    public void deplacer() {\n        System.out.println(\"La sentinelle patrouille dans sa zone\");\n        // Logique de patrouille sur un chemin pr\u00e9d\u00e9fini\n    }\n\n    @Override\n    public void attaquer() {\n        System.out.println(\"La sentinelle tire avec son arme\");\n        // Attaque \u00e0 distance\n    }\n\n    @Override\n    public void reagirAuJoueur() {\n        System.out.println(\"La sentinelle d\u00e9clenche l'alarme et engage le combat\");\n        // Alerte les autres ennemis et engage le combat\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#systeme-de-combat","title":"Syst\u00e8me de Combat","text":"<p>Capacit\u00e9s et Comp\u00e9tences</p> <pre><code>public abstract class Competence {\n    protected String nom;\n    protected int coutMana;\n    protected int tempsRecharge;\n\n    public abstract void executer(Personnage cible);\n    public abstract boolean estUtilisable();\n}\n\npublic class BouleDeFeu extends Competence {\n    private int degats;\n    private int rayonExplosion;\n\n    @Override\n    public void executer(Personnage cible) {\n        System.out.println(\"Lance une boule de feu qui explose sur la cible\");\n        // Logique de d\u00e9g\u00e2ts de zone et effets de br\u00fblure\n    }\n\n    @Override\n    public boolean estUtilisable() {\n        return tempsRecharge == 0 &amp;&amp; coutMana &lt;= personnage.getMana();\n    }\n}\n\npublic class Soin extends Competence {\n    private int puissanceSoin;\n    private boolean soigneGroupe;\n\n    @Override\n    public void executer(Personnage cible) {\n        System.out.println(\"Lance un sort de soin sur \" + cible.getNom());\n        // Logique de restauration de points de vie\n    }\n\n    @Override\n    public boolean estUtilisable() {\n        return tempsRecharge == 0 &amp;&amp; coutMana &lt;= personnage.getMana();\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#mecaniques-de-jeu","title":"M\u00e9caniques de Jeu","text":"<p>Syst\u00e8me de Points et Scores</p> <pre><code>public abstract class SystemeScore {\n    protected int scoreActuel;\n    protected int multiplicateur;\n\n    public abstract void calculerPoints(Action action);\n    public abstract void mettreAJourHighScore();\n}\n\npublic class ScoreArcade extends SystemeScore {\n    private int combo;\n\n    @Override\n    public void calculerPoints(Action action) {\n        System.out.println(\"Calcul des points style arcade avec combos\");\n        // Logique de score bas\u00e9e sur les combos et la rapidit\u00e9\n    }\n\n    @Override\n    public void mettreAJourHighScore() {\n        System.out.println(\"Mise \u00e0 jour du tableau des meilleurs scores arcade\");\n        // Sauvegarde du score dans la table des high scores\n    }\n}\n\npublic class ScoreSurvie extends SystemeScore {\n    private int tempsDeJeu;\n\n    @Override\n    public void calculerPoints(Action action) {\n        System.out.println(\"Calcul des points bas\u00e9 sur le temps de survie\");\n        // Logique de score bas\u00e9e sur le temps et les ressources\n    }\n\n    @Override\n    public void mettreAJourHighScore() {\n        System.out.println(\"Mise \u00e0 jour des records de temps de survie\");\n        // Sauvegarde du temps de survie et des statistiques\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#avantages-de-cette-approche","title":"Avantages de cette Approche","text":"<ul> <li>Permet une structure commune pour des comportements similaires[9]</li> <li>Facilite l\u2019ajout de nouveaux types d\u2019ennemis ou de personnages[9]</li> <li>Assure que toutes les sous-classes impl\u00e9mentent les comportements n\u00e9cessaires[9]</li> <li>Permet une meilleure organisation du code et une maintenance plus facile[1]</li> </ul> <p>Cette approche est particuli\u00e8rement utile dans les jeux vid\u00e9o car elle permet de d\u00e9finir des comportements standards tout en laissant la flexibilit\u00e9 n\u00e9cessaire pour les variations sp\u00e9cifiques \u00e0 chaque type d\u2019entit\u00e9 du jeu.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/02-exemples/#citations","title":"Citations","text":"<ul> <li>[1] https://www.saagie.com/fr/blog/blog-l-intelligence-artificielle-dans-les-jeux-video/</li> <li>[2] https://artificialpaintings.com/fr/blog/2024/07/01/explorer-lart-abstrait-dans-les-jeux-video/</li> <li>[3] https://www.youtube.com/watch?v=MLqplTsgga0</li> <li>[4] https://zestedesavoir.com/tutoriels/646/apprenez-a-programmer-en-java/557_java-oriente-objet/2698_les-classes-abstraites-et-les-interfaces/</li> <li>[5] https://www.firstpersonscholar.com/the-importance-of-abstraction/</li> <li>[6] https://dev.to/carlillo/understanding-design-patterns-abstract-factory-23e7</li> <li>[7] http://www.iro.umontreal.ca/~dift1170/A09/docPDF/chapit09.pdf</li> <li>[8] https://ludobel.be/2022/11/03/limportance-des-jeux-abstraits/</li> <li>[9] https://refactoring.guru/fr/design-patterns/template-method</li> <li>[10] https://blackshellmedia.com/2015/09/15/game-design-101-the-beauty-of-abstraction/</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/","title":"\ud83d\udd383\ud83d\udd38Exemples pour une banque","text":"<p>Avertissement</p> <p>Les exemples ci-dessous sont des illustrations simplifi\u00e9es de concepts de programmation orient\u00e9e objet. Ils ne repr\u00e9sentent pas des impl\u00e9mentations compl\u00e8tes de jeux vid\u00e9o et n\u00e9cessitent des adaptations pour \u00eatre utilis\u00e9s dans un contexte r\u00e9el. Par exemple, les m\u00e9thodes ne contiendraient pas seulement des <code>println</code> mais des logiques plus complexes.</p>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#classe-abstraite-transaction","title":"Classe Abstraite Transaction","text":"<pre><code>public abstract class Transaction {\n    protected String numeroCompte;\n    protected double montant;\n    protected LocalDateTime dateTransaction;\n    protected String description;\n\n    public Transaction(String numeroCompte, double montant) {\n        this.numeroCompte = numeroCompte;\n        this.montant = montant;\n        this.dateTransaction = LocalDateTime.now();\n    }\n\n    public abstract void executer();\n\n    public abstract void annuler();\n\n    public abstract String genererRecu();\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#types-de-transactions","title":"Types de Transactions","text":"<p>Retrait</p> <pre><code>public class Retrait extends Transaction {\n    private String guichet;\n\n    public Retrait(String numeroCompte, double montant, String guichet) {\n        super(numeroCompte, montant);\n        this.guichet = guichet;\n    }\n\n    @Override\n    public void executer() {\n        System.out.println(\"V\u00e9rification du solde disponible\");\n        System.out.println(\"Retrait de \" + montant + \"$ du compte \" + numeroCompte);\n        // Logique de retrait\n    }\n\n    @Override\n    public void annuler() {\n        System.out.println(\"Annulation du retrait : remise du montant sur le compte\");\n        // Logique d'annulation\n    }\n\n    @Override\n    public String genererRecu() {\n        return \"Re\u00e7u de retrait - Compte: \" + numeroCompte +\n                \" - Montant: \" + montant + \"$ - Guichet: \" + guichet;\n    }\n}\n</code></pre> <p>D\u00e9p\u00f4t</p> <pre><code>public class Depot extends Transaction {\n    private String typeDepot; // \"esp\u00e8ces\", \"ch\u00e8que\"\n\n    public Depot(String numeroCompte, double montant, String typeDepot) {\n        super(numeroCompte, montant);\n        this.typeDepot = typeDepot;\n    }\n\n    @Override\n    public void executer() {\n        System.out.println(\"V\u00e9rification de la validit\u00e9 du d\u00e9p\u00f4t\");\n        System.out.println(\"D\u00e9p\u00f4t de \" + montant + \"$ sur le compte \" + numeroCompte);\n        // Logique de d\u00e9p\u00f4t\n    }\n\n    @Override\n    public void annuler() {\n        System.out.println(\"Annulation du d\u00e9p\u00f4t\");\n        // Logique d'annulation\n    }\n\n    @Override\n    public String genererRecu() {\n        return \"Re\u00e7u de d\u00e9p\u00f4t - Compte: \" + numeroCompte +\n                \" - Montant: \" + montant + \"$ - Type: \" + typeDepot;\n    }\n}\n</code></pre> <p>Virement</p> <pre><code>public class Virement extends Transaction {\n    private String compteDestinataire;\n    private String motif;\n\n    public Virement(String numeroCompte, String compteDestinataire,\n                    double montant, String motif) {\n        super(numeroCompte, montant);\n        this.compteDestinataire = compteDestinataire;\n        this.motif = motif;\n    }\n\n    @Override\n    public void executer() {\n        System.out.println(\"V\u00e9rification des comptes source et destination\");\n        System.out.println(\"Virement de \" + montant + \"$ vers \" + compteDestinataire);\n        // Logique de virement\n    }\n\n    @Override\n    public void annuler() {\n        System.out.println(\"Annulation du virement : op\u00e9ration inverse\");\n        // Logique d'annulation\n    }\n\n    @Override\n    public String genererRecu() {\n        return \"Re\u00e7u de virement - De: \" + numeroCompte +\n                \" - Vers: \" + compteDestinataire +\n                \" - Montant: \" + montant + \"$ - Motif: \" + motif;\n    }\n}\n</code></pre> <p>Paiement</p> <pre><code>public class Paiement extends Transaction {\n    private String beneficiaire;\n    private String reference;\n\n    public Paiement(String numeroCompte, double montant,\n                    String beneficiaire, String reference) {\n        super(numeroCompte, montant);\n        this.beneficiaire = beneficiaire;\n        this.reference = reference;\n    }\n\n    @Override\n    public void executer() {\n        System.out.println(\"V\u00e9rification du compte et du b\u00e9n\u00e9ficiaire\");\n        System.out.println(\"Paiement de \" + montant + \"$ \u00e0 \" + beneficiaire);\n        // Logique de paiement\n    }\n\n    @Override\n    public void annuler() {\n        System.out.println(\"Annulation du paiement : remboursement\");\n        // Logique d'annulation\n    }\n\n    @Override\n    public String genererRecu() {\n        return \"Re\u00e7u de paiement - Compte: \" + numeroCompte +\n                \" - B\u00e9n\u00e9ficiaire: \" + beneficiaire +\n                \" - Montant: \" + montant + \"$ - R\u00e9f: \" + reference;\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#utilisation","title":"Utilisation","text":"<pre><code>public class GestionnaireTransactions {\n    public static void executerTransaction(Transaction transaction) {\n        try {\n            transaction.executer();\n            System.out.println(transaction.genererRecu());\n        } catch (Exception e) {\n            System.out.println(\"Erreur lors de la transaction\");\n            transaction.annuler();\n        }\n    }\n\n    public static void main(String[] args) {\n        Transaction retrait = new Retrait(\"123456\", 100.0, \"ATM001\");\n        Transaction depot = new Depot(\"123456\", 500.0, \"ch\u00e8que\");\n        Transaction virement = new Virement(\"123456\", \"789012\",\n                250.0, \"Remboursement\");\n\n        executerTransaction(retrait);\n        executerTransaction(depot);\n        executerTransaction(virement);\n    }\n}\n</code></pre> <p>Cette structure permet de :</p> <ul> <li>G\u00e9rer diff\u00e9rents types de transactions de mani\u00e8re uniforme</li> <li>Assurer que chaque type de transaction impl\u00e9mente les op\u00e9rations n\u00e9cessaires</li> <li>Faciliter l\u2019ajout de nouveaux types de transactions</li> <li>Maintenir une trace coh\u00e9rente des op\u00e9rations bancaires</li> <li>G\u00e9rer les annulations de mani\u00e8re appropri\u00e9e pour chaque type de transaction</li> </ul>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#demonstration-du-polymorphisme-avec-les-transactions","title":"D\u00e9monstration du Polymorphisme avec les Transactions","text":"<pre><code>public class GestionnaireTransactions {\n    public static void executerTransaction(Transaction transaction) {\n        try {\n            transaction.executer();\n            System.out.println(transaction.genererRecu());\n        } catch (Exception e) {\n            System.out.println(\"Erreur lors de la transaction\");\n            transaction.annuler();\n        }\n    }\n\n    public static void main(String[] args) {\n        // Cr\u00e9ation d'une liste de transactions de diff\u00e9rents types\n        ArrayList&lt;Transaction&gt; transactions = new ArrayList&lt;&gt;();\n\n        // Ajout de diff\u00e9rentes transactions dans la liste\n        transactions.add(new Retrait(\"123456\", 100.0, \"ATM001\"));\n        transactions.add(new Depot(\"123456\", 500.0, \"ch\u00e8que\"));\n        transactions.add(new Virement(\"123456\", \"789012\", 250.0, \"Remboursement\"));\n        transactions.add(new Paiement(\"123456\", 75.0, \"Hydro-Qu\u00e9bec\", \"FACT-2024-01\"));\n\n        // Traitement polymorphique des transactions\n        for (Transaction transaction : transactions) {\n            executerTransaction(transaction);\n            System.out.println(\"-------------------\");\n        }\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#explication-du-polymorphisme","title":"Explication du Polymorphisme","text":"<p>Le polymorphisme se manifeste ici de plusieurs fa\u00e7ons :</p> <ol> <li> <p>Collection polymorphique :</p> <ul> <li>L\u2019<code>ArrayList&lt;Transaction&gt;</code> peut contenir n\u2019importe quel objet qui h\u00e9rite de <code>Transaction</code></li> <li>Chaque \u00e9l\u00e9ment peut \u00eatre une instance diff\u00e9rente (Retrait, Depot, Virement, Paiement)</li> </ul> </li> <li> <p>Traitement uniforme :</p> <ul> <li>La m\u00e9thode <code>executerTransaction()</code> accepte un param\u00e8tre de type <code>Transaction</code></li> <li>Elle peut traiter n\u2019importe quelle sous-classe de <code>Transaction</code> sans conna\u00eetre son type exact</li> </ul> </li> <li> <p>Appels polymorphiques :</p> <ul> <li>Lors de l\u2019appel de <code>transaction.executer()</code> et <code>transaction.genererRecu()</code></li> <li>La version appropri\u00e9e de la m\u00e9thode est appel\u00e9e selon le type r\u00e9el de l\u2019objet</li> <li>Par exemple, pour un Retrait, c\u2019est la m\u00e9thode <code>executer()</code> de la classe <code>Retrait</code> qui est appel\u00e9e</li> </ul> </li> </ol>"},{"location":"B.%20Programmation%20OO/3.%20Classes%20et%20m%C3%A9thodes%20abstraites/03-exemples/#avantages-de-cette-approche","title":"Avantages de cette Approche","text":"<ul> <li>Extensibilit\u00e9 : Pour ajouter un nouveau type de transaction, il suffit de cr\u00e9er une nouvelle sous-classe</li> <li>Maintenance : Le code de traitement reste le m\u00eame, quelle que soit la transaction</li> <li>Simplicit\u00e9 : Une seule boucle peut traiter tous les types de transactions</li> <li>Flexibilit\u00e9 : Les transactions peuvent \u00eatre r\u00e9organis\u00e9es ou filtr\u00e9es facilement dans la liste</li> </ul> <p>Cette approche polymorphique est particuli\u00e8rement utile dans un syst\u00e8me bancaire r\u00e9el o\u00f9 de nouveaux types de transactions peuvent \u00eatre ajout\u00e9s sans modifier le code existant.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/01-interfaces/","title":"\ud83d\udd381\ud83d\udd38Interfaces","text":"<p>Une interface en Java est un contrat qui d\u00e9finit un ensemble de m\u00e9thodes qu\u2019une classe doit impl\u00e9menter. Elle permet de d\u00e9finir un comportement commun que plusieurs classes non li\u00e9es peuvent partager.</p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/01-interfaces/#exemple","title":"Exemple","text":"<pre><code>// D\u00e9finition de l'interface\npublic interface Animal {\n    void faireBruit();\n\n    void seDeplacer();\n}\n\n// Impl\u00e9mentation de l'interface\npublic class Chat implements Animal {\n    @Override\n    public void faireBruit() {\n        System.out.println(\"Miaou!\");\n    }\n\n    @Override\n    public void seDeplacer() {\n        System.out.println(\"Le chat marche silencieusement\");\n    }\n}\n\n// Une autre impl\u00e9mentation\npublic class Chien implements Animal {\n    @Override\n    public void faireBruit() {\n        System.out.println(\"Wouf!\");\n    }\n\n    @Override\n    public void seDeplacer() {\n        System.out.println(\"Le chien court joyeusement\");\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/01-interfaces/#comparaison-entre-interfaces-et-classes-abstraites","title":"Comparaison entre Interfaces et Classes Abstraites","text":"Caract\u00e9ristique Interface Classe Abstraite M\u00e9thodes Uniquement abstraites (par d\u00e9faut) et statiques Peut avoir des m\u00e9thodes abstraites et concr\u00e8tes Attributs Constants uniquement (public static final) Peut avoir des variables d\u2019instance H\u00e9ritage multiple Une classe peut impl\u00e9menter plusieurs interfaces Une classe ne peut h\u00e9riter que d\u2019une seule classe abstraite Constructeur Ne peut pas avoir de constructeur Peut avoir des constructeurs Impl\u00e9mentation Ne peut pas contenir d\u2019impl\u00e9mentation (sauf m\u00e9thodes default) Peut contenir des impl\u00e9mentations partielles"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/01-interfaces/#points-cles-a-retenir","title":"Points Cl\u00e9s \u00e0 Retenir","text":"<p>Les interfaces sont particuli\u00e8rement utiles pour:</p> <ul> <li>D\u00e9finir un contrat que plusieurs classes doivent respecter</li> <li>Permettre le polymorphisme sans cr\u00e9er une hi\u00e9rarchie d\u2019h\u00e9ritage</li> <li>Cr\u00e9er des syst\u00e8mes faiblement coupl\u00e9s</li> </ul> <p>Les classes abstraites sont pr\u00e9f\u00e9rables quand:</p> <ul> <li>On veut partager du code entre plusieurs classes \u00e9troitement li\u00e9es</li> <li>On a besoin de d\u00e9clarer des attributs non constants</li> <li>On souhaite fournir une impl\u00e9mentation partielle d\u2019une classe</li> </ul>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/02-abtract-vs-interface/","title":"\ud83d\udd382\ud83d\udd38Classes Abstraites vs. les Interfaces","text":""},{"location":"B.%20Programmation%20OO/4.%20Interfaces/02-abtract-vs-interface/#classes-abstraites-la-relation-est-un","title":"Classes Abstraites : La Relation \u201cEst-un\u201d","text":"<p>Les classes abstraites sont utilis\u00e9es pour d\u00e9finir la nature fondamentale des objets dans une hi\u00e9rarchie.</p> <p>Quand utiliser une classe abstraite: - Lorsque vous voulez cr\u00e9er une cat\u00e9gorie g\u00e9n\u00e9rale d\u2019objets - Quand plusieurs classes partagent des caract\u00e9ristiques et des comportements communs - Pour \u00e9tablir une hi\u00e9rarchie bas\u00e9e sur l\u2019identit\u00e9 des objets</p> <p>Exemple: <pre><code>public abstract class Vehicule {\n    protected String marque;\n    protected int annee;\n\n    public abstract void demarrer();\n\n    public void klaxonner() {\n        System.out.println(\"Beep beep!\");\n    }\n}\n\npublic class Voiture extends Vehicule {\n    @Override\n    public void demarrer() {\n        System.out.println(\"La voiture d\u00e9marre\");\n    }\n}\n</code></pre></p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/02-abtract-vs-interface/#interfaces-la-relation-peut-faire","title":"Interfaces : La Relation \u201cPeut-faire\u201d","text":"<p>Les interfaces d\u00e9finissent des capacit\u00e9s ou des comportements que les classes peuvent adopter.</p> <p>Quand utiliser une interface: - Pour d\u00e9finir un ensemble de m\u00e9thodes que plusieurs classes non li\u00e9es peuvent impl\u00e9menter - Quand vous voulez sp\u00e9cifier un comportement sans vous soucier de qui l\u2019impl\u00e9mente - Pour permettre \u00e0 une classe d\u2019avoir plusieurs comportements</p> <p>Exemple: <pre><code>public interface Rechargeable {\n    void recharger();\n}\n\npublic class Smartphone extends Appareil implements Rechargeable {\n    @Override\n    public void recharger() {\n        System.out.println(\"Le smartphone se recharge\");\n    }\n}\n\npublic class VoitureElectrique extends Voiture implements Rechargeable {\n    @Override\n    public void recharger() {\n        System.out.println(\"La voiture \u00e9lectrique se recharge\");\n    }\n}\n</code></pre></p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/02-abtract-vs-interface/#points-cles-a-retenir","title":"Points Cl\u00e9s \u00e0 Retenir","text":"<ol> <li>Classes Abstraites:</li> </ol> <ul> <li>D\u00e9finissent \u201cce qu\u2019est\u201d un objet</li> <li>Cr\u00e9ent une taxonomie ou une hi\u00e9rarchie</li> <li>Peuvent contenir des attributs et des m\u00e9thodes concr\u00e8tes</li> </ul> <ol> <li>Interfaces:</li> </ol> <ul> <li>D\u00e9finissent \u201cce que peut faire\u201d un objet</li> <li>Permettent de partager des comportements entre classes non li\u00e9es</li> <li>Ne contiennent que des signatures de m\u00e9thodes (sauf m\u00e9thodes default en Java 8+)</li> </ul> <ol> <li>Choix de Conception:</li> </ol> <ul> <li>Utilisez une classe abstraite quand vous voulez d\u00e9finir une cat\u00e9gorie d\u2019objets</li> <li>Utilisez une interface quand vous voulez d\u00e9finir une capacit\u00e9 que plusieurs types d\u2019objets peuvent avoir</li> </ul> <p>En comprenant cette distinction, vous serez mieux \u00e9quip\u00e9s pour concevoir des syst\u00e8mes orient\u00e9s objet flexibles et bien structur\u00e9s.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/","title":"\ud83d\udd383\ud83d\udd38Exemples","text":"<p>Avertissement</p> <p>Les exemples ci-dessous sont des illustrations simplifi\u00e9es de concepts de programmation orient\u00e9e objet. Ils ne repr\u00e9sentent pas des impl\u00e9mentations compl\u00e8tes de jeux vid\u00e9o et n\u00e9cessitent des adaptations pour \u00eatre utilis\u00e9s dans un contexte r\u00e9el. Par exemple, les m\u00e9thodes ne contiendraient pas seulement des <code>println</code> mais des logiques plus complexes.</p>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#exemple-avec-une-hierarchie-de-vehicules","title":"Exemple avec une Hi\u00e9rarchie de V\u00e9hicules","text":""},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#classe-abstraite-nature-fondamentale","title":"Classe Abstraite - Nature Fondamentale","text":"<pre><code>public abstract class Vehicule {\n    protected String marque;\n    protected int vitesseMax;\n\n    public Vehicule(String marque, int vitesseMax) {\n        this.marque = marque;\n        this.vitesseMax = vitesseMax;\n    }\n\n    public abstract void demarrer();\n\n    // M\u00e9thode concr\u00e8te commune \u00e0 tous les v\u00e9hicules\n    public void klaxonner() {\n        System.out.println(\"Beep beep!\");\n    }\n}\n\npublic class Voiture extends Vehicule {\n    public Voiture(String marque, int vitesseMax) {\n        super(marque, vitesseMax);\n    }\n\n    @Override\n    public void demarrer() {\n        System.out.println(\"La voiture d\u00e9marre avec la cl\u00e9\");\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#interfaces-capacites","title":"Interfaces - Capacit\u00e9s","text":"<pre><code>public interface Rechargeable {\n    void recharger();\n}\n\npublic interface Volant {\n    void decoller();\n    void atterrir();\n}\n\npublic class VoitureElectrique extends Voiture implements Rechargeable {\n    public VoitureElectrique(String marque, int vitesseMax) {\n        super(marque, vitesseMax);\n    }\n\n    @Override\n    public void recharger() {\n        System.out.println(\"La voiture se recharge sur une borne\");\n    }\n}\n\npublic class VoitureVolante extends Voiture implements Volant {\n    @Override\n    public void decoller() {\n        System.out.println(\"La voiture s'\u00e9l\u00e8ve dans les airs\");\n    }\n\n    @Override\n    public void atterrir() {\n        System.out.println(\"La voiture revient au sol\");\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#exemple-avec-des-animaux","title":"Exemple avec des Animaux","text":""},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#classe-abstraite-structure-de-base","title":"Classe Abstraite - Structure de Base","text":"<pre><code>public abstract class Animal {\n    protected String nom;\n    protected int age;\n\n    public abstract void respirer();\n\n    public void dormir() {\n        System.out.println(\"L'animal dort\");\n    }\n}\n</code></pre>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#interfaces-comportements","title":"Interfaces - Comportements","text":"<pre><code>public interface Nageable {\n    void nager();\n}\n\npublic interface Volant {\n    void voler();\n}\n\npublic class Dauphin extends Animal implements Nageable {\n    @Override\n    public void respirer() {\n        System.out.println(\"Le dauphin remonte \u00e0 la surface\");\n    }\n\n    @Override\n    public void nager() {\n        System.out.println(\"Le dauphin nage rapidement\");\n    }\n}\n\npublic class Chauve_Souris extends Animal implements Volant {\n    @Override\n    public void respirer() {\n        System.out.println(\"La chauve-souris respire\");\n    }\n\n    @Override\n    public void voler() {\n        System.out.println(\"La chauve-souris vole silencieusement\");\n    }\n}\n</code></pre> <p>Ces exemples illustrent comment :</p> <ul> <li>Les classes abstraites d\u00e9finissent la structure de base et les comportements communs</li> <li>Les interfaces permettent d\u2019ajouter des capacit\u00e9s de mani\u00e8re flexible</li> <li>Une classe peut h\u00e9riter d\u2019une seule classe abstraite mais impl\u00e9menter plusieurs interfaces</li> <li>Les interfaces favorisent la r\u00e9utilisation de code \u00e0 travers des hi\u00e9rarchies non li\u00e9es</li> </ul>"},{"location":"B.%20Programmation%20OO/4.%20Interfaces/03-exemples/#citations","title":"Citations","text":"<ul> <li>[1] https://www.studysmarter.fr/resumes/informatique/programmation-informatique/interfaces-java/</li> <li>[2] https://members.loria.fr/ABelaid/Enseignement/FC/Cours7-Classes-abstraites.pdf</li> <li>[3] https://codegym.cc/fr/groups/posts/fr.1008.interface-en-java</li> <li>[4] https://www.studysmarter.fr/resumes/informatique/programmation-informatique/abstraction-en-java/</li> <li>[5] https://www.studysmarter.fr/resumes/informatique/programmation-informatique/interface-set-java/</li> <li>[6] https://dev.to/bassaoudev/poo-comprendre-les-classes-abstraites-et-les-interfaces-en-java-3imn</li> <li>[7] https://dev.to/bassaoudev/poo-les-interfaces-en-java-simplement-5fdd</li> <li>[8] https://codegym.cc/fr/groups/posts/les-classes-abstraites-en-java</li> <li>[9] https://blog.paumard.org/cours/java/chap07-heritage-interface-interface.html</li> <li>[10] https://gayerie.dev/epsi-b3-java/langage_java/interface.html</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/01-notation/","title":"\ud83d\udd381\ud83d\udd38Notation UML","text":"<p>Le langage UML (Unified Modeling Language) est un standard de mod\u00e9lisation visuelle utilis\u00e9 pour repr\u00e9senter la structure et le comportement des syst\u00e8mes logiciels[2].</p>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/01-notation/#types-principaux-de-diagrammes-uml","title":"Types principaux de diagrammes UML","text":"<p>Les diagrammes UML se divisent en deux cat\u00e9gories principales :</p> <p>Diagrammes structurels</p> <ul> <li>Diagrammes de classes (fondement de la programmation orient\u00e9e objet)</li> <li>Diagrammes de composants</li> <li>Diagrammes de paquetages</li> </ul> <p>Diagrammes comportementaux</p> <ul> <li>Diagrammes d\u2019activit\u00e9s</li> <li>Diagrammes de s\u00e9quence</li> <li>Diagrammes de cas d\u2019utilisation[7]</li> </ul>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/01-notation/#diagrammes-de-classes","title":"Diagrammes de classes","text":"<p>Un diagramme de classes repr\u00e9sente la structure statique d\u2019un syst\u00e8me orient\u00e9 objet en montrant les classes, leurs attributs, leurs m\u00e9thodes et les relations entre elles[9].</p> <p>Notation de base</p> <p>Une classe est repr\u00e9sent\u00e9e par un rectangle divis\u00e9 en trois compartiments :</p> <ol> <li>Nom de la classe (obligatoire)</li> <li>Attributs (optionnel)</li> <li>M\u00e9thodes (optionnel)[9]</li> </ol> <p>Visibilit\u00e9 des membres</p> <ul> <li><code>+</code> : public</li> <li><code>-</code> : private</li> <li><code>#</code> : protected</li> <li><code>~</code> : package[5]</li> </ul>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/01-notation/#exemple-simple-en-plantuml","title":"Exemple simple en PlantUML","text":"<pre>d8abab506caa009d1533bab0e21281be58f30f854bd54518f254e6fe85549364285333c0c98fbd23fdfdd668f09f40b70ea18b28b0669d6b2787587c2d160018</pre> Source PlantUML <pre><code>@startuml\nskinparam classAttributeIconSize 0\n\nclass Compte {\n    -numero: String\n    -solde: double\n    +deposer(montant: double): void\n    +retirer(montant: double): boolean\n}\n\nclass Client {\n    -nom: String\n    -prenom: String\n    +getNomComplet(): String\n}\n\nClient \"1\" -- \"*\" Compte : poss\u00e8de\n@enduml\n</code></pre> <p>Dans cet exemple :</p> <ul> <li>La classe <code>Compte</code> a deux attributs priv\u00e9s (<code>numero</code> et <code>solde</code>) et deux m\u00e9thodes publiques (<code>deposer</code> et <code>retirer</code>)</li> <li>La classe <code>Client</code> a deux attributs priv\u00e9s (<code>nom</code> et <code>prenom</code>) et une m\u00e9thode publique (<code>getNomComplet</code>)</li> <li>L\u2019association entre les classes indique qu\u2019un client peut poss\u00e9der plusieurs comptes (association \u201c1 \u00e0 plusieurs\u201d)[9]</li> </ul>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/01-notation/#citations","title":"Citations","text":"<ul> <li>[1] https://plantuml.com/class-diagram</li> <li>[2] https://www.lucidchart.com/pages/fr/langage-uml</li> <li>[3] https://gitmind.com/fr/types-diagrammes-uml.html</li> <li>[4] https://creately.com/blog/fr/uncategorized-fr/tutoriel-sur-les-diagrammes-de-classe/</li> <li>[5] https://www.geeksforgeeks.org/unified-modeling-language-uml-class-diagrams/</li> <li>[6] https://plantuml.com/fr-dark/class-diagram</li> <li>[7] https://miro.com/fr/diagramme/qu-est-ce-qu-un-diagramme-uml/</li> <li>[8] https://ideascale.com/fr/blogues/differents-types-de-diagrammes-duml/</li> <li>[9] https://miro.com/fr/diagramme/qu-est-ce-qu-un-diagramme-de-classe-uml/</li> <li>[10] https://www.lucidchart.com/blog/fr/types-de-diagrammes-UML</li> </ul> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/02-exemples/","title":"\ud83d\udd382\ud83d\udd38Exemples","text":""},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/02-exemples/#exemple-1","title":"Exemple 1","text":"<p>Voici le diagramme de classes pour  l\u2019exemple <code>Personne</code>, <code>Etudiant</code> et  <code>Professeur</code> :</p> <pre>56203f5697bd861165aae315d85aa046c9b0cc928d76bf7835d1ee3dc6eca645224b57ff137feda0f6485656accc7e08ff3ed749867791b6e2ea53d77abd0352</pre> Source PlantUML <pre><code>@startuml\nskinparam classAttributeIconSize 0\n\nclass Personne {\n  -nom: String\n  -prenom: String\n  -age: int\n  +Personne(nom: String, prenom: String, age: int)\n  +getNom(): String\n  +getPrenom(): String\n  +getAge(): int\n  +setNom(nom: String): void\n  +setPrenom(prenom: String): void\n  +setAge(age: int): void\n  +toString(): String\n}\n\nclass Etudiant {\n  -numeroDossier: String\n  -programme: String\n  +Etudiant(nom: String, prenom: String, age: int, numeroDossier: String, programme: String)\n  +getNumeroDossier(): String\n  +getProgramme(): String\n  +setNumeroDossier(numeroDossier: String): void\n  +setProgramme(programme: String): void\n  +toString(): String\n}\n\nclass Professeur {\n  -departement: String\n  -specialite: String\n  +Professeur(nom: String, prenom: String, age: int, departement: String, specialite: String)\n  +getDepartement(): String\n  +getSpecialite(): String\n  +setDepartement(departement: String): void\n  +setSpecialite(specialite: String): void\n  +toString(): String\n}\n\nEtudiant --|&gt; Personne\nPersonne &lt;|-- Professeur\n\n@enduml\n</code></pre> <p>Le diagramme montre maintenant la hi\u00e9rarchie compl\u00e8te o\u00f9 :</p> <ul> <li><code>Personne</code> est la classe parent (superclasse)</li> <li><code>Etudiant</code> et <code>Professeur</code> sont des classes enfants (sous-classes)</li> <li>Les deux fl\u00e8ches d\u2019h\u00e9ritage <code>&lt;|--</code> indiquent que tant <code>Etudiant</code> que <code>Professeur</code> h\u00e9ritent de <code>Personne</code></li> <li>Chaque classe conserve ses propres attributs et m\u00e9thodes sp\u00e9cifiques</li> <li>Les m\u00e9thodes <code>toString()</code> dans <code>Etudiant</code> et <code>Professeur</code> sont des surcharges de la m\u00e9thode de la classe <code>Personne</code></li> </ul>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/02-exemples/#exemple-2","title":"Exemple 2","text":"<p>Voici un autre  exemple  de diagramme de classes pour les transactions bancaires :</p> <pre>a64fbc2bb274201edfbf4eb687cb8d63ef0a5a8c122265bcd29125523e030235c1e125e2c73d91dc415dbeb14f98a7696e05125b36b0cfaf6753dbd90e025d0f</pre> Source PlantUML <pre><code>@startuml\nskinparam classAttributeIconSize 0\n\nabstract class Transaction {\n    - String numeroCompte\n    # double montant\n    + Transaction(String numeroCompte, double montant)\n    + {abstract} void executer()\n    + {abstract} void annuler()\n    + {abstract} String genererRecu()\n}\n\nclass Retrait {\n    - String guichet\n    + Retrait(String numeroCompte, double montant, String guichet)\n    + void executer()\n    + void annuler()\n    + String genererRecu()\n}\n\nclass Depot {\n    - String typeDepot\n    + Depot(String numeroCompte, double montant, String typeDepot)\n    + void executer()\n    + void annuler()\n    + String genererRecu()\n}\n\nclass Virement {\n    - String compteDestinataire\n    - String motif\n    + Virement(String numeroCompte, String compteDestinataire, double montant, String motif)\n    + void executer()\n    + void annuler()\n    + String genererRecu()\n}\n\nclass Paiement {\n    - String beneficiaire\n    - String reference\n    + Paiement(String numeroCompte, double montant, String beneficiaire, String reference)\n    + void executer()\n    + void annuler()\n    + String genererRecu()\n}\n\nclass GestionnaireTransactions {\n    + {static} void executerTransaction(Transaction transaction)\n    + {static} void main(String[] args)\n}\n\nTransaction &lt;|-l- Retrait\nTransaction &lt;|-- Depot\nTransaction &lt;|-- Virement\nTransaction &lt;|-r- Paiement\nGestionnaireTransactions ..&gt; Transaction : utilise\n\n@enduml\n</code></pre> <p>Le diagramme montre maintenant :</p> <ul> <li>La classe abstraite <code>Transaction</code> avec ses m\u00e9thodes abstraites</li> <li>Les quatre classes d\u00e9riv\u00e9es: <code>Retrait</code>, <code>Depot</code>, <code>Virement</code> et <code>Paiement</code></li> <li>Chaque classe d\u00e9riv\u00e9e avec ses attributs et m\u00e9thodes sp\u00e9cifiques</li> <li>La classe <code>GestionnaireTransactions</code> qui utilise les transactions (relation de d\u00e9pendance)</li> <li>Les relations d\u2019h\u00e9ritage entre <code>Transaction</code> et ses classes d\u00e9riv\u00e9es</li> <li>La relation de d\u00e9pendance (ligne pointill\u00e9e) entre <code>GestionnaireTransactions</code> et <code>Transaction</code></li> </ul>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/02-exemples/#exemple-3","title":"Exemple 3","text":"<p>Voici un exemple de diagramme de classes pour l\u2019exemple  des animaux :</p> <pre>0c0c21843dab9cc201d8a718319e63481f0ce2942d4eca81596e3112ce61fdc5b8698986cefcf47bf1b8d79f77e1851a2853087ed17db9ed23f841e1f0f36cf9</pre> Source PlantUML <pre><code>@startuml\nskinparam classAttributeIconSize 0\n\nabstract class Animal {\n  # String nom\n  # int age\n  + {abstract} void respirer()\n  + void dormir()\n}\n\ninterface Nageable {\n  + void nager()\n}\n\ninterface Volant {\n  + void voler()\n}\n\nclass Dauphin {\n  + void respirer()\n  + void nager()\n}\n\nclass Chauve_Souris {\n  + void respirer()\n  + void voler()\n}\n\nAnimal &lt;|-- Dauphin\nAnimal &lt;|-- Chauve_Souris\nNageable &lt;|.. Dauphin\nVolant &lt;|.. Chauve_Souris\n\n@enduml\n</code></pre>"},{"location":"B.%20Programmation%20OO/5.%20Diagrammes%20de%20classe/02-exemples/#legende-du-diagramme","title":"L\u00e9gende du diagramme","text":"<p>Notation utilis\u00e9e :</p> <ul> <li>Les fl\u00e8ches pleines (&lt;|\u2013) indiquent l\u2019h\u00e9ritage de classe</li> <li>Les fl\u00e8ches en pointill\u00e9s (&lt;|..) repr\u00e9sentent l\u2019impl\u00e9mentation d\u2019interface</li> <li>Le # d\u00e9signe les membres prot\u00e9g\u00e9s</li> <li>Le + d\u00e9signe les membres publics</li> <li>{abstract} indique une m\u00e9thode abstraite</li> </ul> <p>Le diagramme illustre la structure compl\u00e8te avec une classe abstraite <code>Animal</code>, deux interfaces <code>Nageable</code> et <code>Volant</code>, et deux classes concr\u00e8tes <code>Dauphin</code> et <code>Chauve_Souris</code> qui \u00e9tendent <code>Animal</code> et impl\u00e9mentent chacune une interface  sp\u00e9cifique.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/01-introduction/","title":"Introduction","text":"<ul> <li>Github: https://github.com/profdenis/Shapes<ul> <li>HTTPS: https://github.com/profdenis/Shapes.git</li> <li>SSH: <code>git@github.com:profdenis/Shapes.git</code></li> </ul> </li> </ul> <p>Le projet <code>Shapes</code>, dans diff\u00e9rentes versions, sert \u00e0 d\u00e9montrer le dessin de diff\u00e9rentes formes sur une image. On peut cr\u00e9er une image d\u2019une largeur donn\u00e9e, puis dessiner diverses formes (point, lignes, triangle, rectangle, carr\u00e9, cercle et polygone) de diff\u00e9rentes couleurs sur cette image. On peut aussi enregistrer l\u2019image dans un fichier nomm\u00e9 PNG.</p> <p>Les diff\u00e9rentes versions du projet <code>Shapes</code> illustrent l\u2019\u00e9volution du code pour passer d\u2019une approche proc\u00e9durale \u00e0 une approche orient\u00e9e objet. La version initiale, <code>Version 1</code>, utilise une classe <code>Shapes</code> avec des m\u00e9thodes statiques pour dessiner les formes. Les versions ult\u00e9rieures introduisent des classes pour les diff\u00e9rentes formes g\u00e9om\u00e9triques, avec des m\u00e9thodes d\u2019instance pour les dessiner. Elles d\u00e9montrent aussi l\u2019utilisation des classes et m\u00e9thodes abstraites, et d\u2019autres concepts orient\u00e9s-objet comme le polymorphisme.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/","title":"La classe <code>Shapes</code>","text":"<ul> <li>Github: Shapes.java</li> </ul> Code <pre><code>package v1;\n\nimport java.awt.Color;\n\npublic class Shapes {\n    public static Color defaultColor = Color.BLACK;\n    public static Image image = new Image(400);\n\n    public static void drawPoint(int x, int y) {\n        drawPoint(x, y, defaultColor);\n    }\n\n    public static void drawPoint(int x, int y, Color color) {\n        image.SetPixel(x, y, color);\n    }\n\n    public static void drawHorizontalLine(int x1, int y1, int width) {\n        drawHorizontalLine(x1, y1, width, defaultColor);\n    }\n\n    public static void drawHorizontalLine(int x1, int y1, int width, Color color) {\n        for (int i = 0; i &lt; width; i++) {\n            drawPoint(x1 + i, y1, color);\n        }\n    }\n\n    public static void drawVerticalLine(int x1, int y1, int height) {\n        for (int j = 0; j &lt; height; j++) {\n            drawPoint(x1, y1 + j, defaultColor);\n        }\n    }\n\n    public static void drawVerticalLine(int x1, int y1, int height, Color color) {\n        for (int j = 0; j &lt; height; j++) {\n            drawPoint(x1, y1 + j, color);\n        }\n    }\n\n    public static void drawLine(int x1, int y1, int x2, int y2) {\n        drawLine(x1, y1, x2, y2, defaultColor);\n    }\n\n    public static void drawLine(int x1, int y1, int x2, int y2, Color color) {\n\n        // ligne verticale, il faut \u00e9viter une division par 0\n        if (x1 == x2) {\n            drawVerticalLine(x1, Math.min(y1, y2), Math.abs(y2 - y1) + 1, color);\n            return;\n        }\n\n        // \u00e9viter une division int/int qui entra\u00eenerait une impr\u00e9cision\n        double slope = (y2 - y1) / (double) (x2 - x1);\n        double intercept = y2 - slope * x2;\n\n        if (Math.abs(slope) &lt; 1) {\n            drawCloserToHorizontal(x1, x2, slope, intercept, color);\n        } else {\n            drawCloserToVertical(y1, y2, intercept, slope, color);\n        }\n    }\n\n    private static void drawCloserToVertical(int startY, int endY, double intercept, double slope, Color color) {\n        int minY = Math.min(startY, endY);\n        int maxY = Math.max(startY, endY);\n\n        for (int y = minY; y &lt;= maxY; y++) {\n            int x = (int) Math.round((y - intercept) / slope);\n            image.SetPixel(x, y, color);\n        }\n    }\n\n    private static void drawCloserToHorizontal(int startX, int endX, double slope, double intercept, Color color) {\n        int minX = Math.min(startX, endX);\n        int maxX = Math.max(startX, endX);\n\n        for (int x = minX; x &lt;= maxX; x++) {\n            int y = (int) Math.round(slope * x + intercept);\n            image.SetPixel(x, y, color);\n        }\n    }\n\n    public static void drawTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n        drawTriangle(x1, y1, x2, y2, x3, y3, defaultColor);\n    }\n\n    public static void drawTriangle(int x1, int y1, int x2, int y2, int x3, int y3, Color color) {\n        drawLine(x1, y1, x2, y2, color);\n        drawLine(x2, y2, x3, y3, color);\n        drawLine(x3, y3, x1, y1, color);\n    }\n\n    public static void drawRectangle(int x, int y, int width, int height) {\n        drawRectangle(x, y, width, height, defaultColor);\n    }\n\n    public static void drawRectangle(int x, int y, int width, int height, Color color) {\n        drawLine(x, y, x + width, y, color);\n        drawLine(x + width, y, x + width, y + height, color);\n        drawLine(x + width, y + height, x, y + height, color);\n        drawLine(x, y + height, x, y, color);\n    }\n\n    public static void drawSquare(int x, int y, int width) {\n        drawSquare(x, y, width, defaultColor);\n    }\n\n    public static void drawSquare(int x, int y, int width, Color color) {\n        //noinspection SuspiciousNameCombination\n        drawRectangle(x, y, width, width, color);\n    }\n\n    public static void drawPolyLine(int[] x, int[] y) {\n        drawPolyLine(x, y, defaultColor);\n    }\n\n    public static void drawPolyLine(int[] x, int[] y, Color color) {\n        for (int i = 1; i &lt; x.length; i++) {\n            drawLine(x[i - 1], y[i - 1], x[i], y[i], color);\n        }\n    }\n\n\n    public static void drawPolygon(int[] x, int[] y) {\n        drawPolygon(x, y, defaultColor);\n    }\n\n    public static void drawPolygon(int[] x, int[] y, Color color) {\n        drawPolyLine(x, y, color);\n        drawLine(x[0], y[0], x[x.length - 1], y[y.length - 1], color);\n\n    }\n\n    public static void drawCircle(int x, int y, int radius) {\n        drawCircle(x, y, radius, defaultColor);\n    }\n\n    public static void drawCircle(int x, int y, int radius, Color color) {\n        int cos45 = (int) Math.round(radius * Math.cos(Math.PI / 4));\n\n        for (int i = 0; i &lt;= cos45; i++) {\n            int j = (int) Math.round(Math.sqrt(radius * radius - i * i));\n            image.SetPixel(x + i, y + j, color); // point 1\n            image.SetPixel(x - i, y + j, color); // point 2: sym\u00e9trie du point 1 par rapport \u00e0 l'axe Y\n\n            image.SetPixel(x + i, y - j, color); // point 3: sym\u00e9trie du point 1 par rapport \u00e0 l'axe X\n            image.SetPixel(x - i, y - j, color); // point 4: sym\u00e9trie du point 3 par rapport \u00e0 l'axe Y\n\n            image.SetPixel(x + j, y + i, color); // point 5: sym\u00e9trie du point 1 par rapport \u00e0 la diagonale 45\u00b0\n            image.SetPixel(x + j, y - i, color); // point 6: sym\u00e9trie du point 5 par rapport \u00e0 l'axe X\n\n            image.SetPixel(x - j, y + i, color); // point 7: sym\u00e9trie du point 5 par rapport \u00e0 l'axe Y\n            image.SetPixel(x - j, y - i, color); // point 8: sym\u00e9trie du point 7 par rapport \u00e0 l'axe X\n        }\n    }\n}\n</code></pre> <p>La classe <code>Shapes</code> fournit des m\u00e9thodes statiques pour dessiner diff\u00e9rentes formes sur une image. Elle utilise une image <code>Image</code> de taille 400x400 pixels et une couleur par d\u00e9faut <code>Color.BLACK</code>.</p> <p>Voici une explication des m\u00e9thodes :</p> <ul> <li> <p>M\u00e9thodes de dessin de points et de lignes :</p> <ul> <li><code>drawPoint(x, y)</code> et <code>drawPoint(x, y, color)</code> : Dessine un point aux coordonn\u00e9es <code>(x, y)</code> avec la couleur   sp\u00e9cifi\u00e9e   ou la couleur par d\u00e9faut.</li> <li><code>drawHorizontalLine(x1, y1, width)</code> et <code>drawHorizontalLine(x1, y1, width, color)</code> : Dessine une ligne horizontale   \u00e0   partir de <code>(x1, y1)</code> sur une largeur donn\u00e9e.</li> <li><code>drawVerticalLine(x1, y1, height)</code> et <code>drawVerticalLine(x1, y1, height, color)</code> : Dessine une ligne verticale \u00e0   partir de <code>(x1, y1)</code> sur une hauteur donn\u00e9e.</li> <li><code>drawLine(x1, y1, x2, y2)</code> et <code>drawLine(x1, y1, x2, y2, color)</code> : Dessine une ligne entre les points <code>(x1, y1)</code> et   <code>(x2, y2)</code>. Elle g\u00e8re les cas particuliers des lignes verticales et optimise le dessin en fonction de la pente de   la   ligne.</li> </ul> </li> <li> <p>M\u00e9thodes de dessin de formes :</p> <ul> <li><code>drawTriangle(x1, y1, x2, y2, x3, y3)</code> et <code>drawTriangle(x1, y1, x2, y2, x3, y3, color)</code> : Dessine un triangle en   reliant les trois points donn\u00e9s.</li> <li><code>drawRectangle(x, y, width, height)</code> et <code>drawRectangle(x, y, width, height, color)</code> : Dessine un rectangle avec le   coin sup\u00e9rieur gauche \u00e0 (x, y), la largeur et la hauteur sp\u00e9cifi\u00e9es.</li> <li><code>drawSquare(x, y, width)</code> et <code>drawSquare(x, y, width, color)</code> : Dessine un carr\u00e9 avec le coin sup\u00e9rieur gauche \u00e0   <code>(x, y)</code> et le c\u00f4t\u00e9 de longueur <code>width</code>.</li> <li><code>drawPolyLine(x[], y[])</code> et <code>drawPolyLine(int[] x, int[] y, Color color)</code> : Dessine une ligne bris\u00e9e en reliant   les   points sp\u00e9cifi\u00e9s par les tableaux <code>x</code> et <code>y</code>.</li> <li><code>drawPolygon(x[], y[])</code> et <code>drawPolygon(int[] x, int[] y, Color color)</code> : Dessine un polygone en reliant les   points   sp\u00e9cifi\u00e9s par les tableaux x et y et en fermant le polygone.</li> <li><code>drawCircle(x, y, radius)</code> et <code>drawCircle(x, y, radius, color)</code> : Dessine un cercle de centre <code>(x, y)</code> et de rayon   <code>radius</code>. Il utilise une m\u00e9thode optimis\u00e9e pour dessiner des points sur le cercle en utilisant la sym\u00e9trie et les   propri\u00e9t\u00e9s du cercle.</li> </ul> </li> </ul> <p>Chaque m\u00e9thode de dessin a une version avec et sans le param\u00e8tre <code>color</code>. Si la couleur n\u2019est pas sp\u00e9cifi\u00e9e, la couleur par d\u00e9faut (<code>Color.BLACK</code>) est utilis\u00e9e. Toutes les m\u00e9thodes modifient directement l\u2019image <code>image</code> statique.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#methode-drawline","title":"M\u00e9thode <code>drawLine</code>","text":"<p>La m\u00e9thode <code>drawLine(int x1, int y1, int x2, int y2, Color color)</code> dessine une ligne entre les points <code>(x1, y1)</code> et <code>(x2, y2)</code> avec la couleur sp\u00e9cifi\u00e9e. Voici une explication d\u00e9taill\u00e9e :</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#cas-particulier-ligne-verticale","title":"Cas particulier : ligne verticale","text":"<p>Si <code>x1</code> est \u00e9gal \u00e0 <code>x2</code>, la ligne est verticale. Dans ce cas, la m\u00e9thode <code>drawVerticalLine</code> est appel\u00e9e pour dessiner la ligne. Ceci est important, car le calcul de la pente dans le cas g\u00e9n\u00e9ral impliquerait une division par z\u00e9ro.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#calcul-de-la-pente-et-de-lordonnee-a-lorigine","title":"Calcul de la pente et de l\u2019ordonn\u00e9e \u00e0 l\u2019origine","text":"<p>Si la ligne n\u2019est pas verticale, la pente (<code>slope</code>) et l\u2019ordonn\u00e9e \u00e0 l\u2019origine (<code>intercept</code>) sont calcul\u00e9es. Le calcul de la pente est effectu\u00e9 avec un cast en <code>double</code> pour l\u2019un des termes afin d\u2019\u00e9viter une division enti\u00e8re qui pourrait entra\u00eener une perte de pr\u00e9cision.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#optimisation-basee-sur-la-pente","title":"Optimisation bas\u00e9e sur la pente","text":"<p>La m\u00e9thode utilise une optimisation pour minimiser l\u2019effet d\u2019escalier (aliasing) :</p> <ul> <li>Si la valeur absolue de la pente est inf\u00e9rieure \u00e0 1, la ligne est plus proche de l\u2019horizontale. Dans ce cas, la   m\u00e9thode <code>drawCloserToHorizontal</code> est appel\u00e9e. Cette m\u00e9thode it\u00e8re sur les coordonn\u00e9es x et calcule la coordonn\u00e9e y   correspondante en utilisant l\u2019\u00e9quation de la droite : <code>y = slope * x + intercept</code>.</li> <li>Si la valeur absolue de la pente est sup\u00e9rieure ou \u00e9gale \u00e0 1, la ligne est plus proche de la verticale. Dans ce   cas, la m\u00e9thode <code>drawCloserToVertical</code> est appel\u00e9e. Cette m\u00e9thode it\u00e8re sur les coordonn\u00e9es y et calcule la coordonn\u00e9e   x correspondante en utilisant l\u2019\u00e9quation : <code>x = (y - intercept) / slope</code>.</li> </ul>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#drawclosertohorizontal","title":"<code>drawCloserToHorizontal</code>","text":"<p>Cette m\u00e9thode parcourt les valeurs de x entre <code>minX</code> et <code>maxX</code> (les valeurs minimales et maximales de x1 et x2). Pour chaque valeur de x, elle calcule la valeur de y correspondante \u00e0 l\u2019aide de l\u2019\u00e9quation de la droite et arrondit \u00e0 l\u2019entier le plus proche. Ensuite, elle appelle <code>image.SetPixel(x, y, color)</code> pour dessiner le point.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#drawclosertovertical","title":"<code>drawCloserToVertical</code>","text":"<p>Cette m\u00e9thode est similaire \u00e0 <code>drawCloserToHorizontal</code>, mais elle it\u00e8re sur les valeurs de y entre <code>minY</code> et <code>maxY</code>. Pour chaque valeur de y, elle calcule la valeur de x, l\u2019arrondit et dessine le point.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#resume","title":"R\u00e9sum\u00e9","text":"<p>En r\u00e9sum\u00e9, la m\u00e9thode <code>drawLine</code> g\u00e8re les cas particuliers des lignes verticales, calcule la pente et l\u2019ordonn\u00e9e \u00e0 l\u2019origine, puis choisit la m\u00e9thode de dessin la plus appropri\u00e9e en fonction de la pente pour minimiser l\u2019effet d\u2019escalier et dessiner une ligne plus lisse.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#methodes-drawclosertohorizontal-et-drawclosertovertical","title":"M\u00e9thodes <code>drawCloserToHorizontal</code> et <code>drawCloserToVertical</code>","text":""},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#drawclosertohorizontal_1","title":"<code>drawCloserToHorizontal</code>","text":"<p>Cette m\u00e9thode parcourt les valeurs de x entre <code>minX</code> et <code>maxX</code> (les valeurs minimales et maximales de x1 et x2). Pour chaque valeur de x, elle calcule la valeur de y correspondante \u00e0 l\u2019aide de l\u2019\u00e9quation de la droite et arrondit \u00e0 l\u2019entier le plus proche. Ensuite, elle appelle <code>image.SetPixel(x, y, color)</code> pour dessiner le point.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#drawclosertovertical_1","title":"<code>drawCloserToVertical</code>","text":"<p>Cette m\u00e9thode est similaire \u00e0 <code>drawCloserToHorizontal</code>, mais elle it\u00e8re sur les valeurs de y entre <code>minY</code> et <code>maxY</code>. Pour chaque valeur de y, elle calcule la valeur de x, l\u2019arrondit et dessine le point.</p> <p>Les variables <code>minX</code>, <code>maxX</code>, <code>minY</code> et <code>maxY</code> dans les m\u00e9thodes <code>drawCloserToHorizontal</code> et <code>drawCloserToVertical</code> sont essentielles pour d\u00e9terminer les bornes de l\u2019it\u00e9ration et garantir que la ligne est dessin\u00e9e correctement, quel que soit l\u2019ordre des points fournis.</p> <p>Voici pourquoi elles sont utiles :</p> <ul> <li> <p>Ind\u00e9pendance de l\u2019ordre des points : L\u2019utilisateur peut appeler <code>drawLine</code> avec <code>(x1, y1)</code> et <code>(x2, y2)</code> dans   n\u2019importe quel ordre.  <code>minX</code> et <code>maxX</code> (ou <code>minY</code> et <code>maxY</code>) garantissent que la boucle <code>for</code> it\u00e8re toujours du plus   petit au plus grand, quel que soit l\u2019ordre des points d\u2019entr\u00e9e. Sans ces variables, si <code>x1 &gt; x2</code>, la boucle <code>for</code> dans   <code>drawCloserToHorizontal</code> ne s\u2019ex\u00e9cuterait pas, et aucune ligne ne serait dessin\u00e9e.</p> </li> <li> <p>D\u00e9termination des bornes de la ligne : Ces variables d\u00e9finissent les limites du segment de droite \u00e0 dessiner.   Elles garantissent que tous les pixels entre les deux points sp\u00e9cifi\u00e9s sont parcourus et potentiellement color\u00e9s. Sans   ces limites, la ligne pourrait \u00eatre dessin\u00e9e au-del\u00e0 des points d\u2019extr\u00e9mit\u00e9 souhait\u00e9s ou \u00eatre incompl\u00e8te.</p> </li> <li> <p>Optimisation des performances : En d\u00e9terminant les bornes minimales et maximales, la boucle <code>for</code> it\u00e8re uniquement   sur les valeurs n\u00e9cessaires pour dessiner la ligne. Cela \u00e9vite des it\u00e9rations inutiles et optimise les performances du   dessin, en particulier pour les longues lignes.</p> </li> </ul> <p>En r\u00e9sum\u00e9, ces variables locales permettent de g\u00e9rer l\u2019ordre des points d\u2019entr\u00e9e, de d\u00e9finir les bornes correctes du segment de droite et d\u2019optimiser les performances du dessin. Elles sont donc cruciales pour le bon fonctionnement des m\u00e9thodes <code>drawCloserToHorizontal</code> et <code>drawCloserToVertical</code>.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#methode-drawpolyline","title":"M\u00e9thode <code>drawPolyLine</code>","text":"<p>La m\u00e9thode <code>drawPolyLine(int[] x, int[] y, Color color)</code> dessine une ligne bris\u00e9e en reliant les points sp\u00e9cifi\u00e9s par les tableaux <code>x</code> et <code>y</code> avec la couleur donn\u00e9e. La boucle <code>for</code> dans cette m\u00e9thode est au c\u0153ur de son fonctionnement :</p> <pre><code>for(int i = 1; i&lt;x.length;i++) {\n    drawLine(x[i-1], y[i-1], x[i], y[i], color);\n}\n</code></pre> <p>Voici une explication d\u00e9taill\u00e9e :</p> <ol> <li> <p>Initialisation : <code>int i = 1;</code></p> <p>La boucle commence \u00e0 l\u2019indice 1, et non \u00e0 0.</p> </li> <li> <p>Condition : <code>i &lt; x.length;</code> </p> <p>La boucle continue tant que <code>i</code> est strictement inf\u00e9rieur \u00e0 la longueur du tableau <code>x</code>. Ceci est important, car la     boucle acc\u00e8de aux \u00e9l\u00e9ments <code>x[i]</code> et <code>x[i-1]</code>.</p> </li> <li> <p>Incr\u00e9mentation : <code>i++;</code></p> <p>\u00c0 chaque it\u00e9ration, <code>i</code> est incr\u00e9ment\u00e9 de 1.</p> </li> <li> <p>Corps de la boucle : <code>drawLine(x[i - 1], y[i - 1], x[i], y[i], color);</code> </p> <p>Le corps de la boucle appelle la m\u00e9thode <code>drawLine</code> pour tracer un segment entre deux points cons\u00e9cutifs de la     ligne bris\u00e9e. Plus pr\u00e9cis\u00e9ment :</p> <ul> <li><code>x[i-1]</code> et <code>y[i-1]</code> sont les coordonn\u00e9es du point pr\u00e9c\u00e9dent.</li> <li><code>x[i]</code> et <code>y[i]</code> sont les coordonn\u00e9es du point actuel.</li> </ul> </li> </ol> <p>En r\u00e9sum\u00e9, la boucle it\u00e8re sur les tableaux de coordonn\u00e9es <code>x</code> et <code>y</code> et dessine des segments de droite entre chaque paire de points cons\u00e9cutifs, cr\u00e9ant ainsi la ligne bris\u00e9e.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#utilisation-de-drawpolyline-dans-drawpolygon","title":"Utilisation de <code>drawPolyLine</code> dans <code>drawPolygon</code>","text":"<p>La m\u00e9thode <code>drawPolygon(int[] x, int[] y, Color color)</code> utilise <code>drawPolyLine</code> pour dessiner un polygone ferm\u00e9. Voici comment :</p> <pre><code>drawPolyLine(x, y, color);\ndrawLine(x[0], y[0], x[x.length-1], y[y.length-1], color);\n</code></pre> <ol> <li> <p>Appel \u00e0 <code>drawPolyLine</code> : </p> <p>La m\u00e9thode appelle d\u2019abord <code>drawPolyLine</code> pour dessiner les c\u00f4t\u00e9s du polygone, sauf le    dernier c\u00f4t\u00e9 qui ferme le polygone.</p> </li> <li> <p>Fermeture du polygone : </p> <p>Ensuite, elle appelle <code>drawLine</code> pour dessiner le dernier segment entre le dernier point    <code>(x[x.length - 1], y[y.length - 1])</code> et le premier point <code>(x[0], y[0])</code>, fermant ainsi le polygone.</p> </li> </ol> <p>En combinant ces deux appels, <code>drawPolygon</code> dessine efficacement un polygone ferm\u00e9 en utilisant la fonctionnalit\u00e9 de <code>drawPolyLine</code> pour dessiner la majorit\u00e9 des c\u00f4t\u00e9s.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/01-shapes/#methode-drawcircle","title":"M\u00e9thode drawCircle","text":"<p>La m\u00e9thode <code>drawCircle(int x, int y, int radius, Color color)</code> dessine un cercle de centre (x, y) et de rayon <code>radius</code> avec la couleur sp\u00e9cifi\u00e9e. Elle utilise une approche optimis\u00e9e bas\u00e9e sur la sym\u00e9trie des cercles pour dessiner les points.</p> <p>Voici une explication d\u00e9taill\u00e9e :</p> <ol> <li> <p>Calcul de <code>cos45</code> : <pre><code>int cos45 = (int) Math.round(radius * Math.cos(Math.PI / 4));\n</code></pre>    Cette ligne calcule la valeur de x (ou y) lorsqu\u2019on est \u00e0 45 degr\u00e9s sur le cercle. Elle est utilis\u00e9e pour optimiser    la boucle, en it\u00e9rant seulement sur le premier octant du cercle (0 \u00e0 45 degr\u00e9s). Les autres points sont calcul\u00e9s par    sym\u00e9trie.</p> </li> <li> <p>Boucle principale : <pre><code>for (int i = 0; i &lt;= cos45; i++) {\n    // ...\n}\n</code></pre>    La boucle it\u00e8re de 0 jusqu\u2019\u00e0 <code>cos45</code>.  <code>i</code> repr\u00e9sente la coordonn\u00e9e x par rapport au centre du cercle.</p> </li> <li> <p>Calcul de <code>j</code> : <pre><code>int j = (int) Math.round(Math.sqrt(radius * radius - i * i));\n</code></pre>    \u00c0 chaque it\u00e9ration, <code>j</code> est calcul\u00e9.  <code>j</code> repr\u00e9sente la coordonn\u00e9e y par rapport au centre du cercle. Le calcul est    bas\u00e9 sur le th\u00e9or\u00e8me de Pythagore (\\(x^2 + y^2 = r^2\\)), o\u00f9 <code>i</code> est la coordonn\u00e9e x, <code>j</code> est la coordonn\u00e9e y et     <code>radius</code> est le rayon.</p> </li> <li> <p>Dessin des points par sym\u00e9trie :    Les lignes suivantes dessinent 8 points \u00e0 chaque it\u00e9ration en exploitant la sym\u00e9trie du cercle :    <pre><code>image.SetPixel(x + i, y + j, color); // point 1\nimage.SetPixel(x - i, y + j, color); // point 2: sym\u00e9trie du point 1 par rapport \u00e0 l'axe Y\nimage.SetPixel(x + i, y - j, color); // point 3: sym\u00e9trie du point 1 par rapport \u00e0 l'axe X\nimage.SetPixel(x - i, y - j, color); // point 4: sym\u00e9trie du point 3 par rapport \u00e0 l'axe Y\nimage.SetPixel(x + j, y + i, color); // point 5: sym\u00e9trie du point 1 par rapport \u00e0 la diagonale 45\u00b0\nimage.SetPixel(x + j, y - i, color); // point 6: sym\u00e9trie du point 5 par rapport \u00e0 l'axe X\nimage.SetPixel(x - j, y + i, color); // point 7: sym\u00e9trie du point 5 par rapport \u00e0 l'axe Y\nimage.SetPixel(x - j, y - i, color); // point 8: sym\u00e9trie du point 7 par rapport \u00e0 l'axe X\n</code></pre>    En dessinant 8 points \u00e0 la fois, la m\u00e9thode optimise le processus de dessin du cercle.</p> </li> </ol> <p>En r\u00e9sum\u00e9, la m\u00e9thode <code>drawCircle</code> utilise une approche efficace pour dessiner un cercle en it\u00e9rant sur un seul octant et en utilisant la sym\u00e9trie pour calculer et dessiner les autres points. Cela minimise les calculs et am\u00e9liore les performances.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/02-main/","title":"La classe <code>Main</code>","text":"<ul> <li>Github: Main.java</li> </ul> Code <pre><code>package v1;\n\nimport java.awt.Color;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Shapes.drawPoint(10, 200);\n        Shapes.drawHorizontalLine(10, 100, 100, Color.BLUE);\n        Shapes.drawLine(20, 20, 30, 200, Color.RED);\n        Shapes.drawLine(30, 30, 200, 40, Color.GREEN);\n        Shapes.drawLine(40, 40, 40, 100, Color.YELLOW);\n        Shapes.drawLine(50, 50, 200, 50, Color.CYAN);\n        Shapes.drawTriangle(25, 250, 200, 200, 100, 300);\n        Shapes.drawRectangle(100, 120, 220, 150, Color.MAGENTA);\n        Shapes.drawSquare(300, 10, 40, Color.DARK_GRAY);\n        Shapes.drawCircle(150, 150, 100, Color.ORANGE);\n        int[] x_values = {10, 200, 60, 300, 50};\n        int[] y_values = {310, 335, 370, 340, 399};\n//        Shapes.drawPolyLine(x_values, y_values, Color.PINK );\n        Shapes.drawPolygon(x_values, y_values, Color.PINK );\n\n        Shapes.image.Save(\"test1.png\");\n    }\n}\n</code></pre> <p>Le code dans la classe <code>Main</code> utilise la classe <code>Shapes</code> pour dessiner diff\u00e9rentes formes g\u00e9om\u00e9triques. Toutes les m\u00e9thodes de la classe <code>Shapes</code> sont statiques, ce qui signifie qu\u2019elles appartiennent \u00e0 la classe elle-m\u00eame et non \u00e0 une instance sp\u00e9cifique de la classe. C\u2019est pourquoi on appelle les m\u00e9thodes directement avec <code>Shapes.nomDeLaMethode()</code> au lieu de cr\u00e9er un objet <code>Shapes</code> avec <code>Shapes monObjet = new Shapes();</code> puis appeler la m\u00e9thode avec <code>monObjet.nomDeLaMethode()</code>.</p> <p>Utiliser uniquement des m\u00e9thodes statiques dans une classe comme <code>Shapes</code> est contraire aux principes de la programmation orient\u00e9e objet. L\u2019un des fondements de la POO est l\u2019utilisation d\u2019objets, qui combinent donn\u00e9es ( attributs) et comportement (m\u00e9thodes). En rendant toutes les m\u00e9thodes statiques, on ne cr\u00e9e pas d\u2019objets <code>Shapes</code> et on se prive des avantages de l\u2019encapsulation et de la possibilit\u00e9 d\u2019avoir plusieurs instances de <code>Shapes</code> avec des \u00e9tats diff\u00e9rents.</p> <p>Il est important de noter que cette approche est une simplification pour l\u2019exemple et que les versions ult\u00e9rieures du code, pr\u00e9sent\u00e9es plus tard dans le cours, utiliseront les principes de la POO de mani\u00e8re plus appropri\u00e9e.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/02-main/#resultat-test1png","title":"R\u00e9sultat : <code>test1.png</code>","text":"<p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%201/03-image/","title":"La classe <code>Image</code>","text":"<ul> <li>Github: Image.java</li> </ul> Code <pre><code>package v1;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Image {\n\n    public static int defaultWidth = 100;\n    public static int defaultHeight = 100;\n    public static Color defaultBackgroundColor = Color.WHITE;\n\n    public int width;\n    public int height;\n    public Color backgroundColor;\n    public BufferedImage bufferedImage;\n\n    public Image() {\n        this(defaultWidth, defaultHeight, defaultBackgroundColor);\n    }\n\n    public Image(int width) {\n        //noinspection SuspiciousNameCombination\n        this(width, width, defaultBackgroundColor);\n    }\n\n    public Image(int width, int height) {\n        this(width, height, defaultBackgroundColor);\n    }\n\n\n    public Image(int width, int height, Color backgroundColor) {\n        this.width = width;\n        this.height = height;\n        this.backgroundColor = backgroundColor;\n        bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        clear(this.backgroundColor);\n    }\n\n    public void clear(Color clearColor) {\n        for (int i = 0; i &lt; width; i++) {\n            for (int j = 0; j &lt; height; j++) {\n                setPixel(i, j, clearColor);\n            }\n        }\n    }\n\n    public Color getPixel(int x, int y) {\n        if (x &gt;= 0 &amp;&amp; x &lt; this.width &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; this.height) {\n            return getPixel(x, y);\n        }\n        // throw exception?\n        return backgroundColor;\n    }\n\n    public void setPixel(int x, int y, Color drawColor) {\n        if (x &gt;= 0 &amp;&amp; x &lt; this.width &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; this.height) {\n            bufferedImage.setRGB(x, y, drawColor.getRGB());\n        }\n    }\n\n    public void save(String filename) {\n        try {\n            File outputFile = new File(filename);\n            ImageIO.write(bufferedImage, \"PNG\", outputFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <p>La classe <code>Image</code> est une encapsulation simplifi\u00e9e de la classe <code>java.awt.image.BufferedImage</code> pour faciliter le dessin de formes g\u00e9om\u00e9triques et leur sauvegarde dans un fichier. Elle offre une interface plus intuitive pour manipuler une image en m\u00e9moire.</p> <p>Voici les principaux aspects de la classe :</p> <ul> <li> <p>Dimensions et couleur de fond </p> <ul> <li>Elle d\u00e9finit la largeur (<code>width</code>), la hauteur (<code>height</code>) et la couleur de fond     (<code>backgroundColor</code>) de l\u2019image. Des valeurs par d\u00e9faut sont fournies (<code>defaultWidth</code>, <code>defaultHeight</code>,     <code>defaultBackgroundColor</code>). Plusieurs constructeurs permettent de cr\u00e9er une image avec diff\u00e9rentes combinaisons de ces     param\u00e8tres.</li> </ul> </li> <li> <p><code>BufferedImage</code> </p> <ul> <li>L\u2019attribut <code>bufferedImage</code> est une instance de <code>java.awt.image.BufferedImage</code>, qui est la     repr\u00e9sentation sous-jacente de l\u2019image en m\u00e9moire.</li> </ul> </li> <li> <p><code>clear()</code></p> <ul> <li>Cette m\u00e9thode remplit l\u2019image avec la couleur sp\u00e9cifi\u00e9e, permettant d\u2019effacer le contenu pr\u00e9c\u00e9dent.</li> </ul> </li> <li> <p><code>getPixel()</code> et <code>setPixel()</code> </p> <ul> <li>Ces m\u00e9thodes permettent respectivement de lire et de modifier la couleur d\u2019un pixel     sp\u00e9cifique de l\u2019image. La m\u00e9thode <code>GetPixel()</code> retourne la couleur de fond par d\u00e9faut si les coordonn\u00e9es sont hors     limites, au lieu de g\u00e9n\u00e9rer une erreur.</li> </ul> </li> <li> <p><code>save()</code></p> <ul> <li>Cette m\u00e9thode enregistre l\u2019image dans un fichier au format PNG. Elle g\u00e8re les exceptions <code>IOException</code>     qui pourraient survenir lors de l\u2019\u00e9criture du fichier.</li> </ul> </li> </ul> <p>En r\u00e9sum\u00e9, la classe <code>Image</code> simplifie l\u2019utilisation de <code>BufferedImage</code> en fournissant une interface plus simple pour cr\u00e9er, manipuler et enregistrer des images. Elle masque la complexit\u00e9 de <code>BufferedImage</code> et offre des fonctionnalit\u00e9s de base pour le dessin, comme la d\u00e9finition de pixels et l\u2019effacement de l\u2019image.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de  structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/01-introduction/","title":"Introduction","text":"<p>La version 2 de la classe <code>Main</code> a pour but de dessiner diff\u00e9rentes formes sur une image, tout comme la version pr\u00e9c\u00e9dente, mais d\u2019une fa\u00e7on diff\u00e9rente. Elle initialise une image, puis dessine des formes vari\u00e9es telles que des points, des lignes, des triangles, des rectangles, des carr\u00e9s, des cercles et des polygones en utilisant leurs classes respectives et en sp\u00e9cifiant leurs propri\u00e9t\u00e9s comme la position, la taille et la couleur.</p> <p>Le processus de dessin est plus orient\u00e9 objet et organis\u00e9 par rapport \u00e0 la version pr\u00e9c\u00e9dente. Dans la version 1, la classe <code>Shapes</code> g\u00e9re toutes les op\u00e9rations de dessin directement via des m\u00e9thodes statiques, tandis que dans la version 2, des classes distinctes pour chaque type de forme sont utilis\u00e9es. Cela rend cette version plus modulaire et extensible. Les deux versions enregistrent ultimement l\u2019image r\u00e9sultante dans un fichier, mais la version 2 offre une meilleure structure de code et une meilleure maintenabilit\u00e9.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/02-main/","title":"La classe <code>Main</code>","text":"<ul> <li>Github: Main.java</li> </ul> Code <pre><code>package v2;\n\nimport v2.shapes.*;\n\nimport java.awt.Color;\n\npublic class Main {\n    public static void main(String[] args) {\n        int width = 400;\n        Image image = new Image(width);\n\n        Point p = new Point(10, 50, Color.BLUE);\n        p.draw(image);\n\n        HLine hline = new HLine(new Point(10, 10), 120, Color.RED);\n        hline.draw(image);\n\n        VLine vline = new VLine(new Point(20, 20), 120, Color.PINK);\n        vline.draw(image);\n\n        Line line1 = new Line(new Point(30, 30), new Point(50, 120), Color.GREEN);\n        line1.draw(image);\n\n        Line line2 = new Line(new Point(300, 150), new Point(70, 130), Color.MAGENTA);\n        line2.draw(image);\n\n        Triangle triangle = new Triangle(new Point(25, 250), new Point(200, 200), new Point(100, 300));\n        triangle.draw(image);\n\n        Rectangle rectangle = new Rectangle(new Point(100, 120), 220, 150, Color.MAGENTA);\n        rectangle.draw(image);\n\n        Square square = new Square(new Point(300, 10), 40, Color.GRAY);\n        square.draw(image);\n\n        Circle circle = new Circle(new Point(150, 150), 100, Color.ORANGE);\n        circle.draw(image);\n\n        Point[] points = {\n                new Point(10, 310),\n                new Point(200, 335),\n                new Point(60, 370),\n                new Point(300, 340),\n                new Point(50, 399)\n        };\n//        PolyLine polyLine = new PolyLine(points, Color.PINK);\n//        polyLine.Draw(image);\n\n        Polygon polygon = new Polygon(points, Color.CYAN);\n        polygon.draw(image);\n\n        image.save(\"test2.png\");\n    }\n}\n</code></pre> <p>La classe <code>Main</code> a pour but de d\u00e9montrer le dessin de diverses formes sur une image. D\u00e9composons le code \u00e9tape par \u00e9tape :</p> <ol> <li> <p>Initialisation de l\u2019image : Le code commence par cr\u00e9er un objet <code>Image</code> avec une largeur sp\u00e9cifi\u00e9e (400 pixels    dans ce cas). Cet objet <code>Image</code> servira de canevas pour le dessin.</p> </li> <li> <p>Cr\u00e9ation et dessin des formes : Le code proc\u00e8de ensuite \u00e0 la cr\u00e9ation d\u2019instances de diff\u00e9rentes classes de    formes :</p> <ul> <li><code>Point</code>: Un simple point avec des coordonn\u00e9es et une couleur.</li> <li><code>HLine</code>: Une ligne horizontale.</li> <li><code>VLine</code>: Une ligne verticale.</li> <li><code>Line</code>: Une ligne entre deux points.</li> <li><code>Triangle</code>: Un triangle d\u00e9fini par trois points.</li> <li><code>Rectangle</code>: Un rectangle.</li> <li><code>Square</code>: Un carr\u00e9.</li> <li><code>Circle</code>: Un cercle.</li> <li><code>Polygon</code>: Un polygone d\u00e9fini par un tableau de points.</li> </ul> </li> </ol> <p>Pour chaque forme, le code d\u00e9finit ses propri\u00e9t\u00e9s (position, taille, couleur) \u00e0 l\u2019aide du constructeur ou des    m\u00e9thodes setter. Ensuite, il appelle la m\u00e9thode <code>draw</code> sur chaque objet forme, en passant l\u2019objet <code>Image</code> comme    argument. Cette m\u00e9thode <code>draw</code> est responsable du dessin de la forme sp\u00e9cifique sur l\u2019image.</p> <ol> <li>Enregistrement de l\u2019image : Enfin, apr\u00e8s avoir dessin\u00e9 toutes les formes, le code appelle la m\u00e9thode <code>save</code> sur    l\u2019objet <code>Image</code> pour enregistrer l\u2019image r\u00e9sultante dans un fichier nomm\u00e9 \u00ab test2.png \u00bb.</li> </ol> <p>L\u2019am\u00e9lioration cl\u00e9 de <code>v2</code> par rapport \u00e0 une version pr\u00e9c\u00e9dente potentielle (<code>v1</code>) est son approche orient\u00e9e objet. Chaque forme est repr\u00e9sent\u00e9e par sa propre classe, ce qui rend le code plus organis\u00e9, modulaire et extensible. Cette s\u00e9paration des pr\u00e9occupations facilite la maintenance et l\u2019ajout de nouvelles formes \u00e0 l\u2019avenir.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/02-main/#resultat-test2png","title":"R\u00e9sultat : <code>test2.png</code>","text":"<p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/01-introduction/","title":"Introduction","text":"<p>Le package <code>shapes</code> contient les classes qui d\u00e9finissent diff\u00e9rentes formes g\u00e9om\u00e9triques telles que des points, des lignes, des triangles, des rectangles, des carr\u00e9s, des cercles et des polygones. Ces classes sont utilis\u00e9es pour dessiner les formes sur une image en sp\u00e9cifiant leurs propri\u00e9t\u00e9s comme la position, la taille et la couleur. Chaque classe de forme a ses propres m\u00e9thodes pour dessiner la forme sur une image donn\u00e9e.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/02-point/","title":"Classe <code>Point</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.Color;\n\npublic class Point {\n\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private int x;\n    private int y;\n\n    private Color drawColor;\n\n\n    public Point(int x, int y) {\n        this(x, y, defaultDrawColor);\n    }\n\n    public Point(int x, int y, Color color) {\n        this.x = x;\n        this.y = y;\n        this.drawColor = color;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public void draw(Image image) {\n        image.setPixel(x, y, drawColor);\n    }\n}\n</code></pre> <p>La classe <code>Point</code> repr\u00e9sente un point dans un espace bidimensionnel et poss\u00e8de des propri\u00e9t\u00e9s pour ses coordonn\u00e9es x et y, ainsi que pour sa couleur de dessin.</p> <p>Voici une explication des diff\u00e9rents \u00e9l\u00e9ments de la classe :</p> <ul> <li><code>defaultDrawColor</code>: Une constante statique qui d\u00e9finit la couleur de dessin par d\u00e9faut comme \u00e9tant le noir.</li> <li><code>x</code>: Une variable d\u2019instance enti\u00e8re qui repr\u00e9sente la coordonn\u00e9e x du point.</li> <li><code>y</code>: Une variable d\u2019instance enti\u00e8re qui repr\u00e9sente la coordonn\u00e9e y du point.</li> <li><code>drawColor</code>: Une variable d\u2019instance de type <code>Color</code> qui repr\u00e9sente la couleur utilis\u00e9e pour dessiner le point.</li> <li><code>Point(int x, int y)</code>: Un constructeur qui prend les coordonn\u00e9es x et y en arguments et initialise le point avec   la couleur de dessin par d\u00e9faut.</li> <li><code>Point(int x, int y, Color color)</code>: Un constructeur qui prend les coordonn\u00e9es x et y et une couleur en arguments   et initialise le point avec la couleur sp\u00e9cifi\u00e9e.</li> <li><code>getX()</code>: Une m\u00e9thode getter qui renvoie la coordonn\u00e9e x du point.</li> <li><code>setX(int x)</code>: Une m\u00e9thode setter qui d\u00e9finit la coordonn\u00e9e x du point.</li> <li><code>getY()</code>: Une m\u00e9thode getter qui renvoie la coordonn\u00e9e y du point.</li> <li><code>setY(int y)</code>: Une m\u00e9thode setter qui d\u00e9finit la coordonn\u00e9e y du point.</li> <li><code>getDrawColor()</code>: Une m\u00e9thode getter qui renvoie la couleur de dessin du point.</li> <li><code>setDrawColor(Color drawColor)</code>: Une m\u00e9thode setter qui d\u00e9finit la couleur de dessin du point.</li> <li><code>draw(Image image)</code>: Une m\u00e9thode qui dessine le point sur une image donn\u00e9e en utilisant la couleur de dessin   sp\u00e9cifi\u00e9e.</li> </ul> <p>En r\u00e9sum\u00e9, la classe <code>Point</code> fournit une repr\u00e9sentation simple d\u2019un point avec des coordonn\u00e9es et une couleur, ainsi que des m\u00e9thodes pour acc\u00e9der \u00e0 ces propri\u00e9t\u00e9s et dessiner le point sur une image.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/03-lignes/","title":"Classes <code>VLine</code>, <code>HLine</code> et <code>Line</code>","text":""},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/03-lignes/#classe-vline","title":"Classe <code>VLine</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.Color;\n\npublic class VLine {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point start;\n    private int height;\n    private Color drawColor;\n\n    public VLine(Point start, int height) {\n        this(start, height, defaultDrawColor);\n    }\n\n    public VLine(Point start, int height, Color drawColor) {\n        this.start = start;\n        this.height = height;\n        this.drawColor = drawColor;\n    }\n\n    public Point getStart() {\n        return start;\n    }\n\n    public void setStart(Point start) {\n        this.start = start;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n\n    public void draw(Image image) {\n        for (int j = 0; j &lt; height; j++) {\n            new Point(start.getX(), start.getY() + j, drawColor).draw(image);\n        }\n    }\n}\n</code></pre> <p>La classe <code>VLine</code> repr\u00e9sente une ligne verticale. Elle est con\u00e7ue pour dessiner une ligne verticale d\u2019une hauteur sp\u00e9cifi\u00e9e \u00e0 partir d\u2019un point donn\u00e9. Voici une explication :</p> <ol> <li> <p>Champs :</p> <ul> <li><code>start</code>: Un objet <code>Point</code> repr\u00e9sentant le point de d\u00e9part de la ligne verticale. Ce point d\u00e9termine les   coordonn\u00e9es x et y o\u00f9 la ligne commence.</li> <li><code>height</code>: Un entier repr\u00e9sentant la longueur verticale de la ligne.</li> <li><code>drawColor</code>: Un objet <code>Color</code> sp\u00e9cifiant la couleur de la ligne. Par d\u00e9faut, il est noir si aucune couleur n\u2019est   fournie.</li> </ul> </li> <li> <p>Constructeurs :</p> <ul> <li><code>VLine(Point start, int height)</code>: Cr\u00e9e un <code>VLine</code> avec le point de d\u00e9part et la hauteur sp\u00e9cifi\u00e9s, en utilisant la   couleur par d\u00e9faut (noir).</li> <li><code>VLine(Point start, int height, Color drawColor)</code>: Cr\u00e9e un <code>VLine</code> avec le point de d\u00e9part, la hauteur et la   couleur sp\u00e9cifi\u00e9s.</li> </ul> </li> <li> <p>M\u00e9thodes :</p> <ul> <li><code>getStart()</code>: Renvoie le <code>Point</code> de d\u00e9part de la ligne.</li> <li><code>setStart(Point start)</code>: D\u00e9finit le <code>Point</code> de d\u00e9part de la ligne.</li> <li><code>getHeight()</code>: Renvoie la hauteur de la ligne.</li> <li><code>setHeight(int height)</code>: D\u00e9finit la hauteur de la ligne.</li> <li><code>getDrawColor()</code>: Renvoie la couleur de dessin de la ligne.</li> <li><code>setDrawColor(Color drawColor)</code>: D\u00e9finit la couleur de dessin de la ligne.</li> <li><code>draw(Image image)</code>: Il s\u2019agit de la m\u00e9thode principale. Elle it\u00e8re <code>height</code> fois, dessinant un seul <code>Point</code> \u00e0   chaque position le long de la ligne verticale. La coordonn\u00e9e x reste constante (\u00e0 partir du point <code>start</code>), tandis   que la coordonn\u00e9e y est incr\u00e9ment\u00e9e \u00e0 chaque it\u00e9ration. Chaque point est dessin\u00e9 en utilisant la <code>drawColor</code>   sp\u00e9cifi\u00e9e sur l\u2019<code>Image</code> fournie.</li> </ul> </li> </ol> <p>En r\u00e9sum\u00e9, <code>VLine</code> simplifie le dessin d\u2019une ligne verticale en g\u00e9rant l\u2019it\u00e9ration et le dessin de points individuels dans sa m\u00e9thode <code>Draw</code>. Elle \u00e9vite les calculs redondants en dessinant point par point verticalement.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/03-lignes/#classe-hline","title":"Classe <code>HLine</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.Color;\n\npublic class HLine {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point start;\n    private int width;\n    private Color drawColor;\n\n    public HLine(Point start, int width) {\n        this(start, width, defaultDrawColor);\n    }\n\n    public HLine(Point start, int width, Color drawColor) {\n        this.start = start;\n        this.width = width;\n        this.drawColor = drawColor;\n    }\n\n    public Point getStart() {\n        return start;\n    }\n\n    public void setStart(Point start) {\n        this.start = start;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n\n    public void draw(Image image) {\n        for (int i = 0; i &lt; width; i++) {\n            new Point(start.getX() + i, start.getY(), drawColor).draw(image);\n        }\n    }\n}\n</code></pre> <p>La classe <code>HLine</code> est tr\u00e8s similaire \u00e0 <code>VLine</code>, mais elle dessine une ligne horizontale. La principale diff\u00e9rence r\u00e9side dans la fa\u00e7on dont la m\u00e9thode <code>Draw</code> fonctionne :</p> <ul> <li><code>HLine.draw(Image image)</code>: Au lieu d\u2019incr\u00e9menter la coordonn\u00e9e y comme dans <code>VLine</code>, <code>HLine</code> incr\u00e9mente la   coordonn\u00e9e x. La boucle <code>for</code> parcourt la <code>largeur</code> de la ligne :</li> </ul> <pre><code>for(int i = 0; i&lt;width; i++) {\n        new Point(start.getX() + i, start.getY(),drawColor).draw(image);\n}\n</code></pre> <p>\u00c0 chaque it\u00e9ration, un nouveau <code>Point</code> est cr\u00e9\u00e9 avec :</p> <ul> <li><code>start.getX() + i</code>: La coordonn\u00e9e x est incr\u00e9ment\u00e9e de <code>i</code> \u00e0 chaque \u00e9tape, d\u00e9pla\u00e7ant le dessin horizontalement vers   la droite.</li> <li><code>start.getY()</code>: La coordonn\u00e9e y reste constante, maintenant le dessin sur la m\u00eame ligne horizontale.</li> <li><code>drawColor</code>: La couleur sp\u00e9cifi\u00e9e pour la ligne.</li> </ul> <p>Ce <code>Point</code> est ensuite dessin\u00e9 sur l\u2019<code>Image</code> fournie.</p> <p>En r\u00e9sum\u00e9, la principale diff\u00e9rence entre <code>HLine</code> et <code>VLine</code> est la direction dans laquelle la ligne est dessin\u00e9e. <code>HLine</code> dessine horizontalement en incr\u00e9mentant x, tandis que <code>VLine</code> dessine verticalement en incr\u00e9mentant y. Le reste de la structure de la classe (champs, constructeurs, getters/setters) est quasiment identique.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/03-lignes/#classe-line","title":"Classe <code>Line</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.Color;\n\npublic class Line {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point start;\n    private Point end;\n    private Color drawColor;\n\n    public Line(Point start, Point end) {\n        this(start, end, defaultDrawColor);\n    }\n\n    public Line(Point start, Point end, Color drawColor) {\n        this.start = start;\n        this.end = end;\n        this.drawColor = drawColor;\n    }\n\n    public Point getStart() {\n        return start;\n    }\n\n    public void setStart(Point start) {\n        this.start = start;\n    }\n\n    public Point getHeight() {\n        return end;\n    }\n\n    public void setHeight(Point end) {\n        this.end = end;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public void draw(Image image) {\n        // ligne verticale, il faut \u00e9viter une division par 0\n        if (start.getX() == end.getX()) {\n            VLine vline = new VLine(start, Math.abs(end.getY() - start.getY()) + 1, drawColor);\n            vline.Draw(image);\n            return;\n        }\n\n        // \u00e9viter une division int/int qui entra\u00eenerait une impr\u00e9cision\n        double slope = (end.getY() - start.getY()) / (double) (end.getX() - start.getX());\n        double intercept = end.getY() - slope * end.getX();\n\n        if (Math.abs(slope) &lt; 1) {\n            drawCloserToHorizontal(image, start.getX(), end.getX(), slope, intercept, drawColor);\n        } else {\n            drawCloserToVertical(image, start.getY(), end.getY(), intercept, slope, drawColor);\n        }\n    }\n\n    private static void drawCloserToVertical(Image image, int startY, int endY, double intercept, double slope, Color color) {\n        int minY = Math.min(startY, endY);\n        int maxY = Math.max(startY, endY);\n\n        for (int y = minY; y &lt;= maxY; y++) {\n            int x = (int) Math.round((y - intercept) / slope);\n            image.setPixel(x, y, color);\n        }\n    }\n\n    private static void drawCloserToHorizontal(Image image, int startX, int endX, double slope, double intercept, Color color) {\n        int minX = Math.min(startX, endX);\n        int maxX = Math.max(startX, endX);\n\n        for (int x = minX; x &lt;= maxX; x++) {\n            int y = (int) Math.round(slope * x + intercept);\n            image.setPixel(x, y, color);\n        }\n    }\n\n}\n</code></pre> <p>La classe <code>Line</code> est plus g\u00e9n\u00e9rale que <code>HLine</code> et <code>VLine</code>, car elle peut dessiner des lignes dans n\u2019importe quelle direction, pas seulement horizontales ou verticales. Voici les principales diff\u00e9rences :</p> <ol> <li> <p>Champs : Au lieu d\u2019une <code>hauteur</code> ou d\u2019une <code>largeur</code>, <code>Line</code> poss\u00e8de deux points : <code>start</code> et <code>end</code>, qui d\u00e9finissent    les extr\u00e9mit\u00e9s de la ligne.</p> </li> <li> <p>M\u00e9thode <code>draw</code> plus complexe : La m\u00e9thode <code>Draw</code> de <code>Line</code> est nettement plus sophistiqu\u00e9e. Elle g\u00e8re plusieurs    cas :</p> <ul> <li> <p>Lignes verticales : Si <code>start.getX()</code> est \u00e9gal \u00e0 <code>end.getX()</code>, la ligne est verticale. Dans ce cas, la m\u00e9thode   cr\u00e9e une instance de <code>VLine</code> et utilise sa m\u00e9thode <code>draw</code> pour dessiner la ligne. Ceci est une optimisation pour   \u00e9viter une division par z\u00e9ro dans le calcul de la pente.</p> </li> <li> <p>Calcul de la pente et de l\u2019ordonn\u00e9e \u00e0 l\u2019origine : Si la ligne n\u2019est pas verticale, la m\u00e9thode calcule la   pente (<code>slope</code>) et l\u2019ordonn\u00e9e \u00e0 l\u2019origine (<code>intercept</code>) de la ligne \u00e0 l\u2019aide des coordonn\u00e9es des points <code>start</code> et   <code>end</code>. Le calcul de la pente est converti en <code>double</code> pour \u00e9viter les impr\u00e9cisions li\u00e9es \u00e0 la division d\u2019entiers.</p> </li> <li> <p>Optimisation du dessin : Pour optimiser le dessin, la m\u00e9thode choisit entre deux algorithmes en fonction de la   pente :</p> <ul> <li>Si la valeur absolue de la pente est inf\u00e9rieure \u00e0 1 (ligne plus proche de l\u2019horizontale), la m\u00e9thode   <code>drawCloserToHorizontal</code> est utilis\u00e9e. Cette m\u00e9thode it\u00e8re sur les coordonn\u00e9es x et calcule la coordonn\u00e9e y   correspondante.</li> <li>Si la valeur absolue de la pente est sup\u00e9rieure ou \u00e9gale \u00e0 1 (ligne plus proche de la verticale), la m\u00e9thode   <code>drawCloserToVertical</code> est utilis\u00e9e. Cette m\u00e9thode it\u00e8re sur les coordonn\u00e9es y et calcule la coordonn\u00e9e x   correspondante.</li> </ul> </li> <li> <p>M\u00e9thodes <code>drawCloserToHorizontal</code> et <code>drawCloserToVertical</code>: Ces m\u00e9thodes parcourent l\u2019intervalle des   coordonn\u00e9es x ou y, respectivement, et calculent l\u2019autre coordonn\u00e9e en utilisant la pente et l\u2019ordonn\u00e9e \u00e0   l\u2019origine. La fonction <code>Math.round</code> est utilis\u00e9e pour arrondir les coordonn\u00e9es calcul\u00e9es \u00e0 l\u2019entier le plus   proche. Enfin, la m\u00e9thode <code>SetPixel</code> de l\u2019objet <code>Image</code> est appel\u00e9e pour dessiner chaque point de la ligne.</p> </li> </ul> </li> </ol> <p>En r\u00e9sum\u00e9, <code>Line</code> est une classe plus g\u00e9n\u00e9rale et flexible pour dessiner des lignes de toutes orientations. Sa m\u00e9thode <code>draw</code> utilise des optimisations et g\u00e8re les cas particuliers pour garantir un dessin pr\u00e9cis et efficace. L\u2019utilisation de <code>VLine</code> pour les lignes verticales est un bon exemple de r\u00e9utilisation de code et de gestion des cas limites.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/04-rectangle/","title":"Classes <code>Rectangle</code> et <code>Square</code>","text":""},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/04-rectangle/#classe-rectangle","title":"Classe <code>Rectangle</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.*;\n\npublic class Rectangle {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point topLeft;\n    private int width;\n    private int height;\n\n    private Color drawColor;\n\n    public Rectangle(Point topLeft, int width, int height) {\n        this(topLeft, width, height, defaultDrawColor);\n    }\n\n    public Rectangle(Point topLeft, int width, int height, Color drawColor) {\n        this.topLeft = topLeft;\n        this.width = width;\n        this.height = height;\n        this.drawColor = drawColor;\n    }\n\n    public Point getTopLeft() {\n        return topLeft;\n    }\n\n    public void setTopLeft(Point topLeft) {\n        this.topLeft = topLeft;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public void draw(Image image) {\n        new VLine(topLeft, height, drawColor).draw(image);\n        new HLine(topLeft, width, drawColor).draw(image);\n        new VLine(new Point(topLeft.getX() + width, topLeft.getY()), height, drawColor).draw(image);\n        new HLine(new Point(topLeft.getX(), topLeft.getY() + height), width, drawColor).draw(image);\n    }\n}\n</code></pre> <p>La classe <code>Rectangle</code> repr\u00e9sente un rectangle et fournit des m\u00e9thodes pour le dessiner sur une image. D\u00e9composons le code :</p> <p>Champs :</p> <ul> <li><code>topLeft</code>: Un objet <code>Point</code> repr\u00e9sentant le coin sup\u00e9rieur gauche du rectangle.</li> <li><code>width</code>: Un entier repr\u00e9sentant la largeur du rectangle.</li> <li><code>height</code>: Un entier repr\u00e9sentant la hauteur du rectangle.</li> <li><code>drawColor</code>: Un objet <code>Color</code> repr\u00e9sentant la couleur utilis\u00e9e pour dessiner le rectangle. Par d\u00e9faut, il est noir (   <code>defaultDrawColor</code>).</li> </ul> <p>Constructeurs :</p> <ul> <li><code>Rectangle(Point topLeft, int width, int height)</code>: Ce constructeur prend le coin sup\u00e9rieur gauche, la largeur et la   hauteur du rectangle. Il utilise la couleur de dessin par d\u00e9faut (noir).</li> <li><code>Rectangle(Point topLeft, int width, int height, Color drawColor)</code>: Ce constructeur prend le coin sup\u00e9rieur gauche, la   largeur, la hauteur et la couleur de dessin du rectangle.</li> </ul> <p>M\u00e9thodes :</p> <ul> <li><code>getTopLeft()</code>: Renvoie le point du coin sup\u00e9rieur gauche du rectangle.</li> <li><code>setTopLeft(Point topLeft)</code>: D\u00e9finit le point du coin sup\u00e9rieur gauche du rectangle.</li> <li><code>getWidth()</code>: Renvoie la largeur du rectangle.</li> <li><code>setWidth(int width)</code>: D\u00e9finit la largeur du rectangle.</li> <li><code>getHeight()</code>: Renvoie la hauteur du rectangle.</li> <li><code>setHeight(int height)</code>: D\u00e9finit la hauteur du rectangle.</li> <li><code>getDrawColor()</code>: Renvoie la couleur de dessin du rectangle.</li> <li><code>setDrawColor(Color drawColor)</code>: D\u00e9finit la couleur de dessin du rectangle.</li> <li><code>draw(Image image)</code>: Cette m\u00e9thode dessine le rectangle sur l\u2019image donn\u00e9e. Pour ce faire, elle dessine quatre   lignes :   deux verticales et deux horizontales, \u00e0 l\u2019aide des classes <code>VLine</code> et <code>HLine</code> (probablement d\u00e9finies ailleurs dans le   code). Elle utilise la <code>drawColor</code> du rectangle pour les lignes.</li> </ul> <p>En r\u00e9sum\u00e9, la classe <code>Rectangle</code> encapsule les propri\u00e9t\u00e9s d\u2019un rectangle et fournit un moyen de le dessiner sur une image en utilisant ses dimensions et sa couleur d\u00e9finies.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/04-rectangle/#classe-square","title":"Classe <code>Square</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.*;\n\npublic class Square {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point topLeft;\n    private int width;\n\n    private Color drawColor;\n\n    public Square(Point topLeft, int width) {\n        this(topLeft, width, defaultDrawColor);\n    }\n\n    public Square(Point topLeft, int width, Color drawColor) {\n        this.topLeft = topLeft;\n        this.width = width;\n        this.drawColor = drawColor;\n    }\n\n    public Point getTopLeft() {\n        return topLeft;\n    }\n\n    public void setTopLeft(Point topLeft) {\n        this.topLeft = topLeft;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public void draw(Image image) {\n        //noinspection SuspiciousNameCombination\n        new Rectangle(topLeft, width, width, drawColor).draw(image);\n    }\n}\n</code></pre> <p>La classe <code>Square</code> repr\u00e9sente un carr\u00e9. Elle est similaire \u00e0 la classe <code>Rectangle</code>, mais avec quelques diff\u00e9rences cl\u00e9s :</p> <p>Champs :</p> <ul> <li><code>topLeft</code>: Un objet <code>Point</code> repr\u00e9sentant le coin sup\u00e9rieur gauche du carr\u00e9. Identique \u00e0 <code>Rectangle</code>.</li> <li><code>width</code>: Un entier repr\u00e9sentant la largeur du carr\u00e9. Dans le cas d\u2019un carr\u00e9, la largeur est \u00e9galement la hauteur.</li> <li><code>drawColor</code>: Un objet <code>Color</code> repr\u00e9sentant la couleur utilis\u00e9e pour dessiner le carr\u00e9. Par d\u00e9faut, il est noir   (<code>defaultDrawColor</code>). Identique \u00e0 <code>Rectangle</code>.</li> </ul> <p>Remarquez l\u2019absence d\u2019un champ <code>height</code>. Puisqu\u2019un carr\u00e9 a des c\u00f4t\u00e9s \u00e9gaux, seule la <code>width</code> est n\u00e9cessaire.</p> <p>Constructeurs :</p> <ul> <li><code>Square(Point topLeft, int width)</code>: Ce constructeur prend le coin sup\u00e9rieur gauche et la largeur du carr\u00e9. Il utilise   la couleur de dessin par d\u00e9faut (noir).</li> <li><code>Square(Point topLeft, int width, Color drawColor)</code>: Ce constructeur prend le coin sup\u00e9rieur gauche, la largeur et la   couleur de dessin du carr\u00e9.</li> </ul> <p>Similaire \u00e0 <code>Rectangle</code>, mais sans la hauteur.</p> <p>M\u00e9thodes :</p> <ul> <li><code>getTopLeft()</code>, <code>setTopLeft(Point topLeft)</code>, <code>getWidth()</code>, <code>setWidth(int width)</code>, <code>getDrawColor()</code>, et   <code>setDrawColor(Color drawColor)</code>: Fonctionnent de la m\u00eame mani\u00e8re que dans <code>Rectangle</code>.</li> <li><code>draw(Image image)</code>: Cette m\u00e9thode dessine le carr\u00e9 sur l\u2019image donn\u00e9e. Au lieu de dessiner quatre lignes   individuelles, elle utilise la m\u00e9thode <code>draw()</code> de la classe <code>Rectangle</code> en lui passant la largeur pour \u00e0 la fois la   largeur et la hauteur, dessinant ainsi un carr\u00e9. C\u2019est une diff\u00e9rence importante dans l\u2019impl\u00e9mentation.</li> </ul> <p>En r\u00e9sum\u00e9, puisqu\u2019un carr\u00e9 est un rectangle avec la contrainte suppl\u00e9mentaire que la hauteur et la largeur sont \u00e9gales, <code>Square</code> et <code>Rectangle</code> se ressemblent beaucoup. <code>Square</code> simplifie la repr\u00e9sentation d\u2019un carr\u00e9 en utilisant seulement la largeur et en d\u00e9l\u00e9guant le dessin \u00e0 la classe <code>Rectangle</code>.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/05-polygon/","title":"Classes <code>PolyLine</code> et <code>Polygon</code>","text":""},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/05-polygon/#classe-polyline","title":"Classe <code>PolyLine</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.Color;\n\npublic class PolyLine {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point[] points;\n\n    private Color drawColor;\n\n    public PolyLine(Point[] points) {\n        this(points, defaultDrawColor);\n    }\n\n    public PolyLine(Point[] points, Color drawColor) {\n        this.points = points;\n        this.drawColor = drawColor;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public Point[] getPoints() {\n        return points;\n    }\n\n    public void setPoints(Point[] points) {\n        this.points = points;\n    }\n\n    public void draw(Image image) {\n        for (int i = 1; i &lt; points.length; i++) {\n            new Line(points[i - 1], points[i], drawColor).draw(image);\n        }\n    }\n}\n</code></pre> <p>La classe <code>PolyLine</code> repr\u00e9sente une s\u00e9rie de segments de ligne connect\u00e9s. Elle prend en entr\u00e9e un tableau d\u2019objets <code>Point</code>, qui d\u00e9finissent les sommets de la \u201cpolyligne\u201d (ligne bris\u00e9e, ou segment\u00e9e). Elle poss\u00e8de \u00e9galement une propri\u00e9t\u00e9 <code>drawColor</code> pour sp\u00e9cifier la couleur des segments de ligne.</p> <p>La m\u00e9thode <code>draw</code> it\u00e8re \u00e0 travers le tableau <code>points</code>, dessinant un segment de <code>Line</code> entre chaque paire de points cons\u00e9cutifs en utilisant la <code>drawColor</code> sp\u00e9cifi\u00e9e. En effet, elle dessine une ligne de <code>points[0]</code> \u00e0 <code>points[1]</code>, puis de <code>points[1]</code> \u00e0 <code>points[2]</code>, et ainsi de suite, jusqu\u2019\u00e0 ce que le dernier point soit atteint.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/05-polygon/#classe-polygon","title":"Classe <code>Polygon</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.*;\n\npublic class Polygon {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point[] points;\n\n    private Color drawColor;\n\n    public Polygon(Point[] points) {\n        this(points, defaultDrawColor);\n    }\n\n    public Polygon(Point[] points, Color drawColor) {\n        this.points = points;\n        this.drawColor = drawColor;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public Point[] getPoints() {\n        return points;\n    }\n\n    public void setPoints(Point[] points) {\n        this.points = points;\n    }\n\n    public void draw(Image image) {\n        new PolyLine(points, drawColor).draw(image);\n        new Line(points[0], points[points.length - 1], drawColor).draw(image);\n    }\n}\n</code></pre> <p>La classe <code>Polygon</code> repr\u00e9sente un polygone ferm\u00e9. Comme <code>PolyLine</code>, elle utilise un tableau de <code>Point</code> pour ses sommets et une <code>drawColor</code> pour la couleur.</p> <p>La principale diff\u00e9rence r\u00e9side dans la m\u00e9thode <code>draw</code>.  <code>Polygon</code> dessine non seulement une ligne entre chaque paire de points cons\u00e9cutifs (comme le fait <code>PolyLine</code>), mais elle dessine \u00e9galement une ligne fermant le polygone, entre le dernier point (<code>points[points.length - 1]</code>) et le premier point (<code>points[0]</code>). Elle utilise <code>PolyLine</code> pour dessiner les segments connect\u00e9s et ensuite dessine explicitement la ligne fermante avec <code>new Line(points[0], points[points.length - 1], drawColor).draw(image);</code>. Cela cr\u00e9e un polygone complet plut\u00f4t qu\u2019une simple ligne bris\u00e9e.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%202/Package%20shapes/06-cercle/","title":"Classe <code>Circle</code>","text":"Code <pre><code>package v2.shapes;\n\nimport java.awt.*;\n\n@SuppressWarnings(\"DuplicatedCode\")\npublic class Circle {\n    public static final Color defaultDrawColor = Color.BLACK;\n\n    private Point center;\n    private int radius;\n\n    private Color drawColor;\n\n    public Circle(Point center, int radius) {\n        this(center, radius, defaultDrawColor);\n    }\n\n    public Circle(Point center, int radius, Color drawColor) {\n        this.center = center;\n        this.radius = radius;\n        this.drawColor = drawColor;\n    }\n\n    public Point getCenter() {\n        return center;\n    }\n\n    public void setCenter(Point center) {\n        this.center = center;\n    }\n\n    public int getRadius() {\n        return radius;\n    }\n\n    public void setRadius(int radius) {\n        this.radius = radius;\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public void draw(Image image) {\n        int cos45 = (int) Math.round(radius * Math.cos(Math.PI / 4));\n\n        for (int i = 0; i &lt;= cos45; i++) {\n            int j = (int) Math.round(Math.sqrt(radius * radius - i * i));\n            image.setPixel(center.getX() + i, center.getY() + j, drawColor); // point 1\n            image.setPixel(center.getX() - i, center.getY() + j, drawColor); // point 2: sym\u00e9trie du point 1 par rapport \u00e0 l'axe Y\n\n            image.setPixel(center.getX() + i, center.getY() - j, drawColor); // point 3: sym\u00e9trie du point 1 par rapport \u00e0 l'axe X\n            image.setPixel(center.getX() - i, center.getY() - j, drawColor); // point 4: sym\u00e9trie du point 3 par rapport \u00e0 l'axe Y\n\n            image.setPixel(center.getX() + j, center.getY() + i, drawColor); // point 5: sym\u00e9trie du point 1 par rapport \u00e0 la diagonale 45\u00b0\n            image.setPixel(center.getX() + j, center.getY() - i, drawColor); // point 6: sym\u00e9trie du point 5 par rapport \u00e0 l'acenter.getX()e X\n\n            image.setPixel(center.getX() - j, center.getY() + i, drawColor); // point 7: sym\u00e9trie du point 5 par rapport \u00e0 l'axe Y\n            image.setPixel(center.getX() - j, center.getY() - i, drawColor); // point 8: sym\u00e9trie du point 7 par rapport \u00e0 l'axe X\n        }\n    }\n}\n</code></pre> <p>La classe <code>Circle</code> repr\u00e9sente un cercle et fournit des m\u00e9thodes pour le dessiner sur une image. D\u00e9taillons la m\u00e9thode <code>Draw</code> :</p> <pre><code>public void draw(Image image) {\n    int cos45 = (int) Math.round(radius * Math.cos(Math.PI / 4));\n\n    for (int i = 0; i &lt;= cos45; i++) {\n        int j = (int) Math.round(Math.sqrt(radius * radius - i * i));\n        image.setPixel(center.getX() + i, center.getY() + j, drawColor); // point 1\n        // ... autres points\n    }\n}\n</code></pre> <p>La m\u00e9thode <code>draw</code> prend un objet <code>Image</code> en param\u00e8tre, sur lequel le cercle sera dessin\u00e9. Elle utilise un algorithme simple pour dessiner le cercle point par point en exploitant les sym\u00e9tries du cercle :</p> <ol> <li> <p>Calcul de <code>cos45</code>: <code>cos45</code> est utilis\u00e9 pour optimiser la boucle. Il repr\u00e9sente la distance horizontale ou    verticale entre le centre du cercle et le point \u00e0 45 degr\u00e9s. La boucle it\u00e8re donc de 0 jusqu\u2019\u00e0 cette valeur pour    couvrir un octant du cercle. Les autres points sont calcul\u00e9s par sym\u00e9trie.</p> </li> <li> <p>Boucle principale : La boucle <code>for</code> it\u00e8re de <code>i = 0</code> \u00e0 <code>cos45</code>.  <code>i</code> repr\u00e9sente la distance horizontale par    rapport au centre du cercle.</p> </li> <li> <p>Calcul de <code>j</code>: \u00c0 l\u2019int\u00e9rieur de la boucle, <code>j</code> est calcul\u00e9.  <code>j</code> repr\u00e9sente la distance verticale correspondante    \u00e0 <code>i</code> pour un point sur le cercle. L\u2019\u00e9quation du cercle est \\(x^2 + y^2 = r^2\\), donc y = sqrt(r\u00b2 - x\u00b2), o\u00f9<code>i</code> joue le     r\u00f4le de x et <code>j</code> celui de y.</p> </li> <li> <p>Dessin des points : Les lignes suivantes dessinent 8 points sym\u00e9triques sur l\u2019image en utilisant    <code>image.setPixel()</code>. Chaque appel \u00e0 <code>setPixel()</code> prend les coordonn\u00e9es x et y du point et la couleur <code>drawColor</code> du    cercle. Les 8 points sont calcul\u00e9s comme suit :</p> <ul> <li>Point 1: <code>(x + i, y + j)</code> - Point initial dans le premier octant</li> <li>Point 2: <code>(x - i, y + j)</code> - Sym\u00e9trique du point 1 par rapport \u00e0 l\u2019axe Y</li> <li>Point 3: <code>(x + i, y - j)</code> - Sym\u00e9trique du point 1 par rapport \u00e0 l\u2019axe X</li> <li>Point 4: <code>(x - i, y - j)</code> - Sym\u00e9trique du point 3 par rapport \u00e0 l\u2019axe Y</li> <li>Point 5: <code>(x + j, y + i)</code> - Sym\u00e9trique du point 1 par rapport \u00e0 la diagonale \u00e0 45\u00b0</li> <li>Point 6: <code>(x + j, y - i)</code> - Sym\u00e9trique du point 5 par rapport \u00e0 l\u2019axe X</li> <li>Point 7: <code>(x - j, y + i)</code> - Sym\u00e9trique du point 5 par rapport \u00e0 l\u2019axe Y</li> <li>Point 8: <code>(x - j, y - i)</code> - Sym\u00e9trique du point 7 par rapport \u00e0 l\u2019axe X</li> </ul> </li> </ol> <p>En dessinant ces 8 points \u00e0 chaque it\u00e9ration, la m\u00e9thode <code>draw</code> dessine efficacement un cercle complet.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/01-introduction/","title":"Introduction","text":"Code <pre><code>package v3.shapes;\n\nimport java.awt.Color;\n\npublic abstract class Shape\n{\n    public static Color defaultDrawColor = Color.BLACK;\n    public Color drawColor;\n\n    protected Shape(Color drawColor)\n    {\n        this.drawColor = drawColor;\n    }\n\n    protected Shape()\n    {\n        this(defaultDrawColor);\n    }\n\n    public Color getDrawColor() {\n        return drawColor;\n    }\n\n    public void setDrawColor(Color drawColor) {\n        this.drawColor = drawColor;\n    }\n\n    public abstract void draw(Image image);\n}\n</code></pre> <p>Dans cette version, la classe <code>Shape</code> est une classe de base abstraite pour toutes les formes. Elle centralise les propri\u00e9t\u00e9s et les comportements communs \u00e0 toutes les formes. Dans cet exemple, la propri\u00e9t\u00e9 commune est la couleur de dessin (<code>drawColor</code>).</p> <p>Elle est d\u00e9clar\u00e9e abstraite pour deux raisons principales :</p> <ol> <li> <p>Impossibilit\u00e9 d\u2019instancier directement : Une forme \u201cg\u00e9n\u00e9rique\u201d n\u2019a pas de sens en soi. On ne peut pas dessiner    une \u201cforme\u201d sans plus de pr\u00e9cisions. L\u2019abstraction emp\u00eache la cr\u00e9ation d\u2019objets <code>Shape</code> directement. On doit cr\u00e9er    des instances de classes concr\u00e8tes comme <code>Point</code> ou <code>Circle</code>.</p> </li> <li> <p>D\u00e9finition d\u2019un contrat : La m\u00e9thode <code>draw</code> est d\u00e9clar\u00e9e abstraite dans <code>Shape</code>. Cela oblige toutes les classes    d\u00e9riv\u00e9es (comme <code>Point</code> et <code>Circle</code>) \u00e0 fournir leur propre impl\u00e9mentation de la m\u00e9thode <code>draw</code>. Chaque forme doit    savoir se dessiner elle-m\u00eame. C\u2019est ce qu\u2019on appelle un \u201ccontrat\u201d : toute classe qui h\u00e9rite de <code>Shape</code> s\u2019engage \u00e0    impl\u00e9menter <code>draw</code>.</p> </li> </ol> <p>En r\u00e9sum\u00e9, <code>Shape</code> fournit un mod\u00e8le commun pour les formes, g\u00e8re les propri\u00e9t\u00e9s partag\u00e9es, et impose aux formes concr\u00e8tes de d\u00e9finir comment elles se dessinent.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/02-point/","title":"Classe <code>Point</code>","text":"Code <pre><code>package v3.shapes;\n\nimport java.awt.Color;\n\npublic class Point extends Shape {\n    private int x;\n    private int y;\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        if (x &lt; 0) {\n            throw new IllegalArgumentException(\"X cannot be negative\");\n        }\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        if (y &lt; 0) {\n            throw new IllegalArgumentException(\"X cannot be negative\");\n        }\n        this.y = y;\n    }\n\n\n    public Point(int x, int y, Color drawColor) {\n        super(drawColor);\n        setX(x);\n        setY(y);\n    }\n\n    public Point(int x, int y) {\n        this(x, y, Shape.defaultDrawColor);\n    }\n\n    public void draw(Image image) {\n        image.setPixel(x, y, drawColor);\n    }\n\n    @Override\n    public String toString() {\n        return \"Point{\" +\n                \"x=\" + x +\n                \", y=\" + y +\n                '}';\n    }\n}\n</code></pre> <p>La nouvelle version de <code>Point</code> diff\u00e8rent principalement de la v2 par sa relation avec la classe <code>Shape</code> et la gestion des coordonn\u00e9es :</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/02-point/#version-2","title":"Version 2","text":"<ul> <li>Classe ind\u00e9pendante : <code>Point</code> est une classe autonome, sans h\u00e9ritage.</li> <li>Gestion des couleurs : La couleur de dessin (<code>drawColor</code>) est g\u00e9r\u00e9e directement dans la classe <code>Point</code>, avec une   valeur par d\u00e9faut (<code>defaultDrawColor</code>).</li> <li>Pas de validation des coordonn\u00e9es : Les coordonn\u00e9es <code>x</code> et <code>y</code> peuvent prendre n\u2019importe quelle valeur enti\u00e8re, y   compris des valeurs n\u00e9gatives.</li> </ul>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/02-point/#version-3","title":"Version 3","text":"<ul> <li>H\u00e9ritage de <code>Shape</code> : <code>Point</code> h\u00e9rite de la classe <code>Shape</code>, h\u00e9ritant ainsi de la propri\u00e9t\u00e9 <code>drawColor</code> et de ses   m\u00e9thodes associ\u00e9es.</li> <li>Validation des coordonn\u00e9es : Les m\u00e9thodes <code>setX</code> et <code>setY</code> valident maintenant les coordonn\u00e9es pour s\u2019assurer    qu\u2019elles ne sont pas n\u00e9gatives, levant une exception <code>IllegalArgumentException</code> si n\u00e9cessaire. Ceci ajoute une    s\u00e9curit\u00e9 et une coh\u00e9rence au code.</li> </ul> <p>En r\u00e9sum\u00e9, la version 3 de <code>Point</code> est plus robuste et mieux int\u00e9gr\u00e9e \u00e0 la hi\u00e9rarchie des formes gr\u00e2ce \u00e0 l\u2019h\u00e9ritage de <code>Shape</code>. La validation des coordonn\u00e9es am\u00e9liore \u00e9galement la qualit\u00e9 du code.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/03-cercle/","title":"Classe <code>Circle</code>","text":"Code <pre><code>package v3.shapes;\n\nimport java.awt.Color;\n\npublic class Circle extends Shape {\n    private Point center;\n    private int radius;\n\n    public Point getCenter() {\n        return center;\n    }\n\n    public void setCenter(Point center) {\n        this.center = center;\n    }\n\n    public int getRadius() {\n        return radius;\n    }\n\n    public void setRadius(int radius) {\n        this.radius = radius;\n    }\n\n    public Circle(Point center, int radius, Color drawColor)\n    {\n        super(drawColor);\n        this.center = center;\n        this.radius = radius;\n    }\n\n    public Circle(Point center, int radius)\n    {\n        this(center, radius, defaultDrawColor);\n    }\n\n    @Override\n    public void draw(Image image) {\n        int x = 0;\n        int y = radius;\n        int d = 3 - 2 * radius;\n        drawCirclePoints(image, center.getX(), center.getY(), x, y);\n        while (y &gt;= x) {\n            x++;\n            if (d &gt; 0) {\n                y--;\n                d = d + 4 * (x - y) + 10;\n            } else {\n                d = d + 4 * x + 6;\n            }\n            drawCirclePoints(image, center.getX(), center.getY(), x, y);\n        }\n    }\n\n    private void drawCirclePoints(Image image, int x, int y, int x1, int y1) {\n        image.setPixel(x + x1, y + y1, drawColor);\n        image.setPixel(x - x1, y + y1, drawColor);\n        image.setPixel(x + x1, y - y1, drawColor);\n        image.setPixel(x - x1, y - y1, drawColor);\n        image.setPixel(x + y1, y + x1, drawColor);\n        image.setPixel(x - y1, y + x1, drawColor);\n        image.setPixel(x + y1, y - x1, drawColor);\n        image.setPixel(x - y1, y - x1, drawColor);\n    }\n}\n</code></pre> <p>Les diff\u00e9rences principales entre les versions 2 et 3 de <code>Circle</code> r\u00e9sident dans l\u2019h\u00e9ritage, la gestion de la couleur et l\u2019algorithme de dessin :</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/03-cercle/#version-2","title":"Version 2","text":"<ul> <li>Classe ind\u00e9pendante : <code>Circle</code> est une classe autonome sans h\u00e9ritage.</li> <li>Gestion des couleurs : La couleur de dessin (<code>drawColor</code>) est g\u00e9r\u00e9e directement dans la classe<code>Circle</code>, avec une   valeur par d\u00e9faut (<code>defaultDrawColor</code>).</li> <li>Algorithme de dessin : Utilise un algorithme bas\u00e9 sur le calcul de points sym\u00e9triques pour dessiner le cercle. Cet   algorithme est relativement simple, mais peut \u00eatre moins pr\u00e9cis et performant pour les grands rayons.</li> </ul>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/03-cercle/#version-3","title":"Version 3","text":"<ul> <li>H\u00e9ritage de <code>Shape</code> : <code>Circle</code> h\u00e9rite de la classe <code>Shape</code>, h\u00e9ritant ainsi de la propri\u00e9t\u00e9 <code>drawColor</code> et de ses   m\u00e9thodes associ\u00e9es. Cela r\u00e9duit la redondance de code et am\u00e9liore la coh\u00e9rence.</li> <li>Algorithme de dessin : Utilise l\u2019algorithme de Bresenham pour tracer le cercle. Cet algorithme est plus efficace et   pr\u00e9cis que celui utilis\u00e9 dans la version 2, en particulier pour les grands cercles. Il utilise des op\u00e9rations   enti\u00e8res, ce qui le rend plus rapide. La logique est encapsul\u00e9e dans la m\u00e9thode priv\u00e9e <code>drawCirclePoints</code>.</li> </ul> <p>En r\u00e9sum\u00e9, la version 3 de <code>Circle</code> b\u00e9n\u00e9ficie de l\u2019h\u00e9ritage de <code>Shape</code> pour une meilleure structure du code. L\u2019utilisation de l\u2019algorithme de Bresenham am\u00e9liore significativement les performances et la pr\u00e9cision du dessin.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/04-polymorphisme/","title":"Polymorphisme","text":"<p>Regrouper les similarit\u00e9s entre les classes de formes (comme dans la v3 avec <code>Shape</code>) offre plusieurs avantages :</p> <ul> <li>R\u00e9duction de la redondance de code : Au lieu de r\u00e9p\u00e9ter le code pour la couleur et potentiellement d\u2019autres   propri\u00e9t\u00e9s communes dans chaque classe de forme (<code>Point</code>, <code>Circle</code>, <code>Rectangle</code>, etc.), on les d\u00e9finit une seule fois   dans <code>Shape</code>. Cela simplifie la maintenance et l\u2019\u00e9volution du code.</li> <li>Coh\u00e9rence :  Toutes les formes partagent un comportement et des propri\u00e9t\u00e9s communs, assurant une coh\u00e9rence dans   leur utilisation.</li> <li>Extensibilit\u00e9 :  L\u2019ajout de nouvelles formes est simplifi\u00e9, car elles h\u00e9ritent automatiquement des propri\u00e9t\u00e9s et   m\u00e9thodes de <code>Shape</code>. Il suffit d\u2019impl\u00e9menter les sp\u00e9cificit\u00e9s de la nouvelle forme.</li> <li>Polymorphisme :  C\u2019est le point cl\u00e9 pour utiliser des collections de formes. On peut manipuler un ensemble de   formes diff\u00e9rentes (points, cercles, etc.) de mani\u00e8re g\u00e9n\u00e9rique, sans se soucier de leur type sp\u00e9cifique.</li> </ul>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/04-polymorphisme/#polymorphisme-avec-une-arraylist-de-shape","title":"Polymorphisme avec une <code>ArrayList</code> de <code>Shape</code>","text":"<p>L\u2019int\u00e9r\u00eat principal de <code>Shape</code> est de permettre le polymorphisme. On peut cr\u00e9er une <code>ArrayList</code> de <code>Shape</code> et y stocker des objets de types diff\u00e9rents qui h\u00e9ritent de <code>Shape</code> (comme <code>Point</code>, <code>Circle</code>, etc.). Ensuite, on peut parcourir cette liste et appeler la m\u00e9thode <code>draw()</code> sur chaque \u00e9l\u00e9ment. Gr\u00e2ce au polymorphisme, la bonne version de <code>draw()</code> sera appel\u00e9e automatiquement en fonction du type r\u00e9el de l\u2019objet.</p>"},{"location":"C.%20Figures%20g%C3%A9om%C3%A9triques/Version%203/04-polymorphisme/#exemple","title":"Exemple","text":"<pre><code>import v3.shapes.*;\n\nimport java.awt.Color;\nimport java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList&lt;Shape&gt; shapes = new ArrayList&lt;&gt;();\n        shapes.add(new Point(10, 20, Color.RED));\n        shapes.add(new Circle(new Point(50, 50), 30, Color.BLUE));\n        // ... ajouter d'autres formes ...\n\n        Image image = new Image(200, 200); // Supposons une classe Image pour le dessin\n\n        for (Shape shape : shapes) {\n            shape.draw(image); // Appel polymorphe de draw()\n        }\n\n        // ... afficher l'image ...\n    }\n}\n</code></pre> <p>Dans cet exemple, m\u00eame si <code>shapes</code> contient des objets de types diff\u00e9rents, l\u2019appel \u00e0 <code>shape.draw(image)</code> appelle la m\u00e9thode <code>draw()</code> appropri\u00e9e pour chaque forme (celle de <code>Point</code>, celle de <code>Circle</code>, etc.). C\u2019est la puissance du polymorphisme.</p> <p>Note</p> <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"D.%20Menu/01-menu-v1/","title":"La classe <code>Menu</code>, version 1","text":"<ul> <li>Github: v1/Menu.java</li> </ul> <pre><code>package v1;\n\nimport java.util.Scanner;\n\npublic class Menu {\n\n    public static void main(String[] args) {\n        boolean done = false;\n        Scanner scanner = new Scanner(System.in);\n\n        while (!done) {\n            showMenu();\n            String option = scanner.nextLine();\n            done = handleOption(option);\n        }\n\n        scanner.close();\n    }\n\n    public static void showMenu() {\n        System.out.println(\"Choisissez une option :\");\n        System.out.println(\"1. Option 1\");\n        System.out.println(\"2. Option 2\");\n        System.out.println(\"3. Option 3\");\n        System.out.println(\"4. Quitter\");\n    }\n\n    public static boolean handleOption(String option) {\n        switch (option) {\n            case \"1\":\n                System.out.println(\"Vous avez choisi l'option 1 !\");\n                break;\n            case \"2\":\n                System.out.println(\"Vous avez choisi l'option 2 !\");\n                break;\n            case \"3\":\n                System.out.println(\"Vous avez choisi l'option 3 !\");\n                break;\n            case \"4\":\n                System.out.println(\"Vous voulez quitter !\");\n                return true;\n            default:\n                System.out.println(\"Option invalide. SVP choisir une option valide.\");\n        }\n        return false;\n    }\n}\n</code></pre> <p>Avertissement</p> <p>Cet exemple n\u2019est pas un programme complet, mais une premi\u00e8re version d\u2019un exemple de structure de menu pouvant  \u00eatre utilis\u00e9 dans un programme plus complet.</p> <p>Voici une explication du code de la classe <code>Menu</code> :</p> <p>La classe <code>Menu</code> pr\u00e9sente un menu interactif \u00e0 l\u2019utilisateur dans la console. Elle utilise une boucle <code>while</code> pour afficher le menu de fa\u00e7on r\u00e9p\u00e9t\u00e9e jusqu\u2019\u00e0 ce que l\u2019utilisateur choisisse de quitter. Examinons les m\u00e9thodes :</p> <ul> <li> <p><code>main(String[] args)</code> :</p> <ul> <li>C\u2019est le point d\u2019entr\u00e9e du programme.</li> <li>Elle initialise une variable bool\u00e9enne <code>done</code> \u00e0 <code>false</code>.</li> <li>Elle cr\u00e9e un <code>Scanner</code> pour lire l\u2019entr\u00e9e de l\u2019utilisateur.</li> <li>Elle entre dans une boucle <code>while</code> qui continue tant que <code>done</code> est <code>false</code>.</li> <li>\u00c0 l\u2019int\u00e9rieur de la boucle :<ul> <li>Elle appelle <code>showMenu()</code> pour afficher les options du menu.</li> <li>Elle lit l\u2019entr\u00e9e de l\u2019utilisateur et la stocke dans la variable <code>option</code>.</li> <li>Elle appelle <code>handleOption(option)</code> pour traiter l\u2019option choisie par l\u2019utilisateur. Le r\u00e9sultat (une valeur   bool\u00e9enne indiquant si l\u2019utilisateur veut quitter) est stock\u00e9 dans la variable <code>done</code>.</li> </ul> </li> <li>Elle ferme le <code>scanner</code>.</li> </ul> </li> <li> <p><code>showMenu()</code> :</p> <ul> <li>Cette m\u00e9thode affiche simplement les options du menu \u00e0 la console en utilisant <code>System.out.println()</code>.</li> </ul> </li> <li> <p><code>handleOption(String option)</code> :</p> <ul> <li>Cette m\u00e9thode prend l\u2019<code>option</code> de l\u2019utilisateur (une <code>String</code>) comme entr\u00e9e.</li> <li>Elle utilise une instruction <code>switch</code> pour d\u00e9terminer l\u2019action \u00e0 effectuer en fonction de l\u2019option choisie.</li> <li>Si l\u2019option est \u00ab 1 \u00bb, \u00ab 2 \u00bb ou \u00ab 3 \u00bb, elle affiche un message indiquant l\u2019option choisie.</li> <li>Si l\u2019option est \u00ab 4 \u00bb, elle affiche un message de sortie et renvoie <code>true</code> (pour indiquer que l\u2019utilisateur veut   quitter).</li> <li>Si l\u2019option n\u2019est pas valide, elle affiche un message d\u2019erreur et renvoie <code>false</code> (pour que la boucle <code>while</code>   continue).</li> </ul> </li> </ul> <p>En r\u00e9sum\u00e9, le programme affiche un menu, lit le choix de l\u2019utilisateur, traite le choix et r\u00e9p\u00e8te ce processus jusqu\u2019\u00e0 ce que l\u2019utilisateur choisisse l\u2019option \u00ab 4 \u00bb (Quitter).</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"D.%20Menu/02-menu-v2/","title":"La classe <code>Menu</code>, version 2","text":"<ul> <li>Github: v2/Menu.java</li> </ul> <pre><code>package v2;\n\nimport java.util.Scanner;\n\npublic class Menu {\n\n    public static void main(String[] args) {\n        boolean done = false;\n        Scanner scanner = new Scanner(System.in);\n\n        while (!done) {\n            showMainMenu();\n            String option = scanner.nextLine();\n            done = handleMainMenuOption(option);\n        }\n\n        scanner.close();\n    }\n\n    public static void showMainMenu() {\n        System.out.println(\"Choisissez une option :\");\n        System.out.println(\"1. Sous-menu (1 fois)\");\n        System.out.println(\"2. Sous-menu (boucle)\");\n        System.out.println(\"3. Option 3\");\n        System.out.println(\"4. Quitter\");\n    }\n\n    public static void showSubMenu() {\n        System.out.println(\"Choisissez une option :\");\n        System.out.println(\"a. Option a\");\n        System.out.println(\"b. Option b\");\n        System.out.println(\"c. Option c\");\n        System.out.println(\"d. Quitter\");\n    }\n\n    public static boolean handleMainMenuOption(String option) {\n        Scanner scanner = new Scanner(System.in);\n        String subOption;\n\n        switch (option) {\n            case \"1\":\n                System.out.println(\"Vous avez choisi l'option 1 !\");\n                showSubMenu();\n                subOption = scanner.nextLine();\n                // ignore la valeur de retour parce que le sous-menu est ex\u00e9cut\u00e9 une seule fois, pas de boucle ici ; on\n                // pourrait utiliser la valeur de retour pour d\u00e9terminer si une option valide a \u00e9t\u00e9 s\u00e9lectionn\u00e9e ou non\n                handleSubMenuOption(subOption);\n                break;\n            case \"2\":\n                // plusieurs lignes de code dans un seul bloc case, probablement mieux de les extraire dans une m\u00e9thode\n                System.out.println(\"Vous avez choisi l'option 2 !\");\n                boolean done = false;\n                while (!done) {\n                    showSubMenu();\n                    subOption = scanner.nextLine();\n                    done = handleSubMenuOption(subOption);\n                }\n                break;\n            case \"3\":\n                System.out.println(\"Vous avez choisi l'option 3 !\");\n                break;\n            case \"4\":\n                System.out.println(\"Vous voulez quitter !\");\n                scanner.close();\n                return true;\n            default:\n                System.out.println(\"Option invalide. SVP choisir une option valide.\");\n        }\n\n        // on doit fermer le scanner \u00e0 2 endroits parce qu'on retourne \u00e0 2 endroits\n        // exercice : modifier le code pour \u00e9viter de devoir fermer le scanner \u00e0 2 endroits\n        scanner.close();\n        return false;\n    }\n\n    public static boolean handleSubMenuOption(String option) {\n        switch (option) {\n            case \"a\":\n                System.out.println(\"Vous avez choisi l'option a !\");\n                break;\n            case \"b\":\n                System.out.println(\"Vous avez choisi l'option b !\");\n                break;\n            case \"c\":\n                System.out.println(\"Vous avez choisi l'option c !\");\n                break;\n            case \"d\":\n                System.out.println(\"Vous voulez quitter le sous-menu!\");\n                return true;\n            default:\n                System.out.println(\"Option invalide. SVP choisir une option valide.\");\n        }\n        return false;\n    }\n}\n</code></pre> <p>Avertissement</p> <p>Cet exemple n\u2019est pas un programme complet, mais la deuxi\u00e8me version d\u2019un exemple de structure de menu pouvant  \u00eatre utilis\u00e9 dans un programme plus complet.</p> <p>La v2 de la classe <code>Menu</code> introduit la notion de sous-menu, ce qui repr\u00e9sente la principale diff\u00e9rence avec la v1. Voici les changements importants :</p> <ul> <li>Ajout d\u2019un sous-menu : La v2 inclut un nouveau sous-menu, accessible via les options 1 et 2 du menu principal. Ce   sous-menu poss\u00e8de ses propres options (a, b, c et d). La m\u00e9thode <code>showSubMenu()</code> affiche les options de ce sous-menu.</li> <li><code>showMainMenu()</code> et <code>handleMainMenuOption()</code> : L\u2019ancienne m\u00e9thode <code>showMenu()</code> a \u00e9t\u00e9 renomm\u00e9e en <code>showMainMenu()</code>   et <code>handleOption()</code> en <code>handleMainMenuOption()</code> pour plus de clart\u00e9, et pour refl\u00e9ter l\u2019ajout d\u2019un menu principal   distinct du sous-menu.</li> <li>Comportement diff\u00e9rent des options 1 et 2 :<ul> <li>Option 1:  Affiche le sous-menu une seule fois. L\u2019utilisateur choisit une option du sous-menu, puis revient au   menu principal. Il est \u00e0 noter que la valeur de retour de <code>handleSubMenuOption</code> est ignor\u00e9e dans ce cas.</li> <li>Option 2: Affiche le sous-menu en boucle, jusqu\u2019\u00e0 ce que l\u2019utilisateur choisisse de quitter le sous-menu   (option d). Cela est impl\u00e9ment\u00e9 avec une boucle <code>while</code> similaire \u00e0 celle du menu principal.</li> </ul> </li> <li><code>handleSubMenuOption()</code> : Cette nouvelle m\u00e9thode g\u00e8re les options du sous-menu. Elle renvoie <code>true</code> si   l\u2019utilisateur choisit de quitter le sous-menu (option d), et <code>false</code> sinon. Ce comportement permet la boucle dans   l\u2019option 2 du menu principal.</li> </ul> <p>En r\u00e9sum\u00e9, la v2 offre une structure de menu plus complexe avec un sous-menu, permettant une navigation hi\u00e9rarchique. L\u2019option 1 du menu principal affiche le sous-menu une seule fois, tandis que l\u2019option 2 l\u2019affiche en boucle. Le code est \u00e9galement plus organis\u00e9 avec des noms de m\u00e9thodes plus descriptifs.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"},{"location":"D.%20Menu/03-menu-v3/","title":"La classe <code>Menu</code>, version 3","text":"<p>Github: </p> <ul> <li>v3/Menu.java</li> <li>main.txt</li> <li>sub.txt</li> </ul> v3/Menu.java<pre><code>package v3;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Menu {\n\n    // utilise un scanner static pour \u00e9viter de cr\u00e9er et de fermer un scanner \u00e0 plusieurs reprises\n    private static final Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        boolean done = false;\n\n        while (!done) {\n            if (showMenu(\"main\")) {\n                String option = scanner.nextLine();\n                done = handleMainMenuOption(option);\n            } else {\n                done = true;\n            }\n        }\n    }\n\n    private static Map&lt;String, String&gt; menuStrings = new HashMap&lt;&gt;();\n\n    public static boolean showMenu(String name) {\n        if (!menuStrings.containsKey(name)) {\n            try {\n                String menuPath = \"menu/\" + name + \".txt\";\n                byte[] menuBytes = Files.readAllBytes(Paths.get(menuPath));\n                menuStrings.put(name, new String(menuBytes));\n            } catch (IOException e) {\n                System.err.println(\"Error reading menu content: \" + e.getMessage());\n                return false;\n            }\n        }\n        System.out.println(menuStrings.get(name));\n        return true;\n    }\n\n    public static boolean handleMainMenuOption(String option) {\n        switch (option) {\n            case \"1\":\n                handleMainMenuCase1();\n                break;\n            case \"2\":\n                handleMainMenuCase2();\n                break;\n            case \"3\":\n                System.out.println(\"Vous avez choisi l'option 3 !\");\n                break;\n            case \"4\":\n                System.out.println(\"Vous voulez quitter !\");\n                return true;\n            default:\n                System.out.println(\"Option invalide. SVP choisir une option valide.\");\n        }\n        return false;\n    }\n\n    private static void handleMainMenuCase1() {\n        System.out.println(\"Vous avez choisi l'option 1 !\");\n        if (showMenu(\"sub\")) {\n            String option = scanner.nextLine();\n            // ignore la valeur de retour parce que le sous-menu est ex\u00e9cut\u00e9 une seule fois, pas de boucle ici ;\n            // on pourrait utiliser la valeur de retour pour d\u00e9terminer si une option valide a \u00e9t\u00e9 s\u00e9lectionn\u00e9e\n            // ou non\n            handleSubMenuOption(option);\n        }\n    }\n\n    private static void handleMainMenuCase2() {\n        System.out.println(\"Vous avez choisi l'option 2 !\");\n        boolean done = false;\n        while (!done) {\n            if (showMenu(\"sub\")) {\n                String option = scanner.nextLine();\n                done = handleSubMenuOption(option);\n            } else {\n                done = true;\n            }\n        }\n    }\n\n    public static boolean handleSubMenuOption(String option) {\n        switch (option) {\n            case \"a\":\n                System.out.println(\"Vous avez choisi l'option a !\");\n                break;\n            case \"b\":\n                System.out.println(\"Vous avez choisi l'option b !\");\n                break;\n            case \"c\":\n                System.out.println(\"Vous avez choisi l'option c !\");\n                break;\n            case \"d\":\n                System.out.println(\"Vous voulez quitter le sous-menu!\");\n                return true;\n            default:\n                System.out.println(\"Option invalide. SVP choisir une option valide.\");\n        }\n        return false;\n    }\n}\n</code></pre> main.txt<pre><code>Choisissez une option :\n1. Sous-menu (1 fois)\n2. Sous-menu (boucle)\n3. Option 3\n4. Quitter\n</code></pre> sub.txt<pre><code>Choisissez une option :\na. Option a\nb. Option b\nc. Option c\nd. Quitter\n</code></pre> <p>Avertissement</p> <p>Cet exemple n\u2019est pas un programme complet, mais la troisi\u00e8me version d\u2019un exemple de structure de menu pouvant  \u00eatre utilis\u00e9 dans un programme plus complet.</p> <p>La principale diff\u00e9rence entre la v2 et la v3 de la classe <code>Menu</code> r\u00e9side dans la fa\u00e7on dont le contenu du menu est g\u00e9r\u00e9. Au lieu d\u2019\u00eatre cod\u00e9 en dur dans le programme, le contenu du menu de la v3 est charg\u00e9 depuis des fichiers externes. Voici les changements :</p> <ul> <li>Chargement du menu depuis des fichiers : La v3 utilise la m\u00e9thode <code>showMenu(String name)</code> pour charger le contenu   du menu depuis des fichiers texte situ\u00e9s dans un r\u00e9pertoire \u201cmenu\u201d. Le nom du fichier correspond au nom du menu pass\u00e9   en argument (par exemple, \u201cmain\u201d pour le menu principal, \u201csub\u201d pour le sous-menu). Le contenu du fichier est lu et   stock\u00e9 dans une <code>HashMap</code> appel\u00e9e <code>menuStrings</code>.</li> <li>Gestion des erreurs : La m\u00e9thode <code>showMenu()</code> g\u00e8re maintenant les erreurs potentielles lors de la lecture des   fichiers menu. Si une erreur se produit (par exemple, si le fichier n\u2019existe pas), elle affiche un message d\u2019erreur et   renvoie <code>false</code>. Ceci est important pour la robustesse du programme.</li> <li><code>HashMap</code> pour stocker le contenu du menu :  Une <code>HashMap</code> appel\u00e9e <code>menuStrings</code> est utilis\u00e9e pour stocker le   contenu des menus. La cl\u00e9 est le nom du menu (\u201cmain\u201d ou \u201csub\u201d) et la valeur est le texte du menu lu depuis le fichier   correspondant. Cela permet de ne lire le contenu du fichier qu\u2019une seule fois, am\u00e9liorant ainsi les performances.</li> <li><code>Scanner</code> statique :  L\u2019objet <code>Scanner</code> est maintenant un attribut statique de la classe, ce qui \u00e9vite de le cr\u00e9er   \u00e0 chaque fois dans <code>main</code> et  <code>handleMainMenuOption</code>.</li> <li>Refactorisation du code pour <code>case \"1\"</code> et <code>case \"2\"</code> : Le code des blocs <code>case \"1\"</code> et <code>case \"2\"</code> de la m\u00e9thode   <code>handleMainMenuOption</code> a \u00e9t\u00e9 extrait dans les m\u00e9thodes  <code>handleMainMenuCase1()</code> et <code>handleMainMenuCase2()</code>   respectivement, am\u00e9liorant la lisibilit\u00e9 et l\u2019organisation du code.</li> </ul> <p>En r\u00e9sum\u00e9, la v3 externalise le contenu des menus dans des fichiers, ce qui rend le code plus flexible et maintenable. La gestion des erreurs et l\u2019utilisation d\u2019une <code>HashMap</code> am\u00e9liorent \u00e9galement la robustesse et les performances du programme. L\u2019utilisation d\u2019un <code>Scanner</code> statique et le d\u00e9placement de la logique des blocs <code>case</code> vers des m\u00e9thodes d\u00e9di\u00e9es am\u00e9liore la qualit\u00e9 et la lisibilit\u00e9 du code.</p> Utilisation de l\u2019IA <p>Page r\u00e9dig\u00e9e en partie avec l\u2019aide d\u2019un assistant IA, principalement \u00e0 l\u2019aide de Perplexity AI, avec le LLM Claude 3.5 Sonnet. L\u2019IA a \u00e9t\u00e9 utilis\u00e9e pour g\u00e9n\u00e9rer des explications, des exemples et/ou des suggestions de   structure. Toutes les informations ont \u00e9t\u00e9 v\u00e9rifi\u00e9es, \u00e9dit\u00e9es et compl\u00e9t\u00e9es par l\u2019auteur.</p>"}]}